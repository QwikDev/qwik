{
  "id": "qwik",
  "package": "@builder.io/qwik",
  "members": [
    {
      "name": "_qrlSync",
      "id": "_qrlsync",
      "hierarchy": [
        {
          "name": "_qrlSync",
          "id": "_qrlsync"
        }
      ],
      "kind": "Function",
      "content": "> This API is provided as an alpha preview for developers and may change based on feedback that we receive. Do not use this API in a production environment.\n> \n\nExtract function into a synchronously loadable QRL.\n\nNOTE: Synchronous QRLs functions can't close over any variables, including exports.\n\n\n```typescript\n_qrlSync: <TYPE extends Function>(fn: TYPE, serializedFn?: string) => SyncQRL<TYPE>\n```\n\n\n<table><thead><tr><th>\n\nParameter\n\n\n</th><th>\n\nType\n\n\n</th><th>\n\nDescription\n\n\n</th></tr></thead>\n<tbody><tr><td>\n\nfn\n\n\n</td><td>\n\nTYPE\n\n\n</td><td>\n\nExtracted function\n\n\n</td></tr>\n<tr><td>\n\nserializedFn\n\n\n</td><td>\n\nstring\n\n\n</td><td>\n\n_(Optional)_ Serialized function in string form.\n\n\n</td></tr>\n</tbody></table>\n**Returns:**\n\n[SyncQRL](#syncqrl)<!-- -->&lt;TYPE&gt;",
      "editUrl": "https://github.com/QwikDev/qwik/tree/main/packages/qwik/src/core/qrl/qrl.public.ts",
      "mdFile": "qwik._qrlsync.md"
    },
    {
      "name": "\"q:slot\"",
      "id": "componentbaseprops-_q_slot_",
      "hierarchy": [
        {
          "name": "ComponentBaseProps",
          "id": "componentbaseprops-_q_slot_"
        },
        {
          "name": "\"q:slot\"",
          "id": "componentbaseprops-_q_slot_"
        }
      ],
      "kind": "PropertySignature",
      "content": "```typescript\n'q:slot'?: string;\n```",
      "mdFile": "qwik.componentbaseprops._q_slot_.md"
    },
    {
      "name": "\"xlink:actuate\"",
      "id": "svgattributes-_xlink_actuate_",
      "hierarchy": [
        {
          "name": "SVGAttributes",
          "id": "svgattributes-_xlink_actuate_"
        },
        {
          "name": "\"xlink:actuate\"",
          "id": "svgattributes-_xlink_actuate_"
        }
      ],
      "kind": "PropertySignature",
      "content": "```typescript\n'xlink:actuate'?: string | undefined;\n```",
      "mdFile": "qwik.svgattributes._xlink_actuate_.md"
    },
    {
      "name": "\"xlink:arcrole\"",
      "id": "svgattributes-_xlink_arcrole_",
      "hierarchy": [
        {
          "name": "SVGAttributes",
          "id": "svgattributes-_xlink_arcrole_"
        },
        {
          "name": "\"xlink:arcrole\"",
          "id": "svgattributes-_xlink_arcrole_"
        }
      ],
      "kind": "PropertySignature",
      "content": "```typescript\n'xlink:arcrole'?: string | undefined;\n```",
      "mdFile": "qwik.svgattributes._xlink_arcrole_.md"
    },
    {
      "name": "\"xlink:href\"",
      "id": "svgattributes-_xlink_href_",
      "hierarchy": [
        {
          "name": "SVGAttributes",
          "id": "svgattributes-_xlink_href_"
        },
        {
          "name": "\"xlink:href\"",
          "id": "svgattributes-_xlink_href_"
        }
      ],
      "kind": "PropertySignature",
      "content": "```typescript\n'xlink:href'?: string | undefined;\n```",
      "mdFile": "qwik.svgattributes._xlink_href_.md"
    },
    {
      "name": "\"xlink:role\"",
      "id": "svgattributes-_xlink_role_",
      "hierarchy": [
        {
          "name": "SVGAttributes",
          "id": "svgattributes-_xlink_role_"
        },
        {
          "name": "\"xlink:role\"",
          "id": "svgattributes-_xlink_role_"
        }
      ],
      "kind": "PropertySignature",
      "content": "```typescript\n'xlink:role'?: string | undefined;\n```",
      "mdFile": "qwik.svgattributes._xlink_role_.md"
    },
    {
      "name": "\"xlink:show\"",
      "id": "svgattributes-_xlink_show_",
      "hierarchy": [
        {
          "name": "SVGAttributes",
          "id": "svgattributes-_xlink_show_"
        },
        {
          "name": "\"xlink:show\"",
          "id": "svgattributes-_xlink_show_"
        }
      ],
      "kind": "PropertySignature",
      "content": "```typescript\n'xlink:show'?: string | undefined;\n```",
      "mdFile": "qwik.svgattributes._xlink_show_.md"
    },
    {
      "name": "\"xlink:title\"",
      "id": "svgattributes-_xlink_title_",
      "hierarchy": [
        {
          "name": "SVGAttributes",
          "id": "svgattributes-_xlink_title_"
        },
        {
          "name": "\"xlink:title\"",
          "id": "svgattributes-_xlink_title_"
        }
      ],
      "kind": "PropertySignature",
      "content": "```typescript\n'xlink:title'?: string | undefined;\n```",
      "mdFile": "qwik.svgattributes._xlink_title_.md"
    },
    {
      "name": "\"xlink:type\"",
      "id": "svgattributes-_xlink_type_",
      "hierarchy": [
        {
          "name": "SVGAttributes",
          "id": "svgattributes-_xlink_type_"
        },
        {
          "name": "\"xlink:type\"",
          "id": "svgattributes-_xlink_type_"
        }
      ],
      "kind": "PropertySignature",
      "content": "```typescript\n'xlink:type'?: string | undefined;\n```",
      "mdFile": "qwik.svgattributes._xlink_type_.md"
    },
    {
      "name": "\"xml:base\"",
      "id": "svgattributes-_xml_base_",
      "hierarchy": [
        {
          "name": "SVGAttributes",
          "id": "svgattributes-_xml_base_"
        },
        {
          "name": "\"xml:base\"",
          "id": "svgattributes-_xml_base_"
        }
      ],
      "kind": "PropertySignature",
      "content": "```typescript\n'xml:base'?: string | undefined;\n```",
      "mdFile": "qwik.svgattributes._xml_base_.md"
    },
    {
      "name": "\"xml:lang\"",
      "id": "svgattributes-_xml_lang_",
      "hierarchy": [
        {
          "name": "SVGAttributes",
          "id": "svgattributes-_xml_lang_"
        },
        {
          "name": "\"xml:lang\"",
          "id": "svgattributes-_xml_lang_"
        }
      ],
      "kind": "PropertySignature",
      "content": "```typescript\n'xml:lang'?: string | undefined;\n```",
      "mdFile": "qwik.svgattributes._xml_lang_.md"
    },
    {
      "name": "\"xml:space\"",
      "id": "svgattributes-_xml_space_",
      "hierarchy": [
        {
          "name": "SVGAttributes",
          "id": "svgattributes-_xml_space_"
        },
        {
          "name": "\"xml:space\"",
          "id": "svgattributes-_xml_space_"
        }
      ],
      "kind": "PropertySignature",
      "content": "```typescript\n'xml:space'?: string | undefined;\n```",
      "mdFile": "qwik.svgattributes._xml_space_.md"
    },
    {
      "name": "\"xmlns:xlink\"",
      "id": "svgattributes-_xmlns_xlink_",
      "hierarchy": [
        {
          "name": "SVGAttributes",
          "id": "svgattributes-_xmlns_xlink_"
        },
        {
          "name": "\"xmlns:xlink\"",
          "id": "svgattributes-_xmlns_xlink_"
        }
      ],
      "kind": "PropertySignature",
      "content": "```typescript\n'xmlns:xlink'?: string | undefined;\n```",
      "mdFile": "qwik.svgattributes._xmlns_xlink_.md"
    },
    {
      "name": "$",
      "id": "_",
      "hierarchy": [
        {
          "name": "$",
          "id": "_"
        }
      ],
      "kind": "Function",
      "content": "Qwik Optimizer marker function.\n\nUse `$(...)` to tell Qwik Optimizer to extract the expression in `$(...)` into a lazy-loadable resource referenced by `QRL`<!-- -->.\n\n\n```typescript\n$: <T>(expression: T) => QRL<T>\n```\n\n\n<table><thead><tr><th>\n\nParameter\n\n\n</th><th>\n\nType\n\n\n</th><th>\n\nDescription\n\n\n</th></tr></thead>\n<tbody><tr><td>\n\nexpression\n\n\n</td><td>\n\nT\n\n\n</td><td>\n\nExpression which should be lazy loaded\n\n\n</td></tr>\n</tbody></table>\n**Returns:**\n\n[QRL](#qrl)<!-- -->&lt;T&gt;",
      "editUrl": "https://github.com/QwikDev/qwik/tree/main/packages/qwik/src/core/qrl/qrl.public.ts",
      "mdFile": "qwik._.md"
    },
    {
      "name": "AnchorHTMLAttributes",
      "id": "anchorhtmlattributes",
      "hierarchy": [
        {
          "name": "AnchorHTMLAttributes",
          "id": "anchorhtmlattributes"
        }
      ],
      "kind": "Interface",
      "content": "```typescript\nexport interface AnchorHTMLAttributes<T extends Element> extends Attrs<'a', T> \n```\n**Extends:** Attrs&lt;'a', T&gt;",
      "editUrl": "https://github.com/QwikDev/qwik/tree/main/packages/qwik/src/core/render/jsx/types/jsx-generated.ts",
      "mdFile": "qwik.anchorhtmlattributes.md"
    },
    {
      "name": "AreaHTMLAttributes",
      "id": "areahtmlattributes",
      "hierarchy": [
        {
          "name": "AreaHTMLAttributes",
          "id": "areahtmlattributes"
        }
      ],
      "kind": "Interface",
      "content": "```typescript\nexport interface AreaHTMLAttributes<T extends Element> extends Attrs<'area', T> \n```\n**Extends:** Attrs&lt;'area', T&gt;",
      "editUrl": "https://github.com/QwikDev/qwik/tree/main/packages/qwik/src/core/render/jsx/types/jsx-generated.ts",
      "mdFile": "qwik.areahtmlattributes.md"
    },
    {
      "name": "AriaAttributes",
      "id": "ariaattributes",
      "hierarchy": [
        {
          "name": "AriaAttributes",
          "id": "ariaattributes"
        }
      ],
      "kind": "Interface",
      "content": "TS defines these with the React syntax which is not compatible with Qwik. E.g. `ariaAtomic` instead of `aria-atomic`<!-- -->.\n\n\n```typescript\nexport interface AriaAttributes \n```\n\n\n<table><thead><tr><th>\n\nProperty\n\n\n</th><th>\n\nModifiers\n\n\n</th><th>\n\nType\n\n\n</th><th>\n\nDescription\n\n\n</th></tr></thead>\n<tbody><tr><td>\n\n[\"aria-activedescendant\"?](#)\n\n\n</td><td>\n\n\n</td><td>\n\nstring \\| undefined\n\n\n</td><td>\n\n_(Optional)_ Identifies the currently active element when DOM focus is on a composite widget, textbox, group, or application.\n\n\n</td></tr>\n<tr><td>\n\n[\"aria-atomic\"?](#)\n\n\n</td><td>\n\n\n</td><td>\n\n[Booleanish](#booleanish) \\| undefined\n\n\n</td><td>\n\n_(Optional)_ Indicates whether assistive technologies will present all, or only parts of, the changed region based on the change notifications defined by the aria-relevant attribute.\n\n\n</td></tr>\n<tr><td>\n\n[\"aria-autocomplete\"?](#)\n\n\n</td><td>\n\n\n</td><td>\n\n'none' \\| 'inline' \\| 'list' \\| 'both' \\| undefined\n\n\n</td><td>\n\n_(Optional)_ Indicates whether inputting text could trigger display of one or more predictions of the user's intended value for an input and specifies how predictions would be presented if they are made.\n\n\n</td></tr>\n<tr><td>\n\n[\"aria-busy\"?](#)\n\n\n</td><td>\n\n\n</td><td>\n\n[Booleanish](#booleanish) \\| undefined\n\n\n</td><td>\n\n_(Optional)_ Indicates an element is being modified and that assistive technologies MAY want to wait until the modifications are complete before exposing them to the user.\n\n\n</td></tr>\n<tr><td>\n\n[\"aria-checked\"?](#)\n\n\n</td><td>\n\n\n</td><td>\n\nboolean \\| 'false' \\| 'mixed' \\| 'true' \\| undefined\n\n\n</td><td>\n\n_(Optional)_ Indicates the current \"checked\" state of checkboxes, radio buttons, and other widgets.\n\n\n</td></tr>\n<tr><td>\n\n[\"aria-colcount\"?](#)\n\n\n</td><td>\n\n\n</td><td>\n\nnumber \\| undefined\n\n\n</td><td>\n\n_(Optional)_ Defines the total number of columns in a table, grid, or treegrid.\n\n\n</td></tr>\n<tr><td>\n\n[\"aria-colindex\"?](#)\n\n\n</td><td>\n\n\n</td><td>\n\nnumber \\| undefined\n\n\n</td><td>\n\n_(Optional)_ Defines an element's column index or position with respect to the total number of columns within a table, grid, or treegrid.\n\n\n</td></tr>\n<tr><td>\n\n[\"aria-colspan\"?](#)\n\n\n</td><td>\n\n\n</td><td>\n\nnumber \\| undefined\n\n\n</td><td>\n\n_(Optional)_ Defines the number of columns spanned by a cell or gridcell within a table, grid, or treegrid.\n\n\n</td></tr>\n<tr><td>\n\n[\"aria-controls\"?](#)\n\n\n</td><td>\n\n\n</td><td>\n\nstring \\| undefined\n\n\n</td><td>\n\n_(Optional)_ Identifies the element (or elements) whose contents or presence are controlled by the current element.\n\n\n</td></tr>\n<tr><td>\n\n[\"aria-current\"?](#)\n\n\n</td><td>\n\n\n</td><td>\n\nboolean \\| 'false' \\| 'true' \\| 'page' \\| 'step' \\| 'location' \\| 'date' \\| 'time' \\| undefined\n\n\n</td><td>\n\n_(Optional)_ Indicates the element that represents the current item within a container or set of related elements.\n\n\n</td></tr>\n<tr><td>\n\n[\"aria-describedby\"?](#)\n\n\n</td><td>\n\n\n</td><td>\n\nstring \\| undefined\n\n\n</td><td>\n\n_(Optional)_ Identifies the element (or elements) that describes the object.\n\n\n</td></tr>\n<tr><td>\n\n[\"aria-details\"?](#)\n\n\n</td><td>\n\n\n</td><td>\n\nstring \\| undefined\n\n\n</td><td>\n\n_(Optional)_ Identifies the element that provides a detailed, extended description for the object.\n\n\n</td></tr>\n<tr><td>\n\n[\"aria-disabled\"?](#)\n\n\n</td><td>\n\n\n</td><td>\n\n[Booleanish](#booleanish) \\| undefined\n\n\n</td><td>\n\n_(Optional)_ Indicates that the element is perceivable but disabled, so it is not editable or otherwise operable.\n\n\n</td></tr>\n<tr><td>\n\n[\"aria-dropeffect\"?](#)\n\n\n</td><td>\n\n\n</td><td>\n\n'none' \\| 'copy' \\| 'execute' \\| 'link' \\| 'move' \\| 'popup' \\| undefined\n\n\n</td><td>\n\n_(Optional)_ Indicates what functions can be performed when a dragged object is released on the drop target.\n\n\n</td></tr>\n<tr><td>\n\n[\"aria-errormessage\"?](#)\n\n\n</td><td>\n\n\n</td><td>\n\nstring \\| undefined\n\n\n</td><td>\n\n_(Optional)_ Identifies the element that provides an error message for the object.\n\n\n</td></tr>\n<tr><td>\n\n[\"aria-expanded\"?](#)\n\n\n</td><td>\n\n\n</td><td>\n\n[Booleanish](#booleanish) \\| undefined\n\n\n</td><td>\n\n_(Optional)_ Indicates whether the element, or another grouping element it controls, is currently expanded or collapsed.\n\n\n</td></tr>\n<tr><td>\n\n[\"aria-flowto\"?](#)\n\n\n</td><td>\n\n\n</td><td>\n\nstring \\| undefined\n\n\n</td><td>\n\n_(Optional)_ Identifies the next element (or elements) in an alternate reading order of content which, at the user's discretion, allows assistive technology to override the general default of reading in document source order.\n\n\n</td></tr>\n<tr><td>\n\n[\"aria-grabbed\"?](#)\n\n\n</td><td>\n\n\n</td><td>\n\n[Booleanish](#booleanish) \\| undefined\n\n\n</td><td>\n\n_(Optional)_ Indicates an element's \"grabbed\" state in a drag-and-drop operation.\n\n\n</td></tr>\n<tr><td>\n\n[\"aria-haspopup\"?](#)\n\n\n</td><td>\n\n\n</td><td>\n\nboolean \\| 'false' \\| 'true' \\| 'menu' \\| 'listbox' \\| 'tree' \\| 'grid' \\| 'dialog' \\| undefined\n\n\n</td><td>\n\n_(Optional)_ Indicates the availability and type of interactive popup element, such as menu or dialog, that can be triggered by an element.\n\n\n</td></tr>\n<tr><td>\n\n[\"aria-hidden\"?](#)\n\n\n</td><td>\n\n\n</td><td>\n\n[Booleanish](#booleanish) \\| undefined\n\n\n</td><td>\n\n_(Optional)_ Indicates whether the element is exposed to an accessibility API.\n\n\n</td></tr>\n<tr><td>\n\n[\"aria-invalid\"?](#)\n\n\n</td><td>\n\n\n</td><td>\n\nboolean \\| 'false' \\| 'true' \\| 'grammar' \\| 'spelling' \\| undefined\n\n\n</td><td>\n\n_(Optional)_ Indicates the entered value does not conform to the format expected by the application.\n\n\n</td></tr>\n<tr><td>\n\n[\"aria-keyshortcuts\"?](#)\n\n\n</td><td>\n\n\n</td><td>\n\nstring \\| undefined\n\n\n</td><td>\n\n_(Optional)_ Indicates keyboard shortcuts that an author has implemented to activate or give focus to an element.\n\n\n</td></tr>\n<tr><td>\n\n[\"aria-label\"?](#)\n\n\n</td><td>\n\n\n</td><td>\n\nstring \\| undefined\n\n\n</td><td>\n\n_(Optional)_ Defines a string value that labels the current element.\n\n\n</td></tr>\n<tr><td>\n\n[\"aria-labelledby\"?](#)\n\n\n</td><td>\n\n\n</td><td>\n\nstring \\| undefined\n\n\n</td><td>\n\n_(Optional)_ Identifies the element (or elements) that labels the current element.\n\n\n</td></tr>\n<tr><td>\n\n[\"aria-level\"?](#)\n\n\n</td><td>\n\n\n</td><td>\n\nnumber \\| undefined\n\n\n</td><td>\n\n_(Optional)_ Defines the hierarchical level of an element within a structure.\n\n\n</td></tr>\n<tr><td>\n\n[\"aria-live\"?](#)\n\n\n</td><td>\n\n\n</td><td>\n\n'off' \\| 'assertive' \\| 'polite' \\| undefined\n\n\n</td><td>\n\n_(Optional)_ Indicates that an element will be updated, and describes the types of updates the user agents, assistive technologies, and user can expect from the live region.\n\n\n</td></tr>\n<tr><td>\n\n[\"aria-modal\"?](#)\n\n\n</td><td>\n\n\n</td><td>\n\n[Booleanish](#booleanish) \\| undefined\n\n\n</td><td>\n\n_(Optional)_ Indicates whether an element is modal when displayed.\n\n\n</td></tr>\n<tr><td>\n\n[\"aria-multiline\"?](#)\n\n\n</td><td>\n\n\n</td><td>\n\n[Booleanish](#booleanish) \\| undefined\n\n\n</td><td>\n\n_(Optional)_ Indicates whether a text box accepts multiple lines of input or only a single line.\n\n\n</td></tr>\n<tr><td>\n\n[\"aria-multiselectable\"?](#)\n\n\n</td><td>\n\n\n</td><td>\n\n[Booleanish](#booleanish) \\| undefined\n\n\n</td><td>\n\n_(Optional)_ Indicates that the user may select more than one item from the current selectable descendants.\n\n\n</td></tr>\n<tr><td>\n\n[\"aria-orientation\"?](#)\n\n\n</td><td>\n\n\n</td><td>\n\n'horizontal' \\| 'vertical' \\| undefined\n\n\n</td><td>\n\n_(Optional)_ Indicates whether the element's orientation is horizontal, vertical, or unknown/ambiguous.\n\n\n</td></tr>\n<tr><td>\n\n[\"aria-owns\"?](#)\n\n\n</td><td>\n\n\n</td><td>\n\nstring \\| undefined\n\n\n</td><td>\n\n_(Optional)_ Identifies an element (or elements) in order to define a visual, functional, or contextual parent/child relationship between DOM elements where the DOM hierarchy cannot be used to represent the relationship.\n\n\n</td></tr>\n<tr><td>\n\n[\"aria-placeholder\"?](#)\n\n\n</td><td>\n\n\n</td><td>\n\nstring \\| undefined\n\n\n</td><td>\n\n_(Optional)_ Defines a short hint (a word or short phrase) intended to aid the user with data entry when the control has no value. A hint could be a sample value or a brief description of the expected format.\n\n\n</td></tr>\n<tr><td>\n\n[\"aria-posinset\"?](#)\n\n\n</td><td>\n\n\n</td><td>\n\nnumber \\| undefined\n\n\n</td><td>\n\n_(Optional)_ Defines an element's number or position in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM.\n\n\n</td></tr>\n<tr><td>\n\n[\"aria-pressed\"?](#)\n\n\n</td><td>\n\n\n</td><td>\n\nboolean \\| 'false' \\| 'mixed' \\| 'true' \\| undefined\n\n\n</td><td>\n\n_(Optional)_ Indicates the current \"pressed\" state of toggle buttons.\n\n\n</td></tr>\n<tr><td>\n\n[\"aria-readonly\"?](#)\n\n\n</td><td>\n\n\n</td><td>\n\n[Booleanish](#booleanish) \\| undefined\n\n\n</td><td>\n\n_(Optional)_ Indicates that the element is not editable, but is otherwise operable.\n\n\n</td></tr>\n<tr><td>\n\n[\"aria-relevant\"?](#)\n\n\n</td><td>\n\n\n</td><td>\n\n'additions' \\| 'additions removals' \\| 'additions text' \\| 'all' \\| 'removals' \\| 'removals additions' \\| 'removals text' \\| 'text' \\| 'text additions' \\| 'text removals' \\| undefined\n\n\n</td><td>\n\n_(Optional)_ Indicates what notifications the user agent will trigger when the accessibility tree within a live region is modified.\n\n\n</td></tr>\n<tr><td>\n\n[\"aria-required\"?](#)\n\n\n</td><td>\n\n\n</td><td>\n\n[Booleanish](#booleanish) \\| undefined\n\n\n</td><td>\n\n_(Optional)_ Indicates that user input is required on the element before a form may be submitted.\n\n\n</td></tr>\n<tr><td>\n\n[\"aria-roledescription\"?](#)\n\n\n</td><td>\n\n\n</td><td>\n\nstring \\| undefined\n\n\n</td><td>\n\n_(Optional)_ Defines a human-readable, author-localized description for the role of an element.\n\n\n</td></tr>\n<tr><td>\n\n[\"aria-rowcount\"?](#)\n\n\n</td><td>\n\n\n</td><td>\n\nnumber \\| undefined\n\n\n</td><td>\n\n_(Optional)_ Defines the total number of rows in a table, grid, or treegrid.\n\n\n</td></tr>\n<tr><td>\n\n[\"aria-rowindex\"?](#)\n\n\n</td><td>\n\n\n</td><td>\n\nnumber \\| undefined\n\n\n</td><td>\n\n_(Optional)_ Defines an element's row index or position with respect to the total number of rows within a table, grid, or treegrid.\n\n\n</td></tr>\n<tr><td>\n\n[\"aria-rowspan\"?](#)\n\n\n</td><td>\n\n\n</td><td>\n\nnumber \\| undefined\n\n\n</td><td>\n\n_(Optional)_ Defines the number of rows spanned by a cell or gridcell within a table, grid, or treegrid.\n\n\n</td></tr>\n<tr><td>\n\n[\"aria-selected\"?](#)\n\n\n</td><td>\n\n\n</td><td>\n\n[Booleanish](#booleanish) \\| undefined\n\n\n</td><td>\n\n_(Optional)_ Indicates the current \"selected\" state of various widgets.\n\n\n</td></tr>\n<tr><td>\n\n[\"aria-setsize\"?](#)\n\n\n</td><td>\n\n\n</td><td>\n\nnumber \\| undefined\n\n\n</td><td>\n\n_(Optional)_ Defines the number of items in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM.\n\n\n</td></tr>\n<tr><td>\n\n[\"aria-sort\"?](#)\n\n\n</td><td>\n\n\n</td><td>\n\n'none' \\| 'ascending' \\| 'descending' \\| 'other' \\| undefined\n\n\n</td><td>\n\n_(Optional)_ Indicates if items in a table or grid are sorted in ascending or descending order.\n\n\n</td></tr>\n<tr><td>\n\n[\"aria-valuemax\"?](#)\n\n\n</td><td>\n\n\n</td><td>\n\nnumber \\| undefined\n\n\n</td><td>\n\n_(Optional)_ Defines the maximum allowed value for a range widget.\n\n\n</td></tr>\n<tr><td>\n\n[\"aria-valuemin\"?](#)\n\n\n</td><td>\n\n\n</td><td>\n\nnumber \\| undefined\n\n\n</td><td>\n\n_(Optional)_ Defines the minimum allowed value for a range widget.\n\n\n</td></tr>\n<tr><td>\n\n[\"aria-valuenow\"?](#)\n\n\n</td><td>\n\n\n</td><td>\n\nnumber \\| undefined\n\n\n</td><td>\n\n_(Optional)_ Defines the current value for a range widget.\n\n\n</td></tr>\n<tr><td>\n\n[\"aria-valuetext\"?](#)\n\n\n</td><td>\n\n\n</td><td>\n\nstring \\| undefined\n\n\n</td><td>\n\n_(Optional)_ Defines the human readable text alternative of aria-valuenow for a range widget.\n\n\n</td></tr>\n</tbody></table>",
      "editUrl": "https://github.com/QwikDev/qwik/tree/main/packages/qwik/src/core/render/jsx/types/jsx-generated.ts",
      "mdFile": "qwik.ariaattributes.md"
    },
    {
      "name": "AriaRole",
      "id": "ariarole",
      "hierarchy": [
        {
          "name": "AriaRole",
          "id": "ariarole"
        }
      ],
      "kind": "TypeAlias",
      "content": "```typescript\nexport type AriaRole = 'alert' | 'alertdialog' | 'application' | 'article' | 'banner' | 'button' | 'cell' | 'checkbox' | 'columnheader' | 'combobox' | 'complementary' | 'contentinfo' | 'definition' | 'dialog' | 'directory' | 'document' | 'feed' | 'figure' | 'form' | 'grid' | 'gridcell' | 'group' | 'heading' | 'img' | 'link' | 'list' | 'listbox' | 'listitem' | 'log' | 'main' | 'marquee' | 'math' | 'menu' | 'menubar' | 'menuitem' | 'menuitemcheckbox' | 'menuitemradio' | 'navigation' | 'none' | 'note' | 'option' | 'presentation' | 'progressbar' | 'radio' | 'radiogroup' | 'region' | 'row' | 'rowgroup' | 'rowheader' | 'scrollbar' | 'search' | 'searchbox' | 'separator' | 'slider' | 'spinbutton' | 'status' | 'switch' | 'tab' | 'table' | 'tablist' | 'tabpanel' | 'term' | 'textbox' | 'timer' | 'toolbar' | 'tooltip' | 'tree' | 'treegrid' | 'treeitem' | (string & {});\n```",
      "editUrl": "https://github.com/QwikDev/qwik/tree/main/packages/qwik/src/core/render/jsx/types/jsx-generated.ts",
      "mdFile": "qwik.ariarole.md"
    },
    {
      "name": "AudioHTMLAttributes",
      "id": "audiohtmlattributes",
      "hierarchy": [
        {
          "name": "AudioHTMLAttributes",
          "id": "audiohtmlattributes"
        }
      ],
      "kind": "Interface",
      "content": "```typescript\nexport interface AudioHTMLAttributes<T extends Element> extends Attrs<'audio', T> \n```\n**Extends:** Attrs&lt;'audio', T&gt;",
      "editUrl": "https://github.com/QwikDev/qwik/tree/main/packages/qwik/src/core/render/jsx/types/jsx-generated.ts",
      "mdFile": "qwik.audiohtmlattributes.md"
    },
    {
      "name": "BaseHTMLAttributes",
      "id": "basehtmlattributes",
      "hierarchy": [
        {
          "name": "BaseHTMLAttributes",
          "id": "basehtmlattributes"
        }
      ],
      "kind": "Interface",
      "content": "```typescript\nexport interface BaseHTMLAttributes<T extends Element> extends Attrs<'base', T> \n```\n**Extends:** Attrs&lt;'base', T&gt;",
      "editUrl": "https://github.com/QwikDev/qwik/tree/main/packages/qwik/src/core/render/jsx/types/jsx-generated.ts",
      "mdFile": "qwik.basehtmlattributes.md"
    },
    {
      "name": "BlockquoteHTMLAttributes",
      "id": "blockquotehtmlattributes",
      "hierarchy": [
        {
          "name": "BlockquoteHTMLAttributes",
          "id": "blockquotehtmlattributes"
        }
      ],
      "kind": "Interface",
      "content": "```typescript\nexport interface BlockquoteHTMLAttributes<T extends Element> extends Attrs<'blockquote', T> \n```\n**Extends:** Attrs&lt;'blockquote', T&gt;",
      "editUrl": "https://github.com/QwikDev/qwik/tree/main/packages/qwik/src/core/render/jsx/types/jsx-generated.ts",
      "mdFile": "qwik.blockquotehtmlattributes.md"
    },
    {
      "name": "Booleanish",
      "id": "booleanish",
      "hierarchy": [
        {
          "name": "Booleanish",
          "id": "booleanish"
        }
      ],
      "kind": "TypeAlias",
      "content": "```typescript\nexport type Booleanish = boolean | `${boolean}`;\n```",
      "editUrl": "https://github.com/QwikDev/qwik/tree/main/packages/qwik/src/core/render/jsx/types/jsx-generated.ts",
      "mdFile": "qwik.booleanish.md"
    },
    {
      "name": "ButtonHTMLAttributes",
      "id": "buttonhtmlattributes",
      "hierarchy": [
        {
          "name": "ButtonHTMLAttributes",
          "id": "buttonhtmlattributes"
        }
      ],
      "kind": "Interface",
      "content": "```typescript\nexport interface ButtonHTMLAttributes<T extends Element> extends Attrs<'button', T> \n```\n**Extends:** Attrs&lt;'button', T&gt;",
      "editUrl": "https://github.com/QwikDev/qwik/tree/main/packages/qwik/src/core/render/jsx/types/jsx-generated.ts",
      "mdFile": "qwik.buttonhtmlattributes.md"
    },
    {
      "name": "cache",
      "id": "resourcectx-cache",
      "hierarchy": [
        {
          "name": "ResourceCtx",
          "id": "resourcectx-cache"
        },
        {
          "name": "cache",
          "id": "resourcectx-cache"
        }
      ],
      "kind": "MethodSignature",
      "content": "```typescript\ncache(policyOrMilliseconds: number | 'immutable'): void;\n```\n\n\n<table><thead><tr><th>\n\nParameter\n\n\n</th><th>\n\nType\n\n\n</th><th>\n\nDescription\n\n\n</th></tr></thead>\n<tbody><tr><td>\n\npolicyOrMilliseconds\n\n\n</td><td>\n\nnumber \\| 'immutable'\n\n\n</td><td>\n\n\n</td></tr>\n</tbody></table>\n**Returns:**\n\nvoid",
      "mdFile": "qwik.resourcectx.cache.md"
    },
    {
      "name": "CanvasHTMLAttributes",
      "id": "canvashtmlattributes",
      "hierarchy": [
        {
          "name": "CanvasHTMLAttributes",
          "id": "canvashtmlattributes"
        }
      ],
      "kind": "Interface",
      "content": "```typescript\nexport interface CanvasHTMLAttributes<T extends Element> extends Attrs<'canvas', T> \n```\n**Extends:** Attrs&lt;'canvas', T&gt;",
      "editUrl": "https://github.com/QwikDev/qwik/tree/main/packages/qwik/src/core/render/jsx/types/jsx-generated.ts",
      "mdFile": "qwik.canvashtmlattributes.md"
    },
    {
      "name": "ClassList",
      "id": "classlist",
      "hierarchy": [
        {
          "name": "ClassList",
          "id": "classlist"
        }
      ],
      "kind": "TypeAlias",
      "content": "A class list can be a string, a boolean, an array, or an object.\n\nIf it's an array, each item is a class list and they are all added.\n\nIf it's an object, then the keys are class name strings, and the values are booleans that determine if the class name string should be added or not.\n\n\n```typescript\nexport type ClassList = string | undefined | null | false | Record<string, boolean | string | number | null | undefined> | ClassList[];\n```\n**References:** [ClassList](#classlist)",
      "editUrl": "https://github.com/QwikDev/qwik/tree/main/packages/qwik/src/core/render/jsx/types/jsx-qwik-attributes.ts",
      "mdFile": "qwik.classlist.md"
    },
    {
      "name": "cleanup",
      "id": "renderresult-cleanup",
      "hierarchy": [
        {
          "name": "RenderResult",
          "id": "renderresult-cleanup"
        },
        {
          "name": "cleanup",
          "id": "renderresult-cleanup"
        }
      ],
      "kind": "MethodSignature",
      "content": "```typescript\ncleanup(): void;\n```\n**Returns:**\n\nvoid",
      "mdFile": "qwik.renderresult.cleanup.md"
    },
    {
      "name": "ColgroupHTMLAttributes",
      "id": "colgrouphtmlattributes",
      "hierarchy": [
        {
          "name": "ColgroupHTMLAttributes",
          "id": "colgrouphtmlattributes"
        }
      ],
      "kind": "Interface",
      "content": "```typescript\nexport interface ColgroupHTMLAttributes<T extends Element> extends Attrs<'colgroup', T> \n```\n**Extends:** Attrs&lt;'colgroup', T&gt;",
      "editUrl": "https://github.com/QwikDev/qwik/tree/main/packages/qwik/src/core/render/jsx/types/jsx-generated.ts",
      "mdFile": "qwik.colgrouphtmlattributes.md"
    },
    {
      "name": "ColHTMLAttributes",
      "id": "colhtmlattributes",
      "hierarchy": [
        {
          "name": "ColHTMLAttributes",
          "id": "colhtmlattributes"
        }
      ],
      "kind": "Interface",
      "content": "```typescript\nexport interface ColHTMLAttributes<T extends Element> extends Attrs<'col', T> \n```\n**Extends:** Attrs&lt;'col', T&gt;",
      "editUrl": "https://github.com/QwikDev/qwik/tree/main/packages/qwik/src/core/render/jsx/types/jsx-generated.ts",
      "mdFile": "qwik.colhtmlattributes.md"
    },
    {
      "name": "Component",
      "id": "component",
      "hierarchy": [
        {
          "name": "Component",
          "id": "component"
        }
      ],
      "kind": "TypeAlias",
      "content": "Type representing the Qwik component.\n\n`Component` is the type returned by invoking `component$`<!-- -->.\n\n```tsx\ninterface MyComponentProps {\n  someProp: string;\n}\nconst MyComponent: Component<MyComponentProps> = component$((props: MyComponentProps) => {\n  return <span>{props.someProp}</span>;\n});\n```\n\n\n```typescript\nexport type Component<PROPS = unknown> = FunctionComponent<PublicProps<PROPS>>;\n```\n**References:** [FunctionComponent](#functioncomponent)<!-- -->, [PublicProps](#publicprops)",
      "editUrl": "https://github.com/QwikDev/qwik/tree/main/packages/qwik/src/core/component/component.public.ts",
      "mdFile": "qwik.component.md"
    },
    {
      "name": "component$",
      "id": "component_",
      "hierarchy": [
        {
          "name": "component$",
          "id": "component_"
        }
      ],
      "kind": "Function",
      "content": "Declare a Qwik component that can be used to create UI.\n\nUse `component$` to declare a Qwik component. A Qwik component is a special kind of component that allows the Qwik framework to lazy load and execute the component independently of other Qwik components as well as lazy load the component's life-cycle hooks and event handlers.\n\nSide note: You can also declare regular (standard JSX) components that will have standard synchronous behavior.\n\nQwik component is a facade that describes how the component should be used without forcing the implementation of the component to be eagerly loaded. A minimum Qwik definition consists of:\n\n\\#\\#\\# Example\n\nAn example showing how to create a counter component:\n\n```tsx\nexport interface CounterProps {\n  initialValue?: number;\n  step?: number;\n}\nexport const Counter = component$((props: CounterProps) => {\n  const state = useStore({ count: props.initialValue || 0 });\n  return (\n    <div>\n      <span>{state.count}</span>\n      <button onClick$={() => (state.count += props.step || 1)}>+</button>\n    </div>\n  );\n});\n```\n- `component$` is how a component gets declared. - `{ value?: number; step?: number }` declares the public (props) interface of the component. - `{ count: number }` declares the private (state) interface of the component.\n\nThe above can then be used like so:\n\n```tsx\nexport const OtherComponent = component$(() => {\n  return <Counter initialValue={100} />;\n});\n```\nSee also: `component`<!-- -->, `useCleanup`<!-- -->, `onResume`<!-- -->, `onPause`<!-- -->, `useOn`<!-- -->, `useOnDocument`<!-- -->, `useOnWindow`<!-- -->, `useStyles`\n\n\n```typescript\ncomponent$: <PROPS = unknown>(onMount: OnRenderFn<PROPS>) => Component<PROPS>\n```\n\n\n<table><thead><tr><th>\n\nParameter\n\n\n</th><th>\n\nType\n\n\n</th><th>\n\nDescription\n\n\n</th></tr></thead>\n<tbody><tr><td>\n\nonMount\n\n\n</td><td>\n\n[OnRenderFn](#onrenderfn)<!-- -->&lt;PROPS&gt;\n\n\n</td><td>\n\n\n</td></tr>\n</tbody></table>\n**Returns:**\n\n[Component](#component)<!-- -->&lt;PROPS&gt;",
      "editUrl": "https://github.com/QwikDev/qwik/tree/main/packages/qwik/src/core/component/component.public.ts",
      "mdFile": "qwik.component_.md"
    },
    {
      "name": "ComponentBaseProps",
      "id": "componentbaseprops",
      "hierarchy": [
        {
          "name": "ComponentBaseProps",
          "id": "componentbaseprops"
        }
      ],
      "kind": "Interface",
      "content": "```typescript\nexport interface ComponentBaseProps \n```\n\n\n<table><thead><tr><th>\n\nProperty\n\n\n</th><th>\n\nModifiers\n\n\n</th><th>\n\nType\n\n\n</th><th>\n\nDescription\n\n\n</th></tr></thead>\n<tbody><tr><td>\n\n[\"q:slot\"?](#componentbaseprops-_q_slot_)\n\n\n</td><td>\n\n\n</td><td>\n\nstring\n\n\n</td><td>\n\n_(Optional)_\n\n\n</td></tr>\n<tr><td>\n\n[key?](#)\n\n\n</td><td>\n\n\n</td><td>\n\nstring \\| number \\| null \\| undefined\n\n\n</td><td>\n\n_(Optional)_\n\n\n</td></tr>\n</tbody></table>",
      "editUrl": "https://github.com/QwikDev/qwik/tree/main/packages/qwik/src/core/render/jsx/types/jsx-qwik-attributes.ts",
      "mdFile": "qwik.componentbaseprops.md"
    },
    {
      "name": "componentQrl",
      "id": "componentqrl",
      "hierarchy": [
        {
          "name": "componentQrl",
          "id": "componentqrl"
        }
      ],
      "kind": "Function",
      "content": "Declare a Qwik component that can be used to create UI.\n\nUse `component$` to declare a Qwik component. A Qwik component is a special kind of component that allows the Qwik framework to lazy load and execute the component independently of other Qwik components as well as lazy load the component's life-cycle hooks and event handlers.\n\nSide note: You can also declare regular (standard JSX) components that will have standard synchronous behavior.\n\nQwik component is a facade that describes how the component should be used without forcing the implementation of the component to be eagerly loaded. A minimum Qwik definition consists of:\n\n\\#\\#\\# Example\n\nAn example showing how to create a counter component:\n\n```tsx\nexport interface CounterProps {\n  initialValue?: number;\n  step?: number;\n}\nexport const Counter = component$((props: CounterProps) => {\n  const state = useStore({ count: props.initialValue || 0 });\n  return (\n    <div>\n      <span>{state.count}</span>\n      <button onClick$={() => (state.count += props.step || 1)}>+</button>\n    </div>\n  );\n});\n```\n- `component$` is how a component gets declared. - `{ value?: number; step?: number }` declares the public (props) interface of the component. - `{ count: number }` declares the private (state) interface of the component.\n\nThe above can then be used like so:\n\n```tsx\nexport const OtherComponent = component$(() => {\n  return <Counter initialValue={100} />;\n});\n```\nSee also: `component`<!-- -->, `useCleanup`<!-- -->, `onResume`<!-- -->, `onPause`<!-- -->, `useOn`<!-- -->, `useOnDocument`<!-- -->, `useOnWindow`<!-- -->, `useStyles`\n\n\n```typescript\ncomponentQrl: <PROPS extends Record<any, any>>(componentQrl: QRL<OnRenderFn<PROPS>>) => Component<PROPS>\n```\n\n\n<table><thead><tr><th>\n\nParameter\n\n\n</th><th>\n\nType\n\n\n</th><th>\n\nDescription\n\n\n</th></tr></thead>\n<tbody><tr><td>\n\ncomponentQrl\n\n\n</td><td>\n\n[QRL](#qrl)<!-- -->&lt;[OnRenderFn](#onrenderfn)<!-- -->&lt;PROPS&gt;&gt;\n\n\n</td><td>\n\n\n</td></tr>\n</tbody></table>\n**Returns:**\n\n[Component](#component)<!-- -->&lt;PROPS&gt;",
      "editUrl": "https://github.com/QwikDev/qwik/tree/main/packages/qwik/src/core/component/component.public.ts",
      "mdFile": "qwik.componentqrl.md"
    },
    {
      "name": "ComputedFn",
      "id": "computedfn",
      "hierarchy": [
        {
          "name": "ComputedFn",
          "id": "computedfn"
        }
      ],
      "kind": "TypeAlias",
      "content": "```typescript\nexport type ComputedFn<T> = () => T;\n```",
      "editUrl": "https://github.com/QwikDev/qwik/tree/main/packages/qwik/src/core/use/use-task.ts",
      "mdFile": "qwik.computedfn.md"
    },
    {
      "name": "ContextId",
      "id": "contextid",
      "hierarchy": [
        {
          "name": "ContextId",
          "id": "contextid"
        }
      ],
      "kind": "Interface",
      "content": "ContextId is a typesafe ID for your context.\n\nContext is a way to pass stores to the child components without prop-drilling.\n\nUse `createContextId()` to create a `ContextId`<!-- -->. A `ContextId` is just a serializable identifier for the context. It is not the context value itself. See `useContextProvider()` and `useContext()` for the values. Qwik needs a serializable ID for the context so that the it can track context providers and consumers in a way that survives resumability.\n\n\\#\\#\\# Example\n\n```tsx\n// Declare the Context type.\ninterface TodosStore {\n  items: string[];\n}\n// Create a Context ID (no data is saved here.)\n// You will use this ID to both create and retrieve the Context.\nexport const TodosContext = createContextId<TodosStore>('Todos');\n\n// Example of providing context to child components.\nexport const App = component$(() => {\n  useContextProvider(\n    TodosContext,\n    useStore<TodosStore>({\n      items: ['Learn Qwik', 'Build Qwik app', 'Profit'],\n    })\n  );\n\n  return <Items />;\n});\n\n// Example of retrieving the context provided by a parent component.\nexport const Items = component$(() => {\n  const todos = useContext(TodosContext);\n  return (\n    <ul>\n      {todos.items.map((item) => (\n        <li>{item}</li>\n      ))}\n    </ul>\n  );\n});\n\n```\n\n\n```typescript\nexport interface ContextId<STATE> \n```\n\n\n<table><thead><tr><th>\n\nProperty\n\n\n</th><th>\n\nModifiers\n\n\n</th><th>\n\nType\n\n\n</th><th>\n\nDescription\n\n\n</th></tr></thead>\n<tbody><tr><td>\n\n[\\_\\_brand\\_context\\_type\\_\\_](#)\n\n\n</td><td>\n\n`readonly`\n\n\n</td><td>\n\nSTATE\n\n\n</td><td>\n\nDesign-time property to store type information for the context.\n\n\n</td></tr>\n<tr><td>\n\n[id](#)\n\n\n</td><td>\n\n`readonly`\n\n\n</td><td>\n\nstring\n\n\n</td><td>\n\nA unique ID for the context.\n\n\n</td></tr>\n</tbody></table>",
      "editUrl": "https://github.com/QwikDev/qwik/tree/main/packages/qwik/src/core/use/use-context.ts",
      "mdFile": "qwik.contextid.md"
    },
    {
      "name": "CorePlatform",
      "id": "coreplatform",
      "hierarchy": [
        {
          "name": "CorePlatform",
          "id": "coreplatform"
        }
      ],
      "kind": "Interface",
      "content": "Low-level API for platform abstraction.\n\nDifferent platforms (browser, node, service workers) may have different ways of handling things such as `requestAnimationFrame` and imports. To make Qwik platform-independent Qwik uses the `CorePlatform` API to access the platform API.\n\n`CorePlatform` also is responsible for importing symbols. The import map is different on the client (browser) then on the server. For this reason, the server has a manifest that is used to map symbols to javascript chunks. The manifest is encapsulated in `CorePlatform`<!-- -->, for this reason, the `CorePlatform` can't be global as there may be multiple applications running at server concurrently.\n\nThis is a low-level API and there should not be a need for you to access this.\n\n\n```typescript\nexport interface CorePlatform \n```\n\n\n<table><thead><tr><th>\n\nProperty\n\n\n</th><th>\n\nModifiers\n\n\n</th><th>\n\nType\n\n\n</th><th>\n\nDescription\n\n\n</th></tr></thead>\n<tbody><tr><td>\n\n[chunkForSymbol](#)\n\n\n</td><td>\n\n\n</td><td>\n\n(symbolName: string, chunk: string \\| null, parent?: string) =&gt; readonly \\[symbol: string, chunk: string\\] \\| undefined\n\n\n</td><td>\n\nRetrieve chunk name for the symbol.\n\nWhen the application is running on the server the symbols may be imported from different files (as server build is typically a single javascript chunk.) For this reason, it is necessary to convert the chunks from server format to client (browser) format. This is done by looking up symbols (which are globally unique) in the manifest. (Manifest is the mapping of symbols to the client chunk names.)\n\n\n</td></tr>\n<tr><td>\n\n[importSymbol](#)\n\n\n</td><td>\n\n\n</td><td>\n\n(containerEl: Element \\| undefined, url: string \\| URL \\| undefined \\| null, symbol: string) =&gt; [ValueOrPromise](#valueorpromise)<!-- -->&lt;any&gt;\n\n\n</td><td>\n\nRetrieve a symbol value from QRL.\n\nQwik needs to lazy load data and closures. For this Qwik uses QRLs that are serializable references of resources that are needed. The QRLs contain all the information necessary to retrieve the reference using `importSymbol`<!-- -->.\n\nWhy not use `import()`<!-- -->? Because `import()` is relative to the current file, and the current file is always the Qwik framework. So QRLs have additional information that allows them to serialize imports relative to application base rather than the Qwik framework file.\n\n\n</td></tr>\n<tr><td>\n\n[isServer](#)\n\n\n</td><td>\n\n\n</td><td>\n\nboolean\n\n\n</td><td>\n\nTrue of running on the server platform.\n\n\n</td></tr>\n<tr><td>\n\n[nextTick](#)\n\n\n</td><td>\n\n\n</td><td>\n\n(fn: () =&gt; any) =&gt; Promise&lt;any&gt;\n\n\n</td><td>\n\nPerform operation on next tick.\n\n\n</td></tr>\n<tr><td>\n\n[raf](#)\n\n\n</td><td>\n\n\n</td><td>\n\n(fn: () =&gt; any) =&gt; Promise&lt;any&gt;\n\n\n</td><td>\n\nPerform operation on next request-animation-frame.\n\n\n</td></tr>\n</tbody></table>",
      "editUrl": "https://github.com/QwikDev/qwik/tree/main/packages/qwik/src/core/platform/types.ts",
      "mdFile": "qwik.coreplatform.md"
    },
    {
      "name": "CorrectedToggleEvent",
      "id": "correctedtoggleevent",
      "hierarchy": [
        {
          "name": "CorrectedToggleEvent",
          "id": "correctedtoggleevent"
        }
      ],
      "kind": "Interface",
      "content": "This corrects the TS definition for ToggleEvent\n\n\n```typescript\nexport interface CorrectedToggleEvent extends Event \n```\n**Extends:** Event\n\n\n<table><thead><tr><th>\n\nProperty\n\n\n</th><th>\n\nModifiers\n\n\n</th><th>\n\nType\n\n\n</th><th>\n\nDescription\n\n\n</th></tr></thead>\n<tbody><tr><td>\n\n[newState](#)\n\n\n</td><td>\n\n`readonly`\n\n\n</td><td>\n\n'open' \\| 'closed'\n\n\n</td><td>\n\n\n</td></tr>\n<tr><td>\n\n[prevState](#)\n\n\n</td><td>\n\n`readonly`\n\n\n</td><td>\n\n'open' \\| 'closed'\n\n\n</td><td>\n\n\n</td></tr>\n</tbody></table>",
      "editUrl": "https://github.com/QwikDev/qwik/tree/main/packages/qwik/src/core/render/jsx/types/jsx-qwik-attributes.ts",
      "mdFile": "qwik.correctedtoggleevent.md"
    },
    {
      "name": "createComputed$",
      "id": "createcomputed_",
      "hierarchy": [
        {
          "name": "createComputed$",
          "id": "createcomputed_"
        }
      ],
      "kind": "Function",
      "content": "> Warning: This API is now obsolete.\n> \n> This is a technology preview\n> \n\nReturns read-only signal that updates when signals used in the `ComputedFn` change. Unlike useComputed$, this is not a hook and it always creates a new signal.\n\n\n```typescript\ncreateComputed$: <T>(qrl: ComputedFn<T>) => Signal<Awaited<T>>\n```\n\n\n<table><thead><tr><th>\n\nParameter\n\n\n</th><th>\n\nType\n\n\n</th><th>\n\nDescription\n\n\n</th></tr></thead>\n<tbody><tr><td>\n\nqrl\n\n\n</td><td>\n\n[ComputedFn](#computedfn)<!-- -->&lt;T&gt;\n\n\n</td><td>\n\n\n</td></tr>\n</tbody></table>\n**Returns:**\n\n[Signal](#signal)<!-- -->&lt;Awaited&lt;T&gt;&gt;",
      "editUrl": "https://github.com/QwikDev/qwik/tree/main/packages/qwik/src/core/use/use-task.ts",
      "mdFile": "qwik.createcomputed_.md"
    },
    {
      "name": "createComputedQrl",
      "id": "createcomputedqrl",
      "hierarchy": [
        {
          "name": "createComputedQrl",
          "id": "createcomputedqrl"
        }
      ],
      "kind": "Function",
      "content": "```typescript\ncreateComputedQrl: <T>(qrl: QRL<ComputedFn<T>>) => Signal<Awaited<T>>\n```\n\n\n<table><thead><tr><th>\n\nParameter\n\n\n</th><th>\n\nType\n\n\n</th><th>\n\nDescription\n\n\n</th></tr></thead>\n<tbody><tr><td>\n\nqrl\n\n\n</td><td>\n\n[QRL](#qrl)<!-- -->&lt;[ComputedFn](#computedfn)<!-- -->&lt;T&gt;&gt;\n\n\n</td><td>\n\n\n</td></tr>\n</tbody></table>\n**Returns:**\n\n[Signal](#signal)<!-- -->&lt;Awaited&lt;T&gt;&gt;",
      "editUrl": "https://github.com/QwikDev/qwik/tree/main/packages/qwik/src/core/use/use-task.ts",
      "mdFile": "qwik.createcomputedqrl.md"
    },
    {
      "name": "createContextId",
      "id": "createcontextid",
      "hierarchy": [
        {
          "name": "createContextId",
          "id": "createcontextid"
        }
      ],
      "kind": "Function",
      "content": "Create a context ID to be used in your application. The name should be written with no spaces.\n\nContext is a way to pass stores to the child components without prop-drilling.\n\nUse `createContextId()` to create a `ContextId`<!-- -->. A `ContextId` is just a serializable identifier for the context. It is not the context value itself. See `useContextProvider()` and `useContext()` for the values. Qwik needs a serializable ID for the context so that the it can track context providers and consumers in a way that survives resumability.\n\n\\#\\#\\# Example\n\n```tsx\n// Declare the Context type.\ninterface TodosStore {\n  items: string[];\n}\n// Create a Context ID (no data is saved here.)\n// You will use this ID to both create and retrieve the Context.\nexport const TodosContext = createContextId<TodosStore>('Todos');\n\n// Example of providing context to child components.\nexport const App = component$(() => {\n  useContextProvider(\n    TodosContext,\n    useStore<TodosStore>({\n      items: ['Learn Qwik', 'Build Qwik app', 'Profit'],\n    })\n  );\n\n  return <Items />;\n});\n\n// Example of retrieving the context provided by a parent component.\nexport const Items = component$(() => {\n  const todos = useContext(TodosContext);\n  return (\n    <ul>\n      {todos.items.map((item) => (\n        <li>{item}</li>\n      ))}\n    </ul>\n  );\n});\n\n```\n\n\n```typescript\ncreateContextId: <STATE = unknown>(name: string) => ContextId<STATE>\n```\n\n\n<table><thead><tr><th>\n\nParameter\n\n\n</th><th>\n\nType\n\n\n</th><th>\n\nDescription\n\n\n</th></tr></thead>\n<tbody><tr><td>\n\nname\n\n\n</td><td>\n\nstring\n\n\n</td><td>\n\nThe name of the context.\n\n\n</td></tr>\n</tbody></table>\n**Returns:**\n\n[ContextId](#contextid)<!-- -->&lt;STATE&gt;",
      "editUrl": "https://github.com/QwikDev/qwik/tree/main/packages/qwik/src/core/use/use-context.ts",
      "mdFile": "qwik.createcontextid.md"
    },
    {
      "name": "createSignal",
      "id": "createsignal",
      "hierarchy": [
        {
          "name": "createSignal",
          "id": "createsignal"
        }
      ],
      "kind": "Variable",
      "content": "> Warning: This API is now obsolete.\n> \n> This is a technology preview\n> \n\nCreates a signal.\n\nIf the initial state is a function, the function is invoked to calculate the actual initial state.\n\n\n```typescript\ncreateSignal: UseSignal\n```",
      "editUrl": "https://github.com/QwikDev/qwik/tree/main/packages/qwik/src/core/use/use-signal.ts",
      "mdFile": "qwik.createsignal.md"
    },
    {
      "name": "CSSProperties",
      "id": "cssproperties",
      "hierarchy": [
        {
          "name": "CSSProperties",
          "id": "cssproperties"
        }
      ],
      "kind": "Interface",
      "content": "```typescript\nexport interface CSSProperties extends CSS.Properties<string | number>, CSS.PropertiesHyphen<string | number> \n```\n**Extends:** CSS.Properties&lt;string \\| number&gt;, CSS.PropertiesHyphen&lt;string \\| number&gt;",
      "editUrl": "https://github.com/QwikDev/qwik/tree/main/packages/qwik/src/core/render/jsx/types/jsx-generated.ts",
      "mdFile": "qwik.cssproperties.md"
    },
    {
      "name": "DataHTMLAttributes",
      "id": "datahtmlattributes",
      "hierarchy": [
        {
          "name": "DataHTMLAttributes",
          "id": "datahtmlattributes"
        }
      ],
      "kind": "Interface",
      "content": "```typescript\nexport interface DataHTMLAttributes<T extends Element> extends Attrs<'data', T> \n```\n**Extends:** Attrs&lt;'data', T&gt;",
      "editUrl": "https://github.com/QwikDev/qwik/tree/main/packages/qwik/src/core/render/jsx/types/jsx-generated.ts",
      "mdFile": "qwik.datahtmlattributes.md"
    },
    {
      "name": "DelHTMLAttributes",
      "id": "delhtmlattributes",
      "hierarchy": [
        {
          "name": "DelHTMLAttributes",
          "id": "delhtmlattributes"
        }
      ],
      "kind": "Interface",
      "content": "```typescript\nexport interface DelHTMLAttributes<T extends Element> extends Attrs<'del', T> \n```\n**Extends:** Attrs&lt;'del', T&gt;",
      "editUrl": "https://github.com/QwikDev/qwik/tree/main/packages/qwik/src/core/render/jsx/types/jsx-generated.ts",
      "mdFile": "qwik.delhtmlattributes.md"
    },
    {
      "name": "DetailsHTMLAttributes",
      "id": "detailshtmlattributes",
      "hierarchy": [
        {
          "name": "DetailsHTMLAttributes",
          "id": "detailshtmlattributes"
        }
      ],
      "kind": "Interface",
      "content": "```typescript\nexport interface DetailsHTMLAttributes<T extends Element> extends Attrs<'details', T> \n```\n**Extends:** Attrs&lt;'details', T&gt;",
      "editUrl": "https://github.com/QwikDev/qwik/tree/main/packages/qwik/src/core/render/jsx/types/jsx-generated.ts",
      "mdFile": "qwik.detailshtmlattributes.md"
    },
    {
      "name": "DevJSX",
      "id": "devjsx",
      "hierarchy": [
        {
          "name": "DevJSX",
          "id": "devjsx"
        }
      ],
      "kind": "Interface",
      "content": "```typescript\nexport interface DevJSX \n```\n\n\n<table><thead><tr><th>\n\nProperty\n\n\n</th><th>\n\nModifiers\n\n\n</th><th>\n\nType\n\n\n</th><th>\n\nDescription\n\n\n</th></tr></thead>\n<tbody><tr><td>\n\n[columnNumber](#)\n\n\n</td><td>\n\n\n</td><td>\n\nnumber\n\n\n</td><td>\n\n\n</td></tr>\n<tr><td>\n\n[fileName](#)\n\n\n</td><td>\n\n\n</td><td>\n\nstring\n\n\n</td><td>\n\n\n</td></tr>\n<tr><td>\n\n[lineNumber](#)\n\n\n</td><td>\n\n\n</td><td>\n\nnumber\n\n\n</td><td>\n\n\n</td></tr>\n<tr><td>\n\n[stack?](#)\n\n\n</td><td>\n\n\n</td><td>\n\nstring\n\n\n</td><td>\n\n_(Optional)_\n\n\n</td></tr>\n</tbody></table>",
      "editUrl": "https://github.com/QwikDev/qwik/tree/main/packages/qwik/src/core/render/jsx/types/jsx-node.ts",
      "mdFile": "qwik.devjsx.md"
    },
    {
      "name": "DialogHTMLAttributes",
      "id": "dialoghtmlattributes",
      "hierarchy": [
        {
          "name": "DialogHTMLAttributes",
          "id": "dialoghtmlattributes"
        }
      ],
      "kind": "Interface",
      "content": "```typescript\nexport interface DialogHTMLAttributes<T extends Element> extends Attrs<'dialog', T> \n```\n**Extends:** Attrs&lt;'dialog', T&gt;",
      "editUrl": "https://github.com/QwikDev/qwik/tree/main/packages/qwik/src/core/render/jsx/types/jsx-generated.ts",
      "mdFile": "qwik.dialoghtmlattributes.md"
    },
    {
      "name": "DOMAttributes",
      "id": "domattributes",
      "hierarchy": [
        {
          "name": "DOMAttributes",
          "id": "domattributes"
        }
      ],
      "kind": "Interface",
      "content": "The Qwik-specific attributes that DOM elements accept\n\n\n```typescript\nexport interface DOMAttributes<EL extends Element> extends DOMAttributesBase<EL>, QwikEvents<EL> \n```\n**Extends:** DOMAttributesBase&lt;EL&gt;, QwikEvents&lt;EL&gt;\n\n\n<table><thead><tr><th>\n\nProperty\n\n\n</th><th>\n\nModifiers\n\n\n</th><th>\n\nType\n\n\n</th><th>\n\nDescription\n\n\n</th></tr></thead>\n<tbody><tr><td>\n\n[class?](#)\n\n\n</td><td>\n\n\n</td><td>\n\n[ClassList](#classlist) \\| [Signal](#signal)<!-- -->&lt;[ClassList](#classlist)<!-- -->&gt; \\| undefined\n\n\n</td><td>\n\n_(Optional)_\n\n\n</td></tr>\n</tbody></table>",
      "editUrl": "https://github.com/QwikDev/qwik/tree/main/packages/qwik/src/core/render/jsx/types/jsx-qwik-attributes.ts",
      "mdFile": "qwik.domattributes.md"
    },
    {
      "name": "EagernessOptions",
      "id": "eagernessoptions",
      "hierarchy": [
        {
          "name": "EagernessOptions",
          "id": "eagernessoptions"
        }
      ],
      "kind": "TypeAlias",
      "content": "```typescript\nexport type EagernessOptions = 'visible' | 'load' | 'idle';\n```",
      "editUrl": "https://github.com/QwikDev/qwik/tree/main/packages/qwik/src/core/use/use-task.ts",
      "mdFile": "qwik.eagernessoptions.md"
    },
    {
      "name": "Element",
      "id": "qwikjsx-element",
      "hierarchy": [
        {
          "name": "QwikJSX",
          "id": "qwikjsx-element"
        },
        {
          "name": "Element",
          "id": "qwikjsx-element"
        }
      ],
      "kind": "TypeAlias",
      "content": "```typescript\ntype Element = JSXOutput;\n```\n**References:** [JSXOutput](#jsxoutput)",
      "mdFile": "qwik.qwikjsx.element.md"
    },
    {
      "name": "ElementChildrenAttribute",
      "id": "qwikjsx-elementchildrenattribute",
      "hierarchy": [
        {
          "name": "QwikJSX",
          "id": "qwikjsx-elementchildrenattribute"
        },
        {
          "name": "ElementChildrenAttribute",
          "id": "qwikjsx-elementchildrenattribute"
        }
      ],
      "kind": "Interface",
      "content": "```typescript\ninterface ElementChildrenAttribute \n```\n\n\n<table><thead><tr><th>\n\nProperty\n\n\n</th><th>\n\nModifiers\n\n\n</th><th>\n\nType\n\n\n</th><th>\n\nDescription\n\n\n</th></tr></thead>\n<tbody><tr><td>\n\n[children](#)\n\n\n</td><td>\n\n\n</td><td>\n\n[JSXChildren](#jsxchildren)\n\n\n</td><td>\n\n\n</td></tr>\n</tbody></table>",
      "mdFile": "qwik.qwikjsx.elementchildrenattribute.md"
    },
    {
      "name": "ElementType",
      "id": "qwikjsx-elementtype",
      "hierarchy": [
        {
          "name": "QwikJSX",
          "id": "qwikjsx-elementtype"
        },
        {
          "name": "ElementType",
          "id": "qwikjsx-elementtype"
        }
      ],
      "kind": "TypeAlias",
      "content": "```typescript\ntype ElementType = string | FunctionComponent<Record<any, any>>;\n```\n**References:** [FunctionComponent](#functioncomponent)",
      "mdFile": "qwik.qwikjsx.elementtype.md"
    },
    {
      "name": "EmbedHTMLAttributes",
      "id": "embedhtmlattributes",
      "hierarchy": [
        {
          "name": "EmbedHTMLAttributes",
          "id": "embedhtmlattributes"
        }
      ],
      "kind": "Interface",
      "content": "```typescript\nexport interface EmbedHTMLAttributes<T extends Element> extends Attrs<'embed', T> \n```\n**Extends:** Attrs&lt;'embed', T&gt;",
      "editUrl": "https://github.com/QwikDev/qwik/tree/main/packages/qwik/src/core/render/jsx/types/jsx-generated.ts",
      "mdFile": "qwik.embedhtmlattributes.md"
    },
    {
      "name": "ErrorBoundaryStore",
      "id": "errorboundarystore",
      "hierarchy": [
        {
          "name": "ErrorBoundaryStore",
          "id": "errorboundarystore"
        }
      ],
      "kind": "Interface",
      "content": "```typescript\nexport interface ErrorBoundaryStore \n```\n\n\n<table><thead><tr><th>\n\nProperty\n\n\n</th><th>\n\nModifiers\n\n\n</th><th>\n\nType\n\n\n</th><th>\n\nDescription\n\n\n</th></tr></thead>\n<tbody><tr><td>\n\n[error](#)\n\n\n</td><td>\n\n\n</td><td>\n\nany \\| undefined\n\n\n</td><td>\n\n\n</td></tr>\n</tbody></table>",
      "editUrl": "https://github.com/QwikDev/qwik/tree/main/packages/qwik/src/core/render/error-handling.ts",
      "mdFile": "qwik.errorboundarystore.md"
    },
    {
      "name": "event$",
      "id": "event_",
      "hierarchy": [
        {
          "name": "event$",
          "id": "event_"
        }
      ],
      "kind": "Function",
      "content": "```typescript\nevent$: <T>(qrl: T) => QRL<T>\n```\n\n\n<table><thead><tr><th>\n\nParameter\n\n\n</th><th>\n\nType\n\n\n</th><th>\n\nDescription\n\n\n</th></tr></thead>\n<tbody><tr><td>\n\nqrl\n\n\n</td><td>\n\nT\n\n\n</td><td>\n\n\n</td></tr>\n</tbody></table>\n**Returns:**\n\n[QRL](#qrl)<!-- -->&lt;T&gt;",
      "editUrl": "https://github.com/QwikDev/qwik/tree/main/packages/qwik/src/core/qrl/qrl.public.ts",
      "mdFile": "qwik.event_.md"
    },
    {
      "name": "EventHandler",
      "id": "eventhandler",
      "hierarchy": [
        {
          "name": "EventHandler",
          "id": "eventhandler"
        }
      ],
      "kind": "TypeAlias",
      "content": "A DOM event handler\n\n\n```typescript\nexport type EventHandler<EV = Event, EL = Element> = {\n    bivarianceHack(event: EV, element: EL): any;\n}['bivarianceHack'];\n```",
      "editUrl": "https://github.com/QwikDev/qwik/tree/main/packages/qwik/src/core/render/jsx/types/jsx-qwik-attributes.ts",
      "mdFile": "qwik.eventhandler.md"
    },
    {
      "name": "eventQrl",
      "id": "eventqrl",
      "hierarchy": [
        {
          "name": "eventQrl",
          "id": "eventqrl"
        }
      ],
      "kind": "Function",
      "content": "```typescript\neventQrl: <T>(qrl: QRL<T>) => QRL<T>\n```\n\n\n<table><thead><tr><th>\n\nParameter\n\n\n</th><th>\n\nType\n\n\n</th><th>\n\nDescription\n\n\n</th></tr></thead>\n<tbody><tr><td>\n\nqrl\n\n\n</td><td>\n\n[QRL](#qrl)<!-- -->&lt;T&gt;\n\n\n</td><td>\n\n\n</td></tr>\n</tbody></table>\n**Returns:**\n\n[QRL](#qrl)<!-- -->&lt;T&gt;",
      "editUrl": "https://github.com/QwikDev/qwik/tree/main/packages/qwik/src/core/qrl/qrl.public.ts",
      "mdFile": "qwik.eventqrl.md"
    },
    {
      "name": "FieldsetHTMLAttributes",
      "id": "fieldsethtmlattributes",
      "hierarchy": [
        {
          "name": "FieldsetHTMLAttributes",
          "id": "fieldsethtmlattributes"
        }
      ],
      "kind": "Interface",
      "content": "```typescript\nexport interface FieldsetHTMLAttributes<T extends Element> extends Attrs<'fieldset', T> \n```\n**Extends:** Attrs&lt;'fieldset', T&gt;",
      "editUrl": "https://github.com/QwikDev/qwik/tree/main/packages/qwik/src/core/render/jsx/types/jsx-generated.ts",
      "mdFile": "qwik.fieldsethtmlattributes.md"
    },
    {
      "name": "FormHTMLAttributes",
      "id": "formhtmlattributes",
      "hierarchy": [
        {
          "name": "FormHTMLAttributes",
          "id": "formhtmlattributes"
        }
      ],
      "kind": "Interface",
      "content": "```typescript\nexport interface FormHTMLAttributes<T extends Element> extends Attrs<'form', T> \n```\n**Extends:** Attrs&lt;'form', T&gt;",
      "editUrl": "https://github.com/QwikDev/qwik/tree/main/packages/qwik/src/core/render/jsx/types/jsx-generated.ts",
      "mdFile": "qwik.formhtmlattributes.md"
    },
    {
      "name": "Fragment",
      "id": "fragment",
      "hierarchy": [
        {
          "name": "Fragment",
          "id": "fragment"
        }
      ],
      "kind": "Variable",
      "content": "```typescript\nFragment: FunctionComponent<{\n    children?: any;\n    key?: string | number | null;\n}>\n```",
      "editUrl": "https://github.com/QwikDev/qwik/tree/main/packages/qwik/src/core/render/jsx/jsx-runtime.ts",
      "mdFile": "qwik.fragment.md"
    },
    {
      "name": "FunctionComponent",
      "id": "functioncomponent",
      "hierarchy": [
        {
          "name": "FunctionComponent",
          "id": "functioncomponent"
        }
      ],
      "kind": "TypeAlias",
      "content": "Any function taking a props object that returns JSXOutput.\n\nThe `key`<!-- -->, `flags` and `dev` parameters are for internal use.\n\n\n```typescript\nexport type FunctionComponent<P = unknown> = {\n    renderFn(props: P, key: string | null, flags: number, dev?: DevJSX): JSXOutput;\n}['renderFn'];\n```\n**References:** [DevJSX](#devjsx)<!-- -->, [JSXOutput](#jsxoutput)",
      "editUrl": "https://github.com/QwikDev/qwik/tree/main/packages/qwik/src/core/render/jsx/types/jsx-node.ts",
      "mdFile": "qwik.functioncomponent.md"
    },
    {
      "name": "getPlatform",
      "id": "getplatform",
      "hierarchy": [
        {
          "name": "getPlatform",
          "id": "getplatform"
        }
      ],
      "kind": "Function",
      "content": "Retrieve the `CorePlatform`<!-- -->.\n\nThe `CorePlatform` is also responsible for retrieving the Manifest, that contains mappings from symbols to javascript import chunks. For this reason, `CorePlatform` can't be global, but is specific to the application currently running. On server it is possible that many different applications are running in a single server instance, and for this reason the `CorePlatform` is associated with the application document.\n\n\n```typescript\ngetPlatform: () => CorePlatform\n```\n**Returns:**\n\n[CorePlatform](#coreplatform)",
      "editUrl": "https://github.com/QwikDev/qwik/tree/main/packages/qwik/src/core/platform/platform.ts",
      "mdFile": "qwik.getplatform.md"
    },
    {
      "name": "h",
      "id": "h",
      "hierarchy": [
        {
          "name": "h",
          "id": "h"
        }
      ],
      "kind": "Function",
      "content": "```typescript\nexport declare namespace h \n```\n\n\n<table><thead><tr><th>\n\nFunction\n\n\n</th><th>\n\nDescription\n\n\n</th></tr></thead>\n<tbody><tr><td>\n\n[h(type)](#)\n\n\n</td><td>\n\n\n</td></tr>\n<tr><td>\n\n[h(type, data)](#)\n\n\n</td><td>\n\n\n</td></tr>\n<tr><td>\n\n[h(type, text)](#)\n\n\n</td><td>\n\n\n</td></tr>\n<tr><td>\n\n[h(type, children)](#)\n\n\n</td><td>\n\n\n</td></tr>\n<tr><td>\n\n[h(type, data, text)](#)\n\n\n</td><td>\n\n\n</td></tr>\n<tr><td>\n\n[h(type, data, children)](#)\n\n\n</td><td>\n\n\n</td></tr>\n<tr><td>\n\n[h(sel, data, children)](#)\n\n\n</td><td>\n\n\n</td></tr>\n</tbody></table>",
      "editUrl": "https://github.com/QwikDev/qwik/tree/main/packages/qwik/src/core/render/jsx/factory.ts",
      "mdFile": "qwik.h.md"
    },
    {
      "name": "h",
      "id": "h",
      "hierarchy": [
        {
          "name": "h",
          "id": "h"
        }
      ],
      "kind": "Namespace",
      "content": "```typescript\nexport declare namespace h \n```\n\n\n<table><thead><tr><th>\n\nFunction\n\n\n</th><th>\n\nDescription\n\n\n</th></tr></thead>\n<tbody><tr><td>\n\n[h(type)](#)\n\n\n</td><td>\n\n\n</td></tr>\n<tr><td>\n\n[h(type, data)](#)\n\n\n</td><td>\n\n\n</td></tr>\n<tr><td>\n\n[h(type, text)](#)\n\n\n</td><td>\n\n\n</td></tr>\n<tr><td>\n\n[h(type, children)](#)\n\n\n</td><td>\n\n\n</td></tr>\n<tr><td>\n\n[h(type, data, text)](#)\n\n\n</td><td>\n\n\n</td></tr>\n<tr><td>\n\n[h(type, data, children)](#)\n\n\n</td><td>\n\n\n</td></tr>\n<tr><td>\n\n[h(sel, data, children)](#)\n\n\n</td><td>\n\n\n</td></tr>\n</tbody></table>",
      "editUrl": "https://github.com/QwikDev/qwik/tree/main/packages/qwik/src/core/render/jsx/factory.ts",
      "mdFile": "qwik.h.md"
    },
    {
      "name": "HrHTMLAttributes",
      "id": "hrhtmlattributes",
      "hierarchy": [
        {
          "name": "HrHTMLAttributes",
          "id": "hrhtmlattributes"
        }
      ],
      "kind": "Interface",
      "content": "```typescript\nexport interface HrHTMLAttributes<T extends Element> extends Attrs<'hr', T> \n```\n**Extends:** Attrs&lt;'hr', T&gt;",
      "editUrl": "https://github.com/QwikDev/qwik/tree/main/packages/qwik/src/core/render/jsx/types/jsx-generated.ts",
      "mdFile": "qwik.hrhtmlattributes.md"
    },
    {
      "name": "HTMLAttributeAnchorTarget",
      "id": "htmlattributeanchortarget",
      "hierarchy": [
        {
          "name": "HTMLAttributeAnchorTarget",
          "id": "htmlattributeanchortarget"
        }
      ],
      "kind": "TypeAlias",
      "content": "```typescript\nexport type HTMLAttributeAnchorTarget = '_self' | '_blank' | '_parent' | '_top' | (string & {});\n```",
      "editUrl": "https://github.com/QwikDev/qwik/tree/main/packages/qwik/src/core/render/jsx/types/jsx-generated.ts",
      "mdFile": "qwik.htmlattributeanchortarget.md"
    },
    {
      "name": "HTMLAttributeReferrerPolicy",
      "id": "htmlattributereferrerpolicy",
      "hierarchy": [
        {
          "name": "HTMLAttributeReferrerPolicy",
          "id": "htmlattributereferrerpolicy"
        }
      ],
      "kind": "TypeAlias",
      "content": "```typescript\nexport type HTMLAttributeReferrerPolicy = ReferrerPolicy;\n```",
      "editUrl": "https://github.com/QwikDev/qwik/tree/main/packages/qwik/src/core/render/jsx/types/jsx-generated.ts",
      "mdFile": "qwik.htmlattributereferrerpolicy.md"
    },
    {
      "name": "HTMLAttributes",
      "id": "htmlattributes",
      "hierarchy": [
        {
          "name": "HTMLAttributes",
          "id": "htmlattributes"
        }
      ],
      "kind": "Interface",
      "content": "```typescript\nexport interface HTMLAttributes<E extends Element> extends HTMLElementAttrs, DOMAttributes<E> \n```\n**Extends:** [HTMLElementAttrs](#htmlelementattrs)<!-- -->, [DOMAttributes](#domattributes)<!-- -->&lt;E&gt;",
      "editUrl": "https://github.com/QwikDev/qwik/tree/main/packages/qwik/src/core/render/jsx/types/jsx-generated.ts",
      "mdFile": "qwik.htmlattributes.md"
    },
    {
      "name": "HTMLCrossOriginAttribute",
      "id": "htmlcrossoriginattribute",
      "hierarchy": [
        {
          "name": "HTMLCrossOriginAttribute",
          "id": "htmlcrossoriginattribute"
        }
      ],
      "kind": "TypeAlias",
      "content": "```typescript\nexport type HTMLCrossOriginAttribute = 'anonymous' | 'use-credentials' | '' | undefined;\n```",
      "editUrl": "https://github.com/QwikDev/qwik/tree/main/packages/qwik/src/core/render/jsx/types/jsx-generated.ts",
      "mdFile": "qwik.htmlcrossoriginattribute.md"
    },
    {
      "name": "HTMLElementAttrs",
      "id": "htmlelementattrs",
      "hierarchy": [
        {
          "name": "HTMLElementAttrs",
          "id": "htmlelementattrs"
        }
      ],
      "kind": "Interface",
      "content": "```typescript\nexport interface HTMLElementAttrs extends HTMLAttributesBase, FilterBase<HTMLElement> \n```\n**Extends:** HTMLAttributesBase, FilterBase&lt;HTMLElement&gt;",
      "editUrl": "https://github.com/QwikDev/qwik/tree/main/packages/qwik/src/core/render/jsx/types/jsx-generated.ts",
      "mdFile": "qwik.htmlelementattrs.md"
    },
    {
      "name": "HTMLFragment",
      "id": "htmlfragment",
      "hierarchy": [
        {
          "name": "HTMLFragment",
          "id": "htmlfragment"
        }
      ],
      "kind": "Variable",
      "content": "```typescript\nHTMLFragment: FunctionComponent<{\n    dangerouslySetInnerHTML: string;\n}>\n```",
      "editUrl": "https://github.com/QwikDev/qwik/tree/main/packages/qwik/src/core/render/jsx/jsx-runtime.ts",
      "mdFile": "qwik.htmlfragment.md"
    },
    {
      "name": "HtmlHTMLAttributes",
      "id": "htmlhtmlattributes",
      "hierarchy": [
        {
          "name": "HtmlHTMLAttributes",
          "id": "htmlhtmlattributes"
        }
      ],
      "kind": "Interface",
      "content": "```typescript\nexport interface HtmlHTMLAttributes<T extends Element> extends Attrs<'html', T> \n```\n**Extends:** Attrs&lt;'html', T&gt;",
      "editUrl": "https://github.com/QwikDev/qwik/tree/main/packages/qwik/src/core/render/jsx/types/jsx-generated.ts",
      "mdFile": "qwik.htmlhtmlattributes.md"
    },
    {
      "name": "HTMLInputAutocompleteAttribute",
      "id": "htmlinputautocompleteattribute",
      "hierarchy": [
        {
          "name": "HTMLInputAutocompleteAttribute",
          "id": "htmlinputautocompleteattribute"
        }
      ],
      "kind": "TypeAlias",
      "content": "```typescript\nexport type HTMLInputAutocompleteAttribute = 'on' | 'off' | 'billing' | 'shipping' | 'name' | 'honorific-prefix' | 'given-name' | 'additional-name' | 'family-name' | 'honorific-suffix' | 'nickname' | 'username' | 'new-password' | 'current-password' | 'one-time-code' | 'organization-title' | 'organization' | 'street-address' | 'address-line1' | 'address-line2' | 'address-line3' | 'address-level4' | 'address-level3' | 'address-level2' | 'address-level1' | 'country' | 'country-name' | 'postal-code' | 'cc-name' | 'cc-given-name' | 'cc-additional-name' | 'cc-family-name' | 'cc-number' | 'cc-exp' | 'cc-exp-month' | 'cc-exp-year' | 'cc-csc' | 'cc-type' | 'transaction-currency' | 'transaction-amount' | 'language' | 'bday' | 'bday-day' | 'bday-month' | 'bday-year' | 'sex' | 'url' | 'photo';\n```",
      "editUrl": "https://github.com/QwikDev/qwik/tree/main/packages/qwik/src/core/render/jsx/types/jsx-generated.ts",
      "mdFile": "qwik.htmlinputautocompleteattribute.md"
    },
    {
      "name": "HTMLInputTypeAttribute",
      "id": "htmlinputtypeattribute",
      "hierarchy": [
        {
          "name": "HTMLInputTypeAttribute",
          "id": "htmlinputtypeattribute"
        }
      ],
      "kind": "TypeAlias",
      "content": "```typescript\nexport type HTMLInputTypeAttribute = 'button' | 'checkbox' | 'color' | 'date' | 'datetime-local' | 'email' | 'file' | 'hidden' | 'image' | 'month' | 'number' | 'password' | 'radio' | 'range' | 'reset' | 'search' | 'submit' | 'tel' | 'text' | 'time' | 'url' | 'week' | (string & {});\n```",
      "editUrl": "https://github.com/QwikDev/qwik/tree/main/packages/qwik/src/core/render/jsx/types/jsx-generated.ts",
      "mdFile": "qwik.htmlinputtypeattribute.md"
    },
    {
      "name": "IframeHTMLAttributes",
      "id": "iframehtmlattributes",
      "hierarchy": [
        {
          "name": "IframeHTMLAttributes",
          "id": "iframehtmlattributes"
        }
      ],
      "kind": "Interface",
      "content": "```typescript\nexport interface IframeHTMLAttributes<T extends Element> extends Attrs<'iframe', T> \n```\n**Extends:** Attrs&lt;'iframe', T&gt;",
      "editUrl": "https://github.com/QwikDev/qwik/tree/main/packages/qwik/src/core/render/jsx/types/jsx-generated.ts",
      "mdFile": "qwik.iframehtmlattributes.md"
    },
    {
      "name": "ImgHTMLAttributes",
      "id": "imghtmlattributes",
      "hierarchy": [
        {
          "name": "ImgHTMLAttributes",
          "id": "imghtmlattributes"
        }
      ],
      "kind": "Interface",
      "content": "```typescript\nexport interface ImgHTMLAttributes<T extends Element> extends Attrs<'img', T> \n```\n**Extends:** Attrs&lt;'img', T&gt;",
      "editUrl": "https://github.com/QwikDev/qwik/tree/main/packages/qwik/src/core/render/jsx/types/jsx-generated.ts",
      "mdFile": "qwik.imghtmlattributes.md"
    },
    {
      "name": "implicit$FirstArg",
      "id": "implicit_firstarg",
      "hierarchy": [
        {
          "name": "implicit$FirstArg",
          "id": "implicit_firstarg"
        }
      ],
      "kind": "Function",
      "content": "Create a `____$(...)` convenience method from `___(...)`<!-- -->.\n\nIt is very common for functions to take a lazy-loadable resource as a first argument. For this reason, the Qwik Optimizer automatically extracts the first argument from any function which ends in `$`<!-- -->.\n\nThis means that `foo$(arg0)` and `foo($(arg0))` are equivalent with respect to Qwik Optimizer. The former is just a shorthand for the latter.\n\nFor example, these function calls are equivalent:\n\n- `component$(() => {...})` is same as `component($(() => {...}))`\n\n```tsx\nexport function myApi(callback: QRL<() => void>): void {\n  // ...\n}\n\nexport const myApi$ = implicit$FirstArg(myApi);\n// type of myApi$: (callback: () => void): void\n\n// can be used as:\nmyApi$(() => console.log('callback'));\n\n// will be transpiled to:\n// FILE: <current file>\nmyApi(qrl('./chunk-abc.js', 'callback'));\n\n// FILE: chunk-abc.js\nexport const callback = () => console.log('callback');\n```\n\n\n```typescript\nimplicit$FirstArg: <FIRST, REST extends any[], RET>(fn: (qrl: QRL<FIRST>, ...rest: REST) => RET) => ((qrl: FIRST, ...rest: REST) => RET)\n```\n\n\n<table><thead><tr><th>\n\nParameter\n\n\n</th><th>\n\nType\n\n\n</th><th>\n\nDescription\n\n\n</th></tr></thead>\n<tbody><tr><td>\n\nfn\n\n\n</td><td>\n\n(qrl: [QRL](#qrl)<!-- -->&lt;FIRST&gt;, ...rest: REST) =&gt; RET\n\n\n</td><td>\n\nA function that should have its first argument automatically `$`<!-- -->.\n\n\n</td></tr>\n</tbody></table>\n**Returns:**\n\n((qrl: FIRST, ...rest: REST) =&gt; RET)",
      "editUrl": "https://github.com/QwikDev/qwik/tree/main/packages/qwik/src/core/util/implicit_dollar.ts",
      "mdFile": "qwik.implicit_firstarg.md"
    },
    {
      "name": "InputHTMLAttributes",
      "id": "inputhtmlattributes",
      "hierarchy": [
        {
          "name": "InputHTMLAttributes",
          "id": "inputhtmlattributes"
        }
      ],
      "kind": "TypeAlias",
      "content": "```typescript\nexport type InputHTMLAttributes<T extends Element> = Attrs<'input', T, HTMLInputElement>;\n```",
      "editUrl": "https://github.com/QwikDev/qwik/tree/main/packages/qwik/src/core/render/jsx/types/jsx-generated.ts",
      "mdFile": "qwik.inputhtmlattributes.md"
    },
    {
      "name": "InsHTMLAttributes",
      "id": "inshtmlattributes",
      "hierarchy": [
        {
          "name": "InsHTMLAttributes",
          "id": "inshtmlattributes"
        }
      ],
      "kind": "Interface",
      "content": "```typescript\nexport interface InsHTMLAttributes<T extends Element> extends Attrs<'ins', T> \n```\n**Extends:** Attrs&lt;'ins', T&gt;",
      "editUrl": "https://github.com/QwikDev/qwik/tree/main/packages/qwik/src/core/render/jsx/types/jsx-generated.ts",
      "mdFile": "qwik.inshtmlattributes.md"
    },
    {
      "name": "IntrinsicAttributes",
      "id": "qwikjsx-intrinsicattributes",
      "hierarchy": [
        {
          "name": "QwikJSX",
          "id": "qwikjsx-intrinsicattributes"
        },
        {
          "name": "IntrinsicAttributes",
          "id": "qwikjsx-intrinsicattributes"
        }
      ],
      "kind": "Interface",
      "content": "```typescript\ninterface IntrinsicAttributes extends QwikIntrinsicAttributes \n```\n**Extends:** QwikIntrinsicAttributes",
      "mdFile": "qwik.qwikjsx.intrinsicattributes.md"
    },
    {
      "name": "IntrinsicElements",
      "id": "intrinsicelements",
      "hierarchy": [
        {
          "name": "IntrinsicElements",
          "id": "intrinsicelements"
        }
      ],
      "kind": "Interface",
      "content": "```typescript\nexport interface IntrinsicElements extends IntrinsicHTMLElements, IntrinsicSVGElements \n```\n**Extends:** IntrinsicHTMLElements, IntrinsicSVGElements",
      "editUrl": "https://github.com/QwikDev/qwik/tree/main/packages/qwik/src/core/render/jsx/types/jsx-generated.ts",
      "mdFile": "qwik.intrinsicelements.md"
    },
    {
      "name": "isSignal",
      "id": "issignal",
      "hierarchy": [
        {
          "name": "isSignal",
          "id": "issignal"
        }
      ],
      "kind": "Function",
      "content": "Checks if a given object is a `Signal`<!-- -->.\n\n\n```typescript\nisSignal: <T = unknown>(obj: any) => obj is Signal<T>\n```\n\n\n<table><thead><tr><th>\n\nParameter\n\n\n</th><th>\n\nType\n\n\n</th><th>\n\nDescription\n\n\n</th></tr></thead>\n<tbody><tr><td>\n\nobj\n\n\n</td><td>\n\nany\n\n\n</td><td>\n\nThe object to check if `Signal`<!-- -->.\n\n\n</td></tr>\n</tbody></table>\n**Returns:**\n\nobj is [Signal](#signal)<!-- -->&lt;T&gt;\n\nBoolean - True if the object is a `Signal`<!-- -->.",
      "editUrl": "https://github.com/QwikDev/qwik/tree/main/packages/qwik/src/core/state/signal.ts",
      "mdFile": "qwik.issignal.md"
    },
    {
      "name": "jsx",
      "id": "jsx",
      "hierarchy": [
        {
          "name": "jsx",
          "id": "jsx"
        }
      ],
      "kind": "Function",
      "content": "Used by the JSX transpilers to create a JSXNode. Note that the optimizer will not use this, instead using \\_jsxQ, \\_jsxS, and \\_jsxC directly.\n\n\n```typescript\njsx: <T extends string | FunctionComponent<any>>(type: T, props: T extends FunctionComponent<infer PROPS> ? PROPS : Record<any, unknown>, key?: string | number | null) => JSXNode<T>\n```\n\n\n<table><thead><tr><th>\n\nParameter\n\n\n</th><th>\n\nType\n\n\n</th><th>\n\nDescription\n\n\n</th></tr></thead>\n<tbody><tr><td>\n\ntype\n\n\n</td><td>\n\nT\n\n\n</td><td>\n\n\n</td></tr>\n<tr><td>\n\nprops\n\n\n</td><td>\n\nT extends [FunctionComponent](#functioncomponent)<!-- -->&lt;infer PROPS&gt; ? PROPS : Record&lt;any, unknown&gt;\n\n\n</td><td>\n\n\n</td></tr>\n<tr><td>\n\nkey\n\n\n</td><td>\n\nstring \\| number \\| null\n\n\n</td><td>\n\n_(Optional)_\n\n\n</td></tr>\n</tbody></table>\n**Returns:**\n\n[JSXNode](#jsxnode)<!-- -->&lt;T&gt;",
      "editUrl": "https://github.com/QwikDev/qwik/tree/main/packages/qwik/src/core/render/jsx/jsx-runtime.ts",
      "mdFile": "qwik.jsx.md"
    },
    {
      "name": "JSXChildren",
      "id": "jsxchildren",
      "hierarchy": [
        {
          "name": "JSXChildren",
          "id": "jsxchildren"
        }
      ],
      "kind": "TypeAlias",
      "content": "```typescript\nexport type JSXChildren = string | number | boolean | null | undefined | Function | RegExp | JSXChildren[] | Promise<JSXChildren> | Signal<JSXChildren> | JSXNode;\n```\n**References:** [JSXChildren](#jsxchildren)<!-- -->, [Signal](#signal)<!-- -->, [JSXNode](#jsxnode)",
      "editUrl": "https://github.com/QwikDev/qwik/tree/main/packages/qwik/src/core/render/jsx/types/jsx-qwik-attributes.ts",
      "mdFile": "qwik.jsxchildren.md"
    },
    {
      "name": "jsxDEV",
      "id": "jsxdev",
      "hierarchy": [
        {
          "name": "jsxDEV",
          "id": "jsxdev"
        }
      ],
      "kind": "Function",
      "content": "```typescript\njsxDEV: <T extends string | FunctionComponent<Record<any, unknown>>>(type: T, props: T extends FunctionComponent<infer PROPS> ? PROPS : Record<any, unknown>, key: string | number | null | undefined, _isStatic: boolean, opts: JsxDevOpts, _ctx: unknown) => JSXNode<T>\n```\n\n\n<table><thead><tr><th>\n\nParameter\n\n\n</th><th>\n\nType\n\n\n</th><th>\n\nDescription\n\n\n</th></tr></thead>\n<tbody><tr><td>\n\ntype\n\n\n</td><td>\n\nT\n\n\n</td><td>\n\n\n</td></tr>\n<tr><td>\n\nprops\n\n\n</td><td>\n\nT extends [FunctionComponent](#functioncomponent)<!-- -->&lt;infer PROPS&gt; ? PROPS : Record&lt;any, unknown&gt;\n\n\n</td><td>\n\n\n</td></tr>\n<tr><td>\n\nkey\n\n\n</td><td>\n\nstring \\| number \\| null \\| undefined\n\n\n</td><td>\n\n\n</td></tr>\n<tr><td>\n\n\\_isStatic\n\n\n</td><td>\n\nboolean\n\n\n</td><td>\n\n\n</td></tr>\n<tr><td>\n\nopts\n\n\n</td><td>\n\nJsxDevOpts\n\n\n</td><td>\n\n\n</td></tr>\n<tr><td>\n\n\\_ctx\n\n\n</td><td>\n\nunknown\n\n\n</td><td>\n\n\n</td></tr>\n</tbody></table>\n**Returns:**\n\n[JSXNode](#jsxnode)<!-- -->&lt;T&gt;",
      "editUrl": "https://github.com/QwikDev/qwik/tree/main/packages/qwik/src/core/render/jsx/jsx-runtime.ts",
      "mdFile": "qwik.jsxdev.md"
    },
    {
      "name": "JSXNode",
      "id": "jsxnode",
      "hierarchy": [
        {
          "name": "JSXNode",
          "id": "jsxnode"
        }
      ],
      "kind": "Interface",
      "content": "A JSX Node, an internal structure. You probably want to use `JSXOutput` instead.\n\n\n```typescript\nexport interface JSXNode<T extends string | FunctionComponent | unknown = unknown> \n```\n\n\n<table><thead><tr><th>\n\nProperty\n\n\n</th><th>\n\nModifiers\n\n\n</th><th>\n\nType\n\n\n</th><th>\n\nDescription\n\n\n</th></tr></thead>\n<tbody><tr><td>\n\n[children](#)\n\n\n</td><td>\n\n\n</td><td>\n\n[JSXChildren](#jsxchildren) \\| null\n\n\n</td><td>\n\n\n</td></tr>\n<tr><td>\n\n[dev?](#)\n\n\n</td><td>\n\n\n</td><td>\n\n[DevJSX](#devjsx)\n\n\n</td><td>\n\n_(Optional)_\n\n\n</td></tr>\n<tr><td>\n\n[flags](#)\n\n\n</td><td>\n\n\n</td><td>\n\nnumber\n\n\n</td><td>\n\n\n</td></tr>\n<tr><td>\n\n[immutableProps](#)\n\n\n</td><td>\n\n\n</td><td>\n\nRecord&lt;any, unknown&gt; \\| null\n\n\n</td><td>\n\n\n</td></tr>\n<tr><td>\n\n[key](#)\n\n\n</td><td>\n\n\n</td><td>\n\nstring \\| null\n\n\n</td><td>\n\n\n</td></tr>\n<tr><td>\n\n[props](#)\n\n\n</td><td>\n\n\n</td><td>\n\nT extends [FunctionComponent](#functioncomponent)<!-- -->&lt;infer P&gt; ? P : Record&lt;any, unknown&gt;\n\n\n</td><td>\n\n\n</td></tr>\n<tr><td>\n\n[type](#)\n\n\n</td><td>\n\n\n</td><td>\n\nT\n\n\n</td><td>\n\n\n</td></tr>\n</tbody></table>",
      "editUrl": "https://github.com/QwikDev/qwik/tree/main/packages/qwik/src/core/render/jsx/types/jsx-node.ts",
      "mdFile": "qwik.jsxnode.md"
    },
    {
      "name": "JSXOutput",
      "id": "jsxoutput",
      "hierarchy": [
        {
          "name": "JSXOutput",
          "id": "jsxoutput"
        }
      ],
      "kind": "TypeAlias",
      "content": "Any valid output for a component\n\n\n```typescript\nexport type JSXOutput = JSXNode | string | number | boolean | null | undefined | JSXOutput[];\n```\n**References:** [JSXNode](#jsxnode)<!-- -->, [JSXOutput](#jsxoutput)",
      "editUrl": "https://github.com/QwikDev/qwik/tree/main/packages/qwik/src/core/render/jsx/types/jsx-node.ts",
      "mdFile": "qwik.jsxoutput.md"
    },
    {
      "name": "JSXTagName",
      "id": "jsxtagname",
      "hierarchy": [
        {
          "name": "JSXTagName",
          "id": "jsxtagname"
        }
      ],
      "kind": "TypeAlias",
      "content": "```typescript\nexport type JSXTagName = keyof HTMLElementTagNameMap | Omit<string, keyof HTMLElementTagNameMap>;\n```",
      "editUrl": "https://github.com/QwikDev/qwik/tree/main/packages/qwik/src/core/render/jsx/types/jsx-qwik-attributes.ts",
      "mdFile": "qwik.jsxtagname.md"
    },
    {
      "name": "KeygenHTMLAttributes",
      "id": "keygenhtmlattributes",
      "hierarchy": [
        {
          "name": "KeygenHTMLAttributes",
          "id": "keygenhtmlattributes"
        }
      ],
      "kind": "Interface",
      "content": "> Warning: This API is now obsolete.\n> \n> in html5\n> \n\n\n```typescript\nexport interface KeygenHTMLAttributes<T extends Element> extends Attrs<'base', T> \n```\n**Extends:** Attrs&lt;'base', T&gt;",
      "editUrl": "https://github.com/QwikDev/qwik/tree/main/packages/qwik/src/core/render/jsx/types/jsx-generated.ts",
      "mdFile": "qwik.keygenhtmlattributes.md"
    },
    {
      "name": "KnownEventNames",
      "id": "knowneventnames",
      "hierarchy": [
        {
          "name": "KnownEventNames",
          "id": "knowneventnames"
        }
      ],
      "kind": "TypeAlias",
      "content": "The names of events that Qwik knows about. They are all lowercase, but on the JSX side, they are PascalCase for nicer DX. (`onAuxClick$` vs `onauxclick$`<!-- -->)\n\n\n```typescript\nexport type KnownEventNames = LiteralUnion<AllEventKeys, string>;\n```",
      "editUrl": "https://github.com/QwikDev/qwik/tree/main/packages/qwik/src/core/render/jsx/types/jsx-qwik-events.ts",
      "mdFile": "qwik.knowneventnames.md"
    },
    {
      "name": "LabelHTMLAttributes",
      "id": "labelhtmlattributes",
      "hierarchy": [
        {
          "name": "LabelHTMLAttributes",
          "id": "labelhtmlattributes"
        }
      ],
      "kind": "Interface",
      "content": "```typescript\nexport interface LabelHTMLAttributes<T extends Element> extends Attrs<'label', T> \n```\n**Extends:** Attrs&lt;'label', T&gt;",
      "editUrl": "https://github.com/QwikDev/qwik/tree/main/packages/qwik/src/core/render/jsx/types/jsx-generated.ts",
      "mdFile": "qwik.labelhtmlattributes.md"
    },
    {
      "name": "LiHTMLAttributes",
      "id": "lihtmlattributes",
      "hierarchy": [
        {
          "name": "LiHTMLAttributes",
          "id": "lihtmlattributes"
        }
      ],
      "kind": "Interface",
      "content": "```typescript\nexport interface LiHTMLAttributes<T extends Element> extends Attrs<'li', T> \n```\n**Extends:** Attrs&lt;'li', T&gt;",
      "editUrl": "https://github.com/QwikDev/qwik/tree/main/packages/qwik/src/core/render/jsx/types/jsx-generated.ts",
      "mdFile": "qwik.lihtmlattributes.md"
    },
    {
      "name": "LinkHTMLAttributes",
      "id": "linkhtmlattributes",
      "hierarchy": [
        {
          "name": "LinkHTMLAttributes",
          "id": "linkhtmlattributes"
        }
      ],
      "kind": "Interface",
      "content": "```typescript\nexport interface LinkHTMLAttributes<T extends Element> extends Attrs<'link', T> \n```\n**Extends:** Attrs&lt;'link', T&gt;",
      "editUrl": "https://github.com/QwikDev/qwik/tree/main/packages/qwik/src/core/render/jsx/types/jsx-generated.ts",
      "mdFile": "qwik.linkhtmlattributes.md"
    },
    {
      "name": "MapHTMLAttributes",
      "id": "maphtmlattributes",
      "hierarchy": [
        {
          "name": "MapHTMLAttributes",
          "id": "maphtmlattributes"
        }
      ],
      "kind": "Interface",
      "content": "```typescript\nexport interface MapHTMLAttributes<T extends Element> extends Attrs<'map', T> \n```\n**Extends:** Attrs&lt;'map', T&gt;",
      "editUrl": "https://github.com/QwikDev/qwik/tree/main/packages/qwik/src/core/render/jsx/types/jsx-generated.ts",
      "mdFile": "qwik.maphtmlattributes.md"
    },
    {
      "name": "MediaHTMLAttributes",
      "id": "mediahtmlattributes",
      "hierarchy": [
        {
          "name": "MediaHTMLAttributes",
          "id": "mediahtmlattributes"
        }
      ],
      "kind": "Interface",
      "content": "```typescript\nexport interface MediaHTMLAttributes<T extends Element> extends HTMLAttributes<T>, Augmented<HTMLMediaElement, {\n    crossOrigin?: HTMLCrossOriginAttribute;\n}> \n```\n**Extends:** [HTMLAttributes](#htmlattributes)<!-- -->&lt;T&gt;, Augmented&lt;HTMLMediaElement, { crossOrigin?: [HTMLCrossOriginAttribute](#htmlcrossoriginattribute)<!-- -->; }&gt;\n\n\n<table><thead><tr><th>\n\nProperty\n\n\n</th><th>\n\nModifiers\n\n\n</th><th>\n\nType\n\n\n</th><th>\n\nDescription\n\n\n</th></tr></thead>\n<tbody><tr><td>\n\n[crossOrigin?](#)\n\n\n</td><td>\n\n\n</td><td>\n\n[HTMLCrossOriginAttribute](#htmlcrossoriginattribute)\n\n\n</td><td>\n\n_(Optional)_\n\n\n</td></tr>\n</tbody></table>",
      "editUrl": "https://github.com/QwikDev/qwik/tree/main/packages/qwik/src/core/render/jsx/types/jsx-generated.ts",
      "mdFile": "qwik.mediahtmlattributes.md"
    },
    {
      "name": "MenuHTMLAttributes",
      "id": "menuhtmlattributes",
      "hierarchy": [
        {
          "name": "MenuHTMLAttributes",
          "id": "menuhtmlattributes"
        }
      ],
      "kind": "Interface",
      "content": "```typescript\nexport interface MenuHTMLAttributes<T extends Element> extends Attrs<'menu', T> \n```\n**Extends:** Attrs&lt;'menu', T&gt;",
      "editUrl": "https://github.com/QwikDev/qwik/tree/main/packages/qwik/src/core/render/jsx/types/jsx-generated.ts",
      "mdFile": "qwik.menuhtmlattributes.md"
    },
    {
      "name": "MetaHTMLAttributes",
      "id": "metahtmlattributes",
      "hierarchy": [
        {
          "name": "MetaHTMLAttributes",
          "id": "metahtmlattributes"
        }
      ],
      "kind": "Interface",
      "content": "```typescript\nexport interface MetaHTMLAttributes<T extends Element> extends Attrs<'meta', T> \n```\n**Extends:** Attrs&lt;'meta', T&gt;",
      "editUrl": "https://github.com/QwikDev/qwik/tree/main/packages/qwik/src/core/render/jsx/types/jsx-generated.ts",
      "mdFile": "qwik.metahtmlattributes.md"
    },
    {
      "name": "MeterHTMLAttributes",
      "id": "meterhtmlattributes",
      "hierarchy": [
        {
          "name": "MeterHTMLAttributes",
          "id": "meterhtmlattributes"
        }
      ],
      "kind": "Interface",
      "content": "```typescript\nexport interface MeterHTMLAttributes<T extends Element> extends Attrs<'meter', T> \n```\n**Extends:** Attrs&lt;'meter', T&gt;",
      "editUrl": "https://github.com/QwikDev/qwik/tree/main/packages/qwik/src/core/render/jsx/types/jsx-generated.ts",
      "mdFile": "qwik.meterhtmlattributes.md"
    },
    {
      "name": "NativeAnimationEvent",
      "id": "nativeanimationevent",
      "hierarchy": [
        {
          "name": "NativeAnimationEvent",
          "id": "nativeanimationevent"
        }
      ],
      "kind": "TypeAlias",
      "content": "> Warning: This API is now obsolete.\n> \n> Use `AnimationEvent` and use the second argument to the handler function for the current event target\n> \n\n\n```typescript\nexport type NativeAnimationEvent = AnimationEvent;\n```",
      "editUrl": "https://github.com/QwikDev/qwik/tree/main/packages/qwik/src/core/render/jsx/types/jsx-qwik-events.ts",
      "mdFile": "qwik.nativeanimationevent.md"
    },
    {
      "name": "NativeClipboardEvent",
      "id": "nativeclipboardevent",
      "hierarchy": [
        {
          "name": "NativeClipboardEvent",
          "id": "nativeclipboardevent"
        }
      ],
      "kind": "TypeAlias",
      "content": "> Warning: This API is now obsolete.\n> \n> Use `ClipboardEvent` and use the second argument to the handler function for the current event target\n> \n\n\n```typescript\nexport type NativeClipboardEvent = ClipboardEvent;\n```",
      "editUrl": "https://github.com/QwikDev/qwik/tree/main/packages/qwik/src/core/render/jsx/types/jsx-qwik-events.ts",
      "mdFile": "qwik.nativeclipboardevent.md"
    },
    {
      "name": "NativeCompositionEvent",
      "id": "nativecompositionevent",
      "hierarchy": [
        {
          "name": "NativeCompositionEvent",
          "id": "nativecompositionevent"
        }
      ],
      "kind": "TypeAlias",
      "content": "> Warning: This API is now obsolete.\n> \n> Use `CompositionEvent` and use the second argument to the handler function for the current event target\n> \n\n\n```typescript\nexport type NativeCompositionEvent = CompositionEvent;\n```",
      "editUrl": "https://github.com/QwikDev/qwik/tree/main/packages/qwik/src/core/render/jsx/types/jsx-qwik-events.ts",
      "mdFile": "qwik.nativecompositionevent.md"
    },
    {
      "name": "NativeDragEvent",
      "id": "nativedragevent",
      "hierarchy": [
        {
          "name": "NativeDragEvent",
          "id": "nativedragevent"
        }
      ],
      "kind": "TypeAlias",
      "content": "> Warning: This API is now obsolete.\n> \n> Use `DragEvent` and use the second argument to the handler function for the current event target\n> \n\n\n```typescript\nexport type NativeDragEvent = DragEvent;\n```",
      "editUrl": "https://github.com/QwikDev/qwik/tree/main/packages/qwik/src/core/render/jsx/types/jsx-qwik-events.ts",
      "mdFile": "qwik.nativedragevent.md"
    },
    {
      "name": "NativeFocusEvent",
      "id": "nativefocusevent",
      "hierarchy": [
        {
          "name": "NativeFocusEvent",
          "id": "nativefocusevent"
        }
      ],
      "kind": "TypeAlias",
      "content": "> Warning: This API is now obsolete.\n> \n> Use `FocusEvent` and use the second argument to the handler function for the current event target\n> \n\n\n```typescript\nexport type NativeFocusEvent = FocusEvent;\n```",
      "editUrl": "https://github.com/QwikDev/qwik/tree/main/packages/qwik/src/core/render/jsx/types/jsx-qwik-events.ts",
      "mdFile": "qwik.nativefocusevent.md"
    },
    {
      "name": "NativeKeyboardEvent",
      "id": "nativekeyboardevent",
      "hierarchy": [
        {
          "name": "NativeKeyboardEvent",
          "id": "nativekeyboardevent"
        }
      ],
      "kind": "TypeAlias",
      "content": "> Warning: This API is now obsolete.\n> \n> Use `KeyboardEvent` and use the second argument to the handler function for the current event target\n> \n\n\n```typescript\nexport type NativeKeyboardEvent = KeyboardEvent;\n```",
      "editUrl": "https://github.com/QwikDev/qwik/tree/main/packages/qwik/src/core/render/jsx/types/jsx-qwik-events.ts",
      "mdFile": "qwik.nativekeyboardevent.md"
    },
    {
      "name": "NativeMouseEvent",
      "id": "nativemouseevent",
      "hierarchy": [
        {
          "name": "NativeMouseEvent",
          "id": "nativemouseevent"
        }
      ],
      "kind": "TypeAlias",
      "content": "> Warning: This API is now obsolete.\n> \n> Use `MouseEvent` and use the second argument to the handler function for the current event target\n> \n\n\n```typescript\nexport type NativeMouseEvent = MouseEvent;\n```",
      "editUrl": "https://github.com/QwikDev/qwik/tree/main/packages/qwik/src/core/render/jsx/types/jsx-qwik-events.ts",
      "mdFile": "qwik.nativemouseevent.md"
    },
    {
      "name": "NativePointerEvent",
      "id": "nativepointerevent",
      "hierarchy": [
        {
          "name": "NativePointerEvent",
          "id": "nativepointerevent"
        }
      ],
      "kind": "TypeAlias",
      "content": "> Warning: This API is now obsolete.\n> \n> Use `PointerEvent` and use the second argument to the handler function for the current event target\n> \n\n\n```typescript\nexport type NativePointerEvent = PointerEvent;\n```",
      "editUrl": "https://github.com/QwikDev/qwik/tree/main/packages/qwik/src/core/render/jsx/types/jsx-qwik-events.ts",
      "mdFile": "qwik.nativepointerevent.md"
    },
    {
      "name": "NativeTouchEvent",
      "id": "nativetouchevent",
      "hierarchy": [
        {
          "name": "NativeTouchEvent",
          "id": "nativetouchevent"
        }
      ],
      "kind": "TypeAlias",
      "content": "> Warning: This API is now obsolete.\n> \n> Use `TouchEvent` and use the second argument to the handler function for the current event target\n> \n\n\n```typescript\nexport type NativeTouchEvent = TouchEvent;\n```",
      "editUrl": "https://github.com/QwikDev/qwik/tree/main/packages/qwik/src/core/render/jsx/types/jsx-qwik-events.ts",
      "mdFile": "qwik.nativetouchevent.md"
    },
    {
      "name": "NativeTransitionEvent",
      "id": "nativetransitionevent",
      "hierarchy": [
        {
          "name": "NativeTransitionEvent",
          "id": "nativetransitionevent"
        }
      ],
      "kind": "TypeAlias",
      "content": "> Warning: This API is now obsolete.\n> \n> Use `TransitionEvent` and use the second argument to the handler function for the current event target\n> \n\n\n```typescript\nexport type NativeTransitionEvent = TransitionEvent;\n```",
      "editUrl": "https://github.com/QwikDev/qwik/tree/main/packages/qwik/src/core/render/jsx/types/jsx-qwik-events.ts",
      "mdFile": "qwik.nativetransitionevent.md"
    },
    {
      "name": "NativeUIEvent",
      "id": "nativeuievent",
      "hierarchy": [
        {
          "name": "NativeUIEvent",
          "id": "nativeuievent"
        }
      ],
      "kind": "TypeAlias",
      "content": "> Warning: This API is now obsolete.\n> \n> Use `UIEvent` and use the second argument to the handler function for the current event target\n> \n\n\n```typescript\nexport type NativeUIEvent = UIEvent;\n```",
      "editUrl": "https://github.com/QwikDev/qwik/tree/main/packages/qwik/src/core/render/jsx/types/jsx-qwik-events.ts",
      "mdFile": "qwik.nativeuievent.md"
    },
    {
      "name": "NativeWheelEvent",
      "id": "nativewheelevent",
      "hierarchy": [
        {
          "name": "NativeWheelEvent",
          "id": "nativewheelevent"
        }
      ],
      "kind": "TypeAlias",
      "content": "> Warning: This API is now obsolete.\n> \n> Use `WheelEvent` and use the second argument to the handler function for the current event target\n> \n\n\n```typescript\nexport type NativeWheelEvent = WheelEvent;\n```",
      "editUrl": "https://github.com/QwikDev/qwik/tree/main/packages/qwik/src/core/render/jsx/types/jsx-qwik-events.ts",
      "mdFile": "qwik.nativewheelevent.md"
    },
    {
      "name": "noSerialize",
      "id": "noserialize",
      "hierarchy": [
        {
          "name": "noSerialize",
          "id": "noserialize"
        }
      ],
      "kind": "Function",
      "content": "Returned type of the `noSerialize()` function. It will be TYPE or undefined.\n\n\n```typescript\nexport type NoSerialize<T> = (T & {\n    __no_serialize__: true;\n}) | undefined;\n```",
      "editUrl": "https://github.com/QwikDev/qwik/tree/main/packages/qwik/src/core/state/common.ts",
      "mdFile": "qwik.noserialize.md"
    },
    {
      "name": "NoSerialize",
      "id": "noserialize",
      "hierarchy": [
        {
          "name": "NoSerialize",
          "id": "noserialize"
        }
      ],
      "kind": "TypeAlias",
      "content": "Returned type of the `noSerialize()` function. It will be TYPE or undefined.\n\n\n```typescript\nexport type NoSerialize<T> = (T & {\n    __no_serialize__: true;\n}) | undefined;\n```",
      "editUrl": "https://github.com/QwikDev/qwik/tree/main/packages/qwik/src/core/state/common.ts",
      "mdFile": "qwik.noserialize.md"
    },
    {
      "name": "Numberish",
      "id": "numberish",
      "hierarchy": [
        {
          "name": "Numberish",
          "id": "numberish"
        }
      ],
      "kind": "TypeAlias",
      "content": "```typescript\nexport type Numberish = number | `${number}`;\n```",
      "editUrl": "https://github.com/QwikDev/qwik/tree/main/packages/qwik/src/core/render/jsx/types/jsx-generated.ts",
      "mdFile": "qwik.numberish.md"
    },
    {
      "name": "ObjectHTMLAttributes",
      "id": "objecthtmlattributes",
      "hierarchy": [
        {
          "name": "ObjectHTMLAttributes",
          "id": "objecthtmlattributes"
        }
      ],
      "kind": "Interface",
      "content": "```typescript\nexport interface ObjectHTMLAttributes<T extends Element> extends Attrs<'object', T> \n```\n**Extends:** Attrs&lt;'object', T&gt;",
      "editUrl": "https://github.com/QwikDev/qwik/tree/main/packages/qwik/src/core/render/jsx/types/jsx-generated.ts",
      "mdFile": "qwik.objecthtmlattributes.md"
    },
    {
      "name": "OlHTMLAttributes",
      "id": "olhtmlattributes",
      "hierarchy": [
        {
          "name": "OlHTMLAttributes",
          "id": "olhtmlattributes"
        }
      ],
      "kind": "Interface",
      "content": "```typescript\nexport interface OlHTMLAttributes<T extends Element> extends Attrs<'ol', T> \n```\n**Extends:** Attrs&lt;'ol', T&gt;",
      "editUrl": "https://github.com/QwikDev/qwik/tree/main/packages/qwik/src/core/render/jsx/types/jsx-generated.ts",
      "mdFile": "qwik.olhtmlattributes.md"
    },
    {
      "name": "OnRenderFn",
      "id": "onrenderfn",
      "hierarchy": [
        {
          "name": "OnRenderFn",
          "id": "onrenderfn"
        }
      ],
      "kind": "TypeAlias",
      "content": "```typescript\nexport type OnRenderFn<PROPS> = (props: PROPS) => JSXOutput;\n```\n**References:** [JSXOutput](#jsxoutput)",
      "editUrl": "https://github.com/QwikDev/qwik/tree/main/packages/qwik/src/core/component/component.public.ts",
      "mdFile": "qwik.onrenderfn.md"
    },
    {
      "name": "OnVisibleTaskOptions",
      "id": "onvisibletaskoptions",
      "hierarchy": [
        {
          "name": "OnVisibleTaskOptions",
          "id": "onvisibletaskoptions"
        }
      ],
      "kind": "Interface",
      "content": "```typescript\nexport interface OnVisibleTaskOptions \n```\n\n\n<table><thead><tr><th>\n\nProperty\n\n\n</th><th>\n\nModifiers\n\n\n</th><th>\n\nType\n\n\n</th><th>\n\nDescription\n\n\n</th></tr></thead>\n<tbody><tr><td>\n\n[strategy?](#)\n\n\n</td><td>\n\n\n</td><td>\n\n[VisibleTaskStrategy](#visibletaskstrategy)\n\n\n</td><td>\n\n_(Optional)_ The strategy to use to determine when the \"VisibleTask\" should first execute.\n\n- `intersection-observer`<!-- -->: the task will first execute when the element is visible in the viewport, under the hood it uses the IntersectionObserver API. - `document-ready`<!-- -->: the task will first execute when the document is ready, under the hood it uses the document `load` event. - `document-idle`<!-- -->: the task will first execute when the document is idle, under the hood it uses the requestIdleCallback API.\n\n\n</td></tr>\n</tbody></table>",
      "editUrl": "https://github.com/QwikDev/qwik/tree/main/packages/qwik/src/core/use/use-task.ts",
      "mdFile": "qwik.onvisibletaskoptions.md"
    },
    {
      "name": "OptgroupHTMLAttributes",
      "id": "optgrouphtmlattributes",
      "hierarchy": [
        {
          "name": "OptgroupHTMLAttributes",
          "id": "optgrouphtmlattributes"
        }
      ],
      "kind": "Interface",
      "content": "```typescript\nexport interface OptgroupHTMLAttributes<T extends Element> extends Attrs<'optgroup', T> \n```\n**Extends:** Attrs&lt;'optgroup', T&gt;",
      "editUrl": "https://github.com/QwikDev/qwik/tree/main/packages/qwik/src/core/render/jsx/types/jsx-generated.ts",
      "mdFile": "qwik.optgrouphtmlattributes.md"
    },
    {
      "name": "OptionHTMLAttributes",
      "id": "optionhtmlattributes",
      "hierarchy": [
        {
          "name": "OptionHTMLAttributes",
          "id": "optionhtmlattributes"
        }
      ],
      "kind": "Interface",
      "content": "```typescript\nexport interface OptionHTMLAttributes<T extends Element> extends Attrs<'option', T> \n```\n**Extends:** Attrs&lt;'option', T&gt;",
      "editUrl": "https://github.com/QwikDev/qwik/tree/main/packages/qwik/src/core/render/jsx/types/jsx-generated.ts",
      "mdFile": "qwik.optionhtmlattributes.md"
    },
    {
      "name": "OutputHTMLAttributes",
      "id": "outputhtmlattributes",
      "hierarchy": [
        {
          "name": "OutputHTMLAttributes",
          "id": "outputhtmlattributes"
        }
      ],
      "kind": "Interface",
      "content": "```typescript\nexport interface OutputHTMLAttributes<T extends Element> extends Attrs<'output', T> \n```\n**Extends:** Attrs&lt;'output', T&gt;",
      "editUrl": "https://github.com/QwikDev/qwik/tree/main/packages/qwik/src/core/render/jsx/types/jsx-generated.ts",
      "mdFile": "qwik.outputhtmlattributes.md"
    },
    {
      "name": "ParamHTMLAttributes",
      "id": "paramhtmlattributes",
      "hierarchy": [
        {
          "name": "ParamHTMLAttributes",
          "id": "paramhtmlattributes"
        }
      ],
      "kind": "Interface",
      "content": "> Warning: This API is now obsolete.\n> \n> Old DOM API\n> \n\n\n```typescript\nexport interface ParamHTMLAttributes<T extends Element> extends Attrs<'base', T, HTMLParamElement> \n```\n**Extends:** Attrs&lt;'base', T, HTMLParamElement&gt;",
      "editUrl": "https://github.com/QwikDev/qwik/tree/main/packages/qwik/src/core/render/jsx/types/jsx-generated.ts",
      "mdFile": "qwik.paramhtmlattributes.md"
    },
    {
      "name": "PrefetchGraph",
      "id": "prefetchgraph",
      "hierarchy": [
        {
          "name": "PrefetchGraph",
          "id": "prefetchgraph"
        }
      ],
      "kind": "Function",
      "content": "> This API is provided as an alpha preview for developers and may change based on feedback that we receive. Do not use this API in a production environment.\n> \n\nLoad the prefetch graph for the container.\n\nEach Qwik container needs to include its own prefetch graph.\n\n\n```typescript\nPrefetchGraph: (opts?: {\n    base?: string;\n    manifestHash?: string;\n    manifestURL?: string;\n    nonce?: string;\n}) => JSXNode<\"script\">\n```\n\n\n<table><thead><tr><th>\n\nParameter\n\n\n</th><th>\n\nType\n\n\n</th><th>\n\nDescription\n\n\n</th></tr></thead>\n<tbody><tr><td>\n\nopts\n\n\n</td><td>\n\n{ base?: string; manifestHash?: string; manifestURL?: string; nonce?: string; }\n\n\n</td><td>\n\n_(Optional)_ Options for the loading prefetch graph.\n\n- `base` - Base of the graph. For a default installation this will default to the q:base value `/build/`<!-- -->. But if more than one MFE is installed on the page, then each MFE needs to have its own base. - `manifestHash` - Hash of the manifest file to load. If not provided the hash will be extracted from the container attribute `q:manifest-hash` and assume the default build file `${base}/q-bundle-graph-${manifestHash}.json`<!-- -->. - `manifestURL` - URL of the manifest file to load if non-standard bundle graph location name.\n\n\n</td></tr>\n</tbody></table>\n**Returns:**\n\nJSXNode&lt;\"script\"&gt;",
      "editUrl": "https://github.com/QwikDev/qwik/tree/main/packages/qwik/src/core/components/prefetch.ts",
      "mdFile": "qwik.prefetchgraph.md"
    },
    {
      "name": "PrefetchServiceWorker",
      "id": "prefetchserviceworker",
      "hierarchy": [
        {
          "name": "PrefetchServiceWorker",
          "id": "prefetchserviceworker"
        }
      ],
      "kind": "Function",
      "content": "> This API is provided as an alpha preview for developers and may change based on feedback that we receive. Do not use this API in a production environment.\n> \n\nInstall a service worker which will prefetch the bundles.\n\nThere can only be one service worker per page. Because there can be many separate Qwik Containers on the page each container needs to load its prefetch graph using `PrefetchGraph` component.\n\n\n```typescript\nPrefetchServiceWorker: (opts: {\n    base?: string;\n    scope?: string;\n    path?: string;\n    verbose?: boolean;\n    fetchBundleGraph?: boolean;\n    nonce?: string;\n}) => JSXNode<'script'>\n```\n\n\n<table><thead><tr><th>\n\nParameter\n\n\n</th><th>\n\nType\n\n\n</th><th>\n\nDescription\n\n\n</th></tr></thead>\n<tbody><tr><td>\n\nopts\n\n\n</td><td>\n\n{ base?: string; scope?: string; path?: string; verbose?: boolean; fetchBundleGraph?: boolean; nonce?: string; }\n\n\n</td><td>\n\nOptions for the prefetch service worker.\n\n- `base` - Base URL for the service worker `import.meta.env.BASE_URL` or `/`<!-- -->. Default is `import.meta.env.BASE_URL` - `scope` - Base URL for when the service-worker will activate. Default is `/` - `path` - Path to the service worker. Default is `qwik-prefetch-service-worker.js` unless you pass a path that starts with a `/` then the base is ignored. Default is `qwik-prefetch-service-worker.js` - `verbose` - Verbose logging for the service worker installation. Default is `false` - `nonce` - Optional nonce value for security purposes, defaults to `undefined`<!-- -->.\n\n\n</td></tr>\n</tbody></table>\n**Returns:**\n\nJSXNode&lt;'script'&gt;",
      "editUrl": "https://github.com/QwikDev/qwik/tree/main/packages/qwik/src/core/components/prefetch.ts",
      "mdFile": "qwik.prefetchserviceworker.md"
    },
    {
      "name": "ProgressHTMLAttributes",
      "id": "progresshtmlattributes",
      "hierarchy": [
        {
          "name": "ProgressHTMLAttributes",
          "id": "progresshtmlattributes"
        }
      ],
      "kind": "Interface",
      "content": "```typescript\nexport interface ProgressHTMLAttributes<T extends Element> extends Attrs<'progress', T> \n```\n**Extends:** Attrs&lt;'progress', T&gt;",
      "editUrl": "https://github.com/QwikDev/qwik/tree/main/packages/qwik/src/core/render/jsx/types/jsx-generated.ts",
      "mdFile": "qwik.progresshtmlattributes.md"
    },
    {
      "name": "PropFnInterface",
      "id": "propfninterface",
      "hierarchy": [
        {
          "name": "PropFnInterface",
          "id": "propfninterface"
        }
      ],
      "kind": "TypeAlias",
      "content": "> Warning: This API is now obsolete.\n> \n> Use `QRL<>` instead\n> \n\n\n```typescript\nexport type PropFnInterface<ARGS extends any[], RET> = {\n    __qwik_serializable__?: any;\n    (...args: ARGS): Promise<RET>;\n};\n```",
      "editUrl": "https://github.com/QwikDev/qwik/tree/main/packages/qwik/src/core/qrl/qrl.public.ts",
      "mdFile": "qwik.propfninterface.md"
    },
    {
      "name": "PropFunction",
      "id": "propfunction",
      "hierarchy": [
        {
          "name": "PropFunction",
          "id": "propfunction"
        }
      ],
      "kind": "TypeAlias",
      "content": "Alias for `QRL<T>`<!-- -->. Of historic relevance only.\n\n\n```typescript\nexport type PropFunction<T> = QRL<T>;\n```\n**References:** [QRL](#qrl)",
      "editUrl": "https://github.com/QwikDev/qwik/tree/main/packages/qwik/src/core/qrl/qrl.public.ts",
      "mdFile": "qwik.propfunction.md"
    },
    {
      "name": "PropFunctionProps",
      "id": "propfunctionprops",
      "hierarchy": [
        {
          "name": "PropFunctionProps",
          "id": "propfunctionprops"
        }
      ],
      "kind": "TypeAlias",
      "content": "> Warning: This API is now obsolete.\n> \n> Use `QRL<>` on your function props instead\n> \n\n\n```typescript\nexport type PropFunctionProps<PROPS extends Record<any, any>> = {\n    [K in keyof PROPS]: PROPS[K] extends undefined ? PROPS[K] : PROPS[K] extends ((...args: infer ARGS) => infer RET) | undefined ? PropFnInterface<ARGS, Awaited<RET>> : PROPS[K];\n};\n```\n**References:** [PropFnInterface](#propfninterface)",
      "editUrl": "https://github.com/QwikDev/qwik/tree/main/packages/qwik/src/core/component/component.public.ts",
      "mdFile": "qwik.propfunctionprops.md"
    },
    {
      "name": "PropsOf",
      "id": "propsof",
      "hierarchy": [
        {
          "name": "PropsOf",
          "id": "propsof"
        }
      ],
      "kind": "TypeAlias",
      "content": "Infers `Props` from the component or tag.\n\n\n```typescript\nexport type PropsOf<COMP> = COMP extends string ? COMP extends keyof QwikIntrinsicElements ? QwikIntrinsicElements[COMP] : QwikIntrinsicElements['span'] : NonNullable<COMP> extends never ? never : COMP extends FunctionComponent<infer PROPS> ? PROPS extends Record<any, infer V> ? IsAny<V> extends true ? never : ObjectProps<PROPS> : COMP extends Component<infer OrigProps> ? ObjectProps<OrigProps> : PROPS : never;\n```\n**References:** [QwikIntrinsicElements](#qwikintrinsicelements)<!-- -->, [FunctionComponent](#functioncomponent)<!-- -->, [Component](#component)\n\n\n\n```tsx\nconst Desc = component$(({desc, ...props}: { desc: string } & PropsOf<'div'>) => {\n return <div {...props}>{desc}</div>;\n});\n\nconst TitleBox = component$(({title, ...props}: { title: string } & PropsOf<Box>) => {\n  return <Box {...props}><h1>{title}</h1></Box>;\n});\n```",
      "editUrl": "https://github.com/QwikDev/qwik/tree/main/packages/qwik/src/core/component/component.public.ts",
      "mdFile": "qwik.propsof.md"
    },
    {
      "name": "PublicProps",
      "id": "publicprops",
      "hierarchy": [
        {
          "name": "PublicProps",
          "id": "publicprops"
        }
      ],
      "kind": "TypeAlias",
      "content": "Extends the defined component PROPS, adding the default ones (children and q:slot) and allowing plain functions to QRL arguments.\n\n\n```typescript\nexport type PublicProps<PROPS> = (PROPS extends Record<any, any> ? Omit<PROPS, `${string}$`> & _Only$<PROPS> : unknown extends PROPS ? {} : PROPS) & ComponentBaseProps & ComponentChildren<PROPS>;\n```\n**References:** [ComponentBaseProps](#componentbaseprops)",
      "editUrl": "https://github.com/QwikDev/qwik/tree/main/packages/qwik/src/core/component/component.public.ts",
      "mdFile": "qwik.publicprops.md"
    },
    {
      "name": "qrl",
      "id": "qrl",
      "hierarchy": [
        {
          "name": "qrl",
          "id": "qrl"
        }
      ],
      "kind": "Function",
      "content": "The `QRL` type represents a lazy-loadable AND serializable resource.\n\nQRL stands for Qwik URL.\n\nUse `QRL` when you want to refer to a lazy-loaded resource. `QRL`<!-- -->s are most often used for code (functions) but can also be used for other resources such as `string`<!-- -->s in the case of styles.\n\n`QRL` is an opaque token that is generated by the Qwik Optimizer. (Do not rely on any properties in `QRL` as it may change between versions.)\n\n\\#\\# Creating `QRL` references\n\nCreating `QRL` is done using `$(...)` function. `$(...)` is a special marker for the Qwik Optimizer that marks that the code should be extracted into a lazy-loaded symbol.\n\n```tsx\nuseOnDocument(\n  'mousemove',\n  $((event) => console.log('mousemove', event))\n);\n```\nIn the above code, the Qwik Optimizer detects `$(...)` and transforms the code as shown below:\n\n```tsx\n// FILE: <current file>\nuseOnDocument('mousemove', qrl('./chunk-abc.js', 'onMousemove'));\n\n// FILE: chunk-abc.js\nexport const onMousemove = () => console.log('mousemove');\n```\nNOTE: `qrl(...)` is a result of Qwik Optimizer transformation. You should never have to invoke this function directly in your application. The `qrl(...)` function should be invoked only after the Qwik Optimizer transformation.\n\n\\#\\# Using `QRL`<!-- -->s\n\nUse `QRL` type in your application when you want to get a lazy-loadable reference to a resource (most likely a function).\n\n```tsx\n// Example of declaring a custom functions which takes callback as QRL.\nexport function useMyFunction(callback: QRL<() => void>) {\n  doExtraStuff();\n  // The callback passed to `onDocument` requires `QRL`.\n  useOnDocument('mousemove', callback);\n}\n```\nIn the above example, the way to think about the code is that you are not asking for a callback function but rather a reference to a lazy-loadable callback function. Specifically, the function loading should be delayed until it is actually needed. In the above example, the function would not load until after a `mousemove` event on `document` fires.\n\n\\#\\# Resolving `QRL` references\n\nAt times it may be necessary to resolve a `QRL` reference to the actual value. This can be performed using `QRL.resolve(..)` function.\n\n```tsx\n// Assume you have QRL reference to a greet function\nconst lazyGreet: QRL<() => void> = $(() => console.log('Hello World!'));\n\n// Use `qrlImport` to load / resolve the reference.\nconst greet: () => void = await lazyGreet.resolve();\n\n//  Invoke it\ngreet();\n```\nNOTE: `element` is needed because `QRL`<!-- -->s are relative and need a base location to resolve against. The base location is encoded in the HTML in the form of `<div q:base=\"/url\">`<!-- -->.\n\n\\#\\# `QRL.resolved`\n\nOnce `QRL.resolve()` returns, the value is stored under `QRL.resolved`<!-- -->. This allows the value to be used without having to await `QRL.resolve()` again.\n\n\\#\\# Question: Why not just use `import()`<!-- -->?\n\nAt first glance, `QRL` serves the same purpose as `import()`<!-- -->. However, there are three subtle differences that need to be taken into account.\n\n1. `QRL`<!-- -->s must be serializable into HTML. 2. `QRL`<!-- -->s must be resolved by framework relative to `q:base`<!-- -->. 3. `QRL`<!-- -->s must be able to capture lexically scoped variables. 4. `QRL`<!-- -->s encapsulate the difference between running with and without Qwik Optimizer. 5. `QRL`<!-- -->s allow expressing lazy-loaded boundaries without thinking about chunk and symbol names.\n\nLet's assume that you intend to write code such as this:\n\n```tsx\nreturn <button onClick={() => (await import('./chunk-abc.js')).onClick}>\n```\nThe above code needs to be serialized into DOM such as:\n\n```\n<div q:base=\"/build/\">\n  <button on:click=\"./chunk-abc.js#onClick\">...</button>\n</div>\n```\n1. Notice there is no easy way to extract chunk (`./chunk-abc.js`<!-- -->) and symbol (`onClick`<!-- -->) into HTML. 2. Notice that even if you could extract it, the `import('./chunk-abc.js')` would become relative to where the `import()` file is declared. Because it is our framework doing the load, the `./chunk-abc.js` would become relative to the framework file. This is not correct, as it should be relative to the original file generated by the bundler. 3. Next, the framework needs to resolve the `./chunk-abc.js` and needs a base location that is encoded in the HTML. 4. The QRL needs to be able to capture lexically scoped variables. (`import()` only allows loading top-level symbols which don't capture variables.) 5. As a developer, you don't want to think about `import` and naming the chunks and symbols. You just want to say: \"this should be lazy.\"\n\nThese are the main reasons why Qwik introduces its own concept of `QRL`<!-- -->.\n\n\n```typescript\nexport type QRL<TYPE = unknown> = {\n    __qwik_serializable__?: any;\n    __brand__QRL__: TYPE;\n    resolve(): Promise<TYPE>;\n    resolved: undefined | TYPE;\n    getCaptured(): unknown[] | null;\n    getSymbol(): string;\n    getHash(): string;\n    dev: QRLDev | null;\n} & BivariantQrlFn<QrlArgs<TYPE>, QrlReturn<TYPE>>;\n```",
      "editUrl": "https://github.com/QwikDev/qwik/tree/main/packages/qwik/src/core/qrl/qrl.ts",
      "mdFile": "qwik.qrl.md"
    },
    {
      "name": "QRL",
      "id": "qrl",
      "hierarchy": [
        {
          "name": "QRL",
          "id": "qrl"
        }
      ],
      "kind": "TypeAlias",
      "content": "The `QRL` type represents a lazy-loadable AND serializable resource.\n\nQRL stands for Qwik URL.\n\nUse `QRL` when you want to refer to a lazy-loaded resource. `QRL`<!-- -->s are most often used for code (functions) but can also be used for other resources such as `string`<!-- -->s in the case of styles.\n\n`QRL` is an opaque token that is generated by the Qwik Optimizer. (Do not rely on any properties in `QRL` as it may change between versions.)\n\n\\#\\# Creating `QRL` references\n\nCreating `QRL` is done using `$(...)` function. `$(...)` is a special marker for the Qwik Optimizer that marks that the code should be extracted into a lazy-loaded symbol.\n\n```tsx\nuseOnDocument(\n  'mousemove',\n  $((event) => console.log('mousemove', event))\n);\n```\nIn the above code, the Qwik Optimizer detects `$(...)` and transforms the code as shown below:\n\n```tsx\n// FILE: <current file>\nuseOnDocument('mousemove', qrl('./chunk-abc.js', 'onMousemove'));\n\n// FILE: chunk-abc.js\nexport const onMousemove = () => console.log('mousemove');\n```\nNOTE: `qrl(...)` is a result of Qwik Optimizer transformation. You should never have to invoke this function directly in your application. The `qrl(...)` function should be invoked only after the Qwik Optimizer transformation.\n\n\\#\\# Using `QRL`<!-- -->s\n\nUse `QRL` type in your application when you want to get a lazy-loadable reference to a resource (most likely a function).\n\n```tsx\n// Example of declaring a custom functions which takes callback as QRL.\nexport function useMyFunction(callback: QRL<() => void>) {\n  doExtraStuff();\n  // The callback passed to `onDocument` requires `QRL`.\n  useOnDocument('mousemove', callback);\n}\n```\nIn the above example, the way to think about the code is that you are not asking for a callback function but rather a reference to a lazy-loadable callback function. Specifically, the function loading should be delayed until it is actually needed. In the above example, the function would not load until after a `mousemove` event on `document` fires.\n\n\\#\\# Resolving `QRL` references\n\nAt times it may be necessary to resolve a `QRL` reference to the actual value. This can be performed using `QRL.resolve(..)` function.\n\n```tsx\n// Assume you have QRL reference to a greet function\nconst lazyGreet: QRL<() => void> = $(() => console.log('Hello World!'));\n\n// Use `qrlImport` to load / resolve the reference.\nconst greet: () => void = await lazyGreet.resolve();\n\n//  Invoke it\ngreet();\n```\nNOTE: `element` is needed because `QRL`<!-- -->s are relative and need a base location to resolve against. The base location is encoded in the HTML in the form of `<div q:base=\"/url\">`<!-- -->.\n\n\\#\\# `QRL.resolved`\n\nOnce `QRL.resolve()` returns, the value is stored under `QRL.resolved`<!-- -->. This allows the value to be used without having to await `QRL.resolve()` again.\n\n\\#\\# Question: Why not just use `import()`<!-- -->?\n\nAt first glance, `QRL` serves the same purpose as `import()`<!-- -->. However, there are three subtle differences that need to be taken into account.\n\n1. `QRL`<!-- -->s must be serializable into HTML. 2. `QRL`<!-- -->s must be resolved by framework relative to `q:base`<!-- -->. 3. `QRL`<!-- -->s must be able to capture lexically scoped variables. 4. `QRL`<!-- -->s encapsulate the difference between running with and without Qwik Optimizer. 5. `QRL`<!-- -->s allow expressing lazy-loaded boundaries without thinking about chunk and symbol names.\n\nLet's assume that you intend to write code such as this:\n\n```tsx\nreturn <button onClick={() => (await import('./chunk-abc.js')).onClick}>\n```\nThe above code needs to be serialized into DOM such as:\n\n```\n<div q:base=\"/build/\">\n  <button on:click=\"./chunk-abc.js#onClick\">...</button>\n</div>\n```\n1. Notice there is no easy way to extract chunk (`./chunk-abc.js`<!-- -->) and symbol (`onClick`<!-- -->) into HTML. 2. Notice that even if you could extract it, the `import('./chunk-abc.js')` would become relative to where the `import()` file is declared. Because it is our framework doing the load, the `./chunk-abc.js` would become relative to the framework file. This is not correct, as it should be relative to the original file generated by the bundler. 3. Next, the framework needs to resolve the `./chunk-abc.js` and needs a base location that is encoded in the HTML. 4. The QRL needs to be able to capture lexically scoped variables. (`import()` only allows loading top-level symbols which don't capture variables.) 5. As a developer, you don't want to think about `import` and naming the chunks and symbols. You just want to say: \"this should be lazy.\"\n\nThese are the main reasons why Qwik introduces its own concept of `QRL`<!-- -->.\n\n\n```typescript\nexport type QRL<TYPE = unknown> = {\n    __qwik_serializable__?: any;\n    __brand__QRL__: TYPE;\n    resolve(): Promise<TYPE>;\n    resolved: undefined | TYPE;\n    getCaptured(): unknown[] | null;\n    getSymbol(): string;\n    getHash(): string;\n    dev: QRLDev | null;\n} & BivariantQrlFn<QrlArgs<TYPE>, QrlReturn<TYPE>>;\n```",
      "editUrl": "https://github.com/QwikDev/qwik/tree/main/packages/qwik/src/core/qrl/qrl.public.ts",
      "mdFile": "qwik.qrl.md"
    },
    {
      "name": "QRLEventHandlerMulti",
      "id": "qrleventhandlermulti",
      "hierarchy": [
        {
          "name": "QRLEventHandlerMulti",
          "id": "qrleventhandlermulti"
        }
      ],
      "kind": "TypeAlias",
      "content": "> This API is provided as a beta preview for developers and may change based on feedback that we receive. Do not use this API in a production environment.\n> \n\nAn event handler for Qwik events, can be a handler QRL or an array of handler QRLs.\n\n\n```typescript\nexport type QRLEventHandlerMulti<EV extends Event, EL> = QRL<EventHandler<EV, EL>> | undefined | null | QRLEventHandlerMulti<EV, EL>[] | EventHandler<EV, EL>;\n```\n**References:** [QRL](#qrl)<!-- -->, [EventHandler](#eventhandler)<!-- -->, [QRLEventHandlerMulti](#qrleventhandlermulti)",
      "editUrl": "https://github.com/QwikDev/qwik/tree/main/packages/qwik/src/core/render/jsx/types/jsx-qwik-attributes.ts",
      "mdFile": "qwik.qrleventhandlermulti.md"
    },
    {
      "name": "QuoteHTMLAttributes",
      "id": "quotehtmlattributes",
      "hierarchy": [
        {
          "name": "QuoteHTMLAttributes",
          "id": "quotehtmlattributes"
        }
      ],
      "kind": "Interface",
      "content": "```typescript\nexport interface QuoteHTMLAttributes<T extends Element> extends Attrs<'q', T> \n```\n**Extends:** Attrs&lt;'q', T&gt;",
      "editUrl": "https://github.com/QwikDev/qwik/tree/main/packages/qwik/src/core/render/jsx/types/jsx-generated.ts",
      "mdFile": "qwik.quotehtmlattributes.md"
    },
    {
      "name": "QwikAnimationEvent",
      "id": "qwikanimationevent",
      "hierarchy": [
        {
          "name": "QwikAnimationEvent",
          "id": "qwikanimationevent"
        }
      ],
      "kind": "TypeAlias",
      "content": "> Warning: This API is now obsolete.\n> \n> Use `AnimationEvent` and use the second argument to the handler function for the current event target\n> \n\n\n```typescript\nexport type QwikAnimationEvent<T = Element> = NativeAnimationEvent;\n```\n**References:** [NativeAnimationEvent](#nativeanimationevent)",
      "editUrl": "https://github.com/QwikDev/qwik/tree/main/packages/qwik/src/core/render/jsx/types/jsx-qwik-events.ts",
      "mdFile": "qwik.qwikanimationevent.md"
    },
    {
      "name": "QwikAttributes",
      "id": "qwikattributes",
      "hierarchy": [
        {
          "name": "QwikAttributes",
          "id": "qwikattributes"
        }
      ],
      "kind": "Interface",
      "content": "The Qwik DOM attributes without plain handlers, for use as function parameters\n\n\n```typescript\nexport interface QwikAttributes<EL extends Element> extends DOMAttributesBase<EL>, QwikEvents<EL, false> \n```\n**Extends:** DOMAttributesBase&lt;EL&gt;, QwikEvents&lt;EL, false&gt;\n\n\n<table><thead><tr><th>\n\nProperty\n\n\n</th><th>\n\nModifiers\n\n\n</th><th>\n\nType\n\n\n</th><th>\n\nDescription\n\n\n</th></tr></thead>\n<tbody><tr><td>\n\n[class?](#)\n\n\n</td><td>\n\n\n</td><td>\n\n[ClassList](#classlist) \\| undefined\n\n\n</td><td>\n\n_(Optional)_\n\n\n</td></tr>\n</tbody></table>",
      "editUrl": "https://github.com/QwikDev/qwik/tree/main/packages/qwik/src/core/render/jsx/types/jsx-qwik-attributes.ts",
      "mdFile": "qwik.qwikattributes.md"
    },
    {
      "name": "QwikChangeEvent",
      "id": "qwikchangeevent",
      "hierarchy": [
        {
          "name": "QwikChangeEvent",
          "id": "qwikchangeevent"
        }
      ],
      "kind": "TypeAlias",
      "content": "> Warning: This API is now obsolete.\n> \n> Use `Event` and use the second argument to the handler function for the current event target. Also note that in Qwik, onInput$ with the InputEvent is the event that behaves like onChange in React.\n> \n\n\n```typescript\nexport type QwikChangeEvent<T = Element> = Event;\n```",
      "editUrl": "https://github.com/QwikDev/qwik/tree/main/packages/qwik/src/core/render/jsx/types/jsx-qwik-events.ts",
      "mdFile": "qwik.qwikchangeevent.md"
    },
    {
      "name": "QwikClipboardEvent",
      "id": "qwikclipboardevent",
      "hierarchy": [
        {
          "name": "QwikClipboardEvent",
          "id": "qwikclipboardevent"
        }
      ],
      "kind": "TypeAlias",
      "content": "> Warning: This API is now obsolete.\n> \n> Use `ClipboardEvent` and use the second argument to the handler function for the current event target\n> \n\n\n```typescript\nexport type QwikClipboardEvent<T = Element> = NativeClipboardEvent;\n```\n**References:** [NativeClipboardEvent](#nativeclipboardevent)",
      "editUrl": "https://github.com/QwikDev/qwik/tree/main/packages/qwik/src/core/render/jsx/types/jsx-qwik-events.ts",
      "mdFile": "qwik.qwikclipboardevent.md"
    },
    {
      "name": "QwikCompositionEvent",
      "id": "qwikcompositionevent",
      "hierarchy": [
        {
          "name": "QwikCompositionEvent",
          "id": "qwikcompositionevent"
        }
      ],
      "kind": "TypeAlias",
      "content": "> Warning: This API is now obsolete.\n> \n> Use `CompositionEvent` and use the second argument to the handler function for the current event target\n> \n\n\n```typescript\nexport type QwikCompositionEvent<T = Element> = NativeCompositionEvent;\n```\n**References:** [NativeCompositionEvent](#nativecompositionevent)",
      "editUrl": "https://github.com/QwikDev/qwik/tree/main/packages/qwik/src/core/render/jsx/types/jsx-qwik-events.ts",
      "mdFile": "qwik.qwikcompositionevent.md"
    },
    {
      "name": "QwikDOMAttributes",
      "id": "qwikdomattributes",
      "hierarchy": [
        {
          "name": "QwikDOMAttributes",
          "id": "qwikdomattributes"
        }
      ],
      "kind": "Interface",
      "content": "```typescript\nexport interface QwikDOMAttributes extends DOMAttributes<Element> \n```\n**Extends:** [DOMAttributes](#domattributes)<!-- -->&lt;Element&gt;",
      "editUrl": "https://github.com/QwikDev/qwik/tree/main/packages/qwik/src/core/render/jsx/types/jsx-qwik.ts",
      "mdFile": "qwik.qwikdomattributes.md"
    },
    {
      "name": "QwikDragEvent",
      "id": "qwikdragevent",
      "hierarchy": [
        {
          "name": "QwikDragEvent",
          "id": "qwikdragevent"
        }
      ],
      "kind": "TypeAlias",
      "content": "> Warning: This API is now obsolete.\n> \n> Use `DragEvent` and use the second argument to the handler function for the current event target\n> \n\n\n```typescript\nexport type QwikDragEvent<T = Element> = NativeDragEvent;\n```\n**References:** [NativeDragEvent](#nativedragevent)",
      "editUrl": "https://github.com/QwikDev/qwik/tree/main/packages/qwik/src/core/render/jsx/types/jsx-qwik-events.ts",
      "mdFile": "qwik.qwikdragevent.md"
    },
    {
      "name": "QwikFocusEvent",
      "id": "qwikfocusevent",
      "hierarchy": [
        {
          "name": "QwikFocusEvent",
          "id": "qwikfocusevent"
        }
      ],
      "kind": "TypeAlias",
      "content": "> Warning: This API is now obsolete.\n> \n> Use `FocusEvent` and use the second argument to the handler function for the current event target\n> \n\n\n```typescript\nexport type QwikFocusEvent<T = Element> = NativeFocusEvent;\n```\n**References:** [NativeFocusEvent](#nativefocusevent)",
      "editUrl": "https://github.com/QwikDev/qwik/tree/main/packages/qwik/src/core/render/jsx/types/jsx-qwik-events.ts",
      "mdFile": "qwik.qwikfocusevent.md"
    },
    {
      "name": "QwikHTMLElements",
      "id": "qwikhtmlelements",
      "hierarchy": [
        {
          "name": "QwikHTMLElements",
          "id": "qwikhtmlelements"
        }
      ],
      "kind": "TypeAlias",
      "content": "The DOM props without plain handlers, for use inside functions\n\n\n```typescript\nexport type QwikHTMLElements = {\n    [tag in keyof HTMLElementTagNameMap]: Augmented<HTMLElementTagNameMap[tag], SpecialAttrs[tag]> & HTMLElementAttrs & QwikAttributes<HTMLElementTagNameMap[tag]>;\n};\n```\n**References:** [HTMLElementAttrs](#htmlelementattrs)<!-- -->, [QwikAttributes](#qwikattributes)",
      "editUrl": "https://github.com/QwikDev/qwik/tree/main/packages/qwik/src/core/render/jsx/types/jsx-generated.ts",
      "mdFile": "qwik.qwikhtmlelements.md"
    },
    {
      "name": "QwikIdleEvent",
      "id": "qwikidleevent",
      "hierarchy": [
        {
          "name": "QwikIdleEvent",
          "id": "qwikidleevent"
        }
      ],
      "kind": "TypeAlias",
      "content": "Emitted by qwik-loader on document when the document first becomes idle\n\n\n```typescript\nexport type QwikIdleEvent = CustomEvent<{}>;\n```",
      "editUrl": "https://github.com/QwikDev/qwik/tree/main/packages/qwik/src/core/render/jsx/types/jsx-qwik-events.ts",
      "mdFile": "qwik.qwikidleevent.md"
    },
    {
      "name": "QwikInitEvent",
      "id": "qwikinitevent",
      "hierarchy": [
        {
          "name": "QwikInitEvent",
          "id": "qwikinitevent"
        }
      ],
      "kind": "TypeAlias",
      "content": "Emitted by qwik-loader on document when the document first becomes interactive\n\n\n```typescript\nexport type QwikInitEvent = CustomEvent<{}>;\n```",
      "editUrl": "https://github.com/QwikDev/qwik/tree/main/packages/qwik/src/core/render/jsx/types/jsx-qwik-events.ts",
      "mdFile": "qwik.qwikinitevent.md"
    },
    {
      "name": "QwikIntrinsicElements",
      "id": "qwikintrinsicelements",
      "hierarchy": [
        {
          "name": "QwikIntrinsicElements",
          "id": "qwikintrinsicelements"
        }
      ],
      "kind": "Interface",
      "content": "The interface holds available attributes of both native DOM elements and custom Qwik elements. An example showing how to define a customizable wrapper component:\n\n```tsx\nimport { component$, Slot, type QwikIntrinsicElements } from \"@builder.io/qwik\";\n\ntype WrapperProps = {\n  attributes?: QwikIntrinsicElements[\"div\"];\n};\n\nexport default component$<WrapperProps>(({ attributes }) => {\n  return (\n    <div {...attributes} class=\"p-2\">\n      <Slot />\n    </div>\n  );\n});\n```\nNote: It is shorter to use `PropsOf<'div'>`\n\n\n```typescript\nexport interface QwikIntrinsicElements extends QwikHTMLElements, QwikSVGElements \n```\n**Extends:** [QwikHTMLElements](#qwikhtmlelements)<!-- -->, [QwikSVGElements](#qwiksvgelements)",
      "editUrl": "https://github.com/QwikDev/qwik/tree/main/packages/qwik/src/core/render/jsx/types/jsx-qwik-elements.ts",
      "mdFile": "qwik.qwikintrinsicelements.md"
    },
    {
      "name": "QwikInvalidEvent",
      "id": "qwikinvalidevent",
      "hierarchy": [
        {
          "name": "QwikInvalidEvent",
          "id": "qwikinvalidevent"
        }
      ],
      "kind": "TypeAlias",
      "content": "> Warning: This API is now obsolete.\n> \n> Use `Event` and use the second argument to the handler function for the current event target\n> \n\n\n```typescript\nexport type QwikInvalidEvent<T = Element> = Event;\n```",
      "editUrl": "https://github.com/QwikDev/qwik/tree/main/packages/qwik/src/core/render/jsx/types/jsx-qwik-events.ts",
      "mdFile": "qwik.qwikinvalidevent.md"
    },
    {
      "name": "QwikJSX",
      "id": "qwikjsx",
      "hierarchy": [
        {
          "name": "QwikJSX",
          "id": "qwikjsx"
        }
      ],
      "kind": "Namespace",
      "content": "```typescript\nexport declare namespace QwikJSX \n```\n\n\n<table><thead><tr><th>\n\nInterface\n\n\n</th><th>\n\nDescription\n\n\n</th></tr></thead>\n<tbody><tr><td>\n\n[ElementChildrenAttribute](#qwikjsx-elementchildrenattribute)\n\n\n</td><td>\n\n\n</td></tr>\n<tr><td>\n\n[IntrinsicAttributes](#qwikjsx-intrinsicattributes)\n\n\n</td><td>\n\n\n</td></tr>\n<tr><td>\n\n[IntrinsicElements](#)\n\n\n</td><td>\n\n\n</td></tr>\n</tbody></table>\n\n\n<table><thead><tr><th>\n\nType Alias\n\n\n</th><th>\n\nDescription\n\n\n</th></tr></thead>\n<tbody><tr><td>\n\n[Element](#qwikjsx-element)\n\n\n</td><td>\n\n\n</td></tr>\n<tr><td>\n\n[ElementType](#qwikjsx-elementtype)\n\n\n</td><td>\n\n\n</td></tr>\n</tbody></table>",
      "editUrl": "https://github.com/QwikDev/qwik/tree/main/packages/qwik/src/core/render/jsx/types/jsx-qwik.ts",
      "mdFile": "qwik.qwikjsx.md"
    },
    {
      "name": "QwikKeyboardEvent",
      "id": "qwikkeyboardevent",
      "hierarchy": [
        {
          "name": "QwikKeyboardEvent",
          "id": "qwikkeyboardevent"
        }
      ],
      "kind": "TypeAlias",
      "content": "> Warning: This API is now obsolete.\n> \n> Use `KeyboardEvent` and use the second argument to the handler function for the current event target\n> \n\n\n```typescript\nexport type QwikKeyboardEvent<T = Element> = NativeKeyboardEvent;\n```\n**References:** [NativeKeyboardEvent](#nativekeyboardevent)",
      "editUrl": "https://github.com/QwikDev/qwik/tree/main/packages/qwik/src/core/render/jsx/types/jsx-qwik-events.ts",
      "mdFile": "qwik.qwikkeyboardevent.md"
    },
    {
      "name": "QwikMouseEvent",
      "id": "qwikmouseevent",
      "hierarchy": [
        {
          "name": "QwikMouseEvent",
          "id": "qwikmouseevent"
        }
      ],
      "kind": "TypeAlias",
      "content": "> Warning: This API is now obsolete.\n> \n> Use `MouseEvent` and use the second argument to the handler function for the current event target\n> \n\n\n```typescript\nexport type QwikMouseEvent<T = Element, E = NativeMouseEvent> = E;\n```\n**References:** [NativeMouseEvent](#nativemouseevent)",
      "editUrl": "https://github.com/QwikDev/qwik/tree/main/packages/qwik/src/core/render/jsx/types/jsx-qwik-events.ts",
      "mdFile": "qwik.qwikmouseevent.md"
    },
    {
      "name": "QwikPointerEvent",
      "id": "qwikpointerevent",
      "hierarchy": [
        {
          "name": "QwikPointerEvent",
          "id": "qwikpointerevent"
        }
      ],
      "kind": "TypeAlias",
      "content": "> Warning: This API is now obsolete.\n> \n> Use `PointerEvent` and use the second argument to the handler function for the current event target\n> \n\n\n```typescript\nexport type QwikPointerEvent<T = Element> = NativePointerEvent;\n```\n**References:** [NativePointerEvent](#nativepointerevent)",
      "editUrl": "https://github.com/QwikDev/qwik/tree/main/packages/qwik/src/core/render/jsx/types/jsx-qwik-events.ts",
      "mdFile": "qwik.qwikpointerevent.md"
    },
    {
      "name": "QwikSubmitEvent",
      "id": "qwiksubmitevent",
      "hierarchy": [
        {
          "name": "QwikSubmitEvent",
          "id": "qwiksubmitevent"
        }
      ],
      "kind": "TypeAlias",
      "content": "> Warning: This API is now obsolete.\n> \n> Use `SubmitEvent` and use the second argument to the handler function for the current event target\n> \n\n\n```typescript\nexport type QwikSubmitEvent<T = Element> = SubmitEvent;\n```",
      "editUrl": "https://github.com/QwikDev/qwik/tree/main/packages/qwik/src/core/render/jsx/types/jsx-qwik-events.ts",
      "mdFile": "qwik.qwiksubmitevent.md"
    },
    {
      "name": "QwikSVGElements",
      "id": "qwiksvgelements",
      "hierarchy": [
        {
          "name": "QwikSVGElements",
          "id": "qwiksvgelements"
        }
      ],
      "kind": "TypeAlias",
      "content": "The SVG props without plain handlers, for use inside functions\n\n\n```typescript\nexport type QwikSVGElements = {\n    [K in keyof Omit<SVGElementTagNameMap, keyof HTMLElementTagNameMap>]: SVGProps<SVGElementTagNameMap[K]>;\n};\n```\n**References:** [SVGProps](#svgprops)",
      "editUrl": "https://github.com/QwikDev/qwik/tree/main/packages/qwik/src/core/render/jsx/types/jsx-generated.ts",
      "mdFile": "qwik.qwiksvgelements.md"
    },
    {
      "name": "QwikSymbolEvent",
      "id": "qwiksymbolevent",
      "hierarchy": [
        {
          "name": "QwikSymbolEvent",
          "id": "qwiksymbolevent"
        }
      ],
      "kind": "TypeAlias",
      "content": "Emitted by qwik-loader when a module was lazily loaded\n\n\n```typescript\nexport type QwikSymbolEvent = CustomEvent<{\n    symbol: string;\n    element: Element;\n    reqTime: number;\n}>;\n```",
      "editUrl": "https://github.com/QwikDev/qwik/tree/main/packages/qwik/src/core/render/jsx/types/jsx-qwik-events.ts",
      "mdFile": "qwik.qwiksymbolevent.md"
    },
    {
      "name": "QwikTouchEvent",
      "id": "qwiktouchevent",
      "hierarchy": [
        {
          "name": "QwikTouchEvent",
          "id": "qwiktouchevent"
        }
      ],
      "kind": "TypeAlias",
      "content": "> Warning: This API is now obsolete.\n> \n> Use `TouchEvent` and use the second argument to the handler function for the current event target\n> \n\n\n```typescript\nexport type QwikTouchEvent<T = Element> = NativeTouchEvent;\n```\n**References:** [NativeTouchEvent](#nativetouchevent)",
      "editUrl": "https://github.com/QwikDev/qwik/tree/main/packages/qwik/src/core/render/jsx/types/jsx-qwik-events.ts",
      "mdFile": "qwik.qwiktouchevent.md"
    },
    {
      "name": "QwikTransitionEvent",
      "id": "qwiktransitionevent",
      "hierarchy": [
        {
          "name": "QwikTransitionEvent",
          "id": "qwiktransitionevent"
        }
      ],
      "kind": "TypeAlias",
      "content": "> Warning: This API is now obsolete.\n> \n> Use `TransitionEvent` and use the second argument to the handler function for the current event target\n> \n\n\n```typescript\nexport type QwikTransitionEvent<T = Element> = NativeTransitionEvent;\n```\n**References:** [NativeTransitionEvent](#nativetransitionevent)",
      "editUrl": "https://github.com/QwikDev/qwik/tree/main/packages/qwik/src/core/render/jsx/types/jsx-qwik-events.ts",
      "mdFile": "qwik.qwiktransitionevent.md"
    },
    {
      "name": "QwikUIEvent",
      "id": "qwikuievent",
      "hierarchy": [
        {
          "name": "QwikUIEvent",
          "id": "qwikuievent"
        }
      ],
      "kind": "TypeAlias",
      "content": "> Warning: This API is now obsolete.\n> \n> Use `UIEvent` and use the second argument to the handler function for the current event target\n> \n\n\n```typescript\nexport type QwikUIEvent<T = Element> = NativeUIEvent;\n```\n**References:** [NativeUIEvent](#nativeuievent)",
      "editUrl": "https://github.com/QwikDev/qwik/tree/main/packages/qwik/src/core/render/jsx/types/jsx-qwik-events.ts",
      "mdFile": "qwik.qwikuievent.md"
    },
    {
      "name": "QwikVisibleEvent",
      "id": "qwikvisibleevent",
      "hierarchy": [
        {
          "name": "QwikVisibleEvent",
          "id": "qwikvisibleevent"
        }
      ],
      "kind": "TypeAlias",
      "content": "Emitted by qwik-loader when an element becomes visible. Used by `useVisibleTask$`\n\n\n```typescript\nexport type QwikVisibleEvent = CustomEvent<IntersectionObserverEntry>;\n```",
      "editUrl": "https://github.com/QwikDev/qwik/tree/main/packages/qwik/src/core/render/jsx/types/jsx-qwik-events.ts",
      "mdFile": "qwik.qwikvisibleevent.md"
    },
    {
      "name": "QwikWheelEvent",
      "id": "qwikwheelevent",
      "hierarchy": [
        {
          "name": "QwikWheelEvent",
          "id": "qwikwheelevent"
        }
      ],
      "kind": "TypeAlias",
      "content": "> Warning: This API is now obsolete.\n> \n> Use `WheelEvent` and use the second argument to the handler function for the current event target\n> \n\n\n```typescript\nexport type QwikWheelEvent<T = Element> = NativeWheelEvent;\n```\n**References:** [NativeWheelEvent](#nativewheelevent)",
      "editUrl": "https://github.com/QwikDev/qwik/tree/main/packages/qwik/src/core/render/jsx/types/jsx-qwik-events.ts",
      "mdFile": "qwik.qwikwheelevent.md"
    },
    {
      "name": "ReadonlySignal",
      "id": "readonlysignal",
      "hierarchy": [
        {
          "name": "ReadonlySignal",
          "id": "readonlysignal"
        }
      ],
      "kind": "TypeAlias",
      "content": "```typescript\nexport type ReadonlySignal<T = unknown> = Readonly<Signal<T>>;\n```\n**References:** [Signal](#signal)",
      "editUrl": "https://github.com/QwikDev/qwik/tree/main/packages/qwik/src/core/state/signal.ts",
      "mdFile": "qwik.readonlysignal.md"
    },
    {
      "name": "render",
      "id": "render",
      "hierarchy": [
        {
          "name": "render",
          "id": "render"
        }
      ],
      "kind": "Function",
      "content": "Render JSX.\n\nUse this method to render JSX. This function does reconciling which means it always tries to reuse what is already in the DOM (rather then destroy and recreate content.) It returns a cleanup function you could use for cleaning up subscriptions.\n\n\n```typescript\nrender: (parent: Element | Document, jsxOutput: JSXOutput | FunctionComponent<any>, opts?: RenderOptions) => Promise<RenderResult>\n```\n\n\n<table><thead><tr><th>\n\nParameter\n\n\n</th><th>\n\nType\n\n\n</th><th>\n\nDescription\n\n\n</th></tr></thead>\n<tbody><tr><td>\n\nparent\n\n\n</td><td>\n\nElement \\| Document\n\n\n</td><td>\n\nElement which will act as a parent to `jsxNode`<!-- -->. When possible the rendering will try to reuse existing nodes.\n\n\n</td></tr>\n<tr><td>\n\njsxOutput\n\n\n</td><td>\n\n[JSXOutput](#jsxoutput) \\| [FunctionComponent](#functioncomponent)<!-- -->&lt;any&gt;\n\n\n</td><td>\n\nJSX to render\n\n\n</td></tr>\n<tr><td>\n\nopts\n\n\n</td><td>\n\n[RenderOptions](#renderoptions)\n\n\n</td><td>\n\n_(Optional)_\n\n\n</td></tr>\n</tbody></table>\n**Returns:**\n\nPromise&lt;[RenderResult](#renderresult)<!-- -->&gt;\n\nAn object containing a cleanup function.",
      "editUrl": "https://github.com/QwikDev/qwik/tree/main/packages/qwik/src/core/render/dom/render.public.ts",
      "mdFile": "qwik.render.md"
    },
    {
      "name": "RenderOnce",
      "id": "renderonce",
      "hierarchy": [
        {
          "name": "RenderOnce",
          "id": "renderonce"
        }
      ],
      "kind": "Variable",
      "content": "```typescript\nRenderOnce: FunctionComponent<{\n    children?: unknown;\n    key?: string | number | null | undefined;\n}>\n```",
      "editUrl": "https://github.com/QwikDev/qwik/tree/main/packages/qwik/src/core/render/jsx/jsx-runtime.ts",
      "mdFile": "qwik.renderonce.md"
    },
    {
      "name": "RenderOptions",
      "id": "renderoptions",
      "hierarchy": [
        {
          "name": "RenderOptions",
          "id": "renderoptions"
        }
      ],
      "kind": "Interface",
      "content": "```typescript\nexport interface RenderOptions \n```\n\n\n<table><thead><tr><th>\n\nProperty\n\n\n</th><th>\n\nModifiers\n\n\n</th><th>\n\nType\n\n\n</th><th>\n\nDescription\n\n\n</th></tr></thead>\n<tbody><tr><td>\n\n[serverData?](#)\n\n\n</td><td>\n\n\n</td><td>\n\nRecord&lt;string, any&gt;\n\n\n</td><td>\n\n_(Optional)_\n\n\n</td></tr>\n</tbody></table>",
      "editUrl": "https://github.com/QwikDev/qwik/tree/main/packages/qwik/src/core/render/dom/render.public.ts",
      "mdFile": "qwik.renderoptions.md"
    },
    {
      "name": "RenderResult",
      "id": "renderresult",
      "hierarchy": [
        {
          "name": "RenderResult",
          "id": "renderresult"
        }
      ],
      "kind": "Interface",
      "content": "```typescript\nexport interface RenderResult \n```\n\n\n<table><thead><tr><th>\n\nMethod\n\n\n</th><th>\n\nDescription\n\n\n</th></tr></thead>\n<tbody><tr><td>\n\n[cleanup()](#renderresult-cleanup)\n\n\n</td><td>\n\n\n</td></tr>\n</tbody></table>",
      "editUrl": "https://github.com/QwikDev/qwik/tree/main/packages/qwik/src/core/render/dom/render.public.ts",
      "mdFile": "qwik.renderresult.md"
    },
    {
      "name": "RenderSSROptions",
      "id": "renderssroptions",
      "hierarchy": [
        {
          "name": "RenderSSROptions",
          "id": "renderssroptions"
        }
      ],
      "kind": "Interface",
      "content": "```typescript\nexport interface RenderSSROptions \n```\n\n\n<table><thead><tr><th>\n\nProperty\n\n\n</th><th>\n\nModifiers\n\n\n</th><th>\n\nType\n\n\n</th><th>\n\nDescription\n\n\n</th></tr></thead>\n<tbody><tr><td>\n\n[base?](#)\n\n\n</td><td>\n\n\n</td><td>\n\nstring\n\n\n</td><td>\n\n_(Optional)_\n\n\n</td></tr>\n<tr><td>\n\n[beforeClose?](#)\n\n\n</td><td>\n\n\n</td><td>\n\n(contexts: QContext\\[\\], containerState: ContainerState, containsDynamic: boolean, textNodes: Map&lt;string, string&gt;) =&gt; Promise&lt;[JSXNode](#jsxnode)<!-- -->&gt;\n\n\n</td><td>\n\n_(Optional)_\n\n\n</td></tr>\n<tr><td>\n\n[beforeContent?](#)\n\n\n</td><td>\n\n\n</td><td>\n\n[JSXNode](#jsxnode)<!-- -->&lt;string&gt;\\[\\]\n\n\n</td><td>\n\n_(Optional)_\n\n\n</td></tr>\n<tr><td>\n\n[containerAttributes](#)\n\n\n</td><td>\n\n\n</td><td>\n\nRecord&lt;string, string&gt;\n\n\n</td><td>\n\n\n</td></tr>\n<tr><td>\n\n[containerTagName](#)\n\n\n</td><td>\n\n\n</td><td>\n\nstring\n\n\n</td><td>\n\n\n</td></tr>\n<tr><td>\n\n[manifestHash](#)\n\n\n</td><td>\n\n\n</td><td>\n\nstring\n\n\n</td><td>\n\n\n</td></tr>\n<tr><td>\n\n[serverData?](#)\n\n\n</td><td>\n\n\n</td><td>\n\nRecord&lt;string, any&gt;\n\n\n</td><td>\n\n_(Optional)_\n\n\n</td></tr>\n<tr><td>\n\n[stream](#)\n\n\n</td><td>\n\n\n</td><td>\n\n[StreamWriter](#streamwriter)\n\n\n</td><td>\n\n\n</td></tr>\n</tbody></table>",
      "editUrl": "https://github.com/QwikDev/qwik/tree/main/packages/qwik/src/core/render/ssr/render-ssr.ts",
      "mdFile": "qwik.renderssroptions.md"
    },
    {
      "name": "Resource",
      "id": "resource",
      "hierarchy": [
        {
          "name": "Resource",
          "id": "resource"
        }
      ],
      "kind": "Function",
      "content": "This method works like an async memoized function that runs whenever some tracked value changes and returns some data.\n\n`useResource` however returns immediate a `ResourceReturn` object that contains the data and a state that indicates if the data is available or not.\n\nThe status can be one of the following:\n\n- 'pending' - the data is not yet available. - 'resolved' - the data is available. - 'rejected' - the data is not available due to an error or timeout.\n\n\\#\\#\\# Example\n\nExample showing how `useResource` to perform a fetch to request the weather, whenever the input city name changes.\n\n```tsx\nconst Cmp = component$(() => {\n  const cityS = useSignal('');\n\n  const weatherResource = useResource$(async ({ track, cleanup }) => {\n    const cityName = track(cityS);\n    const abortController = new AbortController();\n    cleanup(() => abortController.abort('cleanup'));\n    const res = await fetch(`http://weatherdata.com?city=${cityName}`, {\n      signal: abortController.signal,\n    });\n    const data = await res.json();\n    return data as { temp: number };\n  });\n\n  return (\n    <div>\n      <input name=\"city\" bind:value={cityS} />\n      <Resource\n        value={weatherResource}\n        onResolved={(weather) => {\n          return <div>Temperature: {weather.temp}</div>;\n        }}\n      />\n    </div>\n  );\n});\n```\n\n\n```typescript\nResource: <T>(props: ResourceProps<T>) => JSXOutput\n```\n\n\n<table><thead><tr><th>\n\nParameter\n\n\n</th><th>\n\nType\n\n\n</th><th>\n\nDescription\n\n\n</th></tr></thead>\n<tbody><tr><td>\n\nprops\n\n\n</td><td>\n\n[ResourceProps](#resourceprops)<!-- -->&lt;T&gt;\n\n\n</td><td>\n\n\n</td></tr>\n</tbody></table>\n**Returns:**\n\n[JSXOutput](#jsxoutput)",
      "editUrl": "https://github.com/QwikDev/qwik/tree/main/packages/qwik/src/core/use/use-resource.ts",
      "mdFile": "qwik.resource.md"
    },
    {
      "name": "ResourceCtx",
      "id": "resourcectx",
      "hierarchy": [
        {
          "name": "ResourceCtx",
          "id": "resourcectx"
        }
      ],
      "kind": "Interface",
      "content": "```typescript\nexport interface ResourceCtx<T> \n```\n\n\n<table><thead><tr><th>\n\nProperty\n\n\n</th><th>\n\nModifiers\n\n\n</th><th>\n\nType\n\n\n</th><th>\n\nDescription\n\n\n</th></tr></thead>\n<tbody><tr><td>\n\n[previous](#)\n\n\n</td><td>\n\n`readonly`\n\n\n</td><td>\n\nT \\| undefined\n\n\n</td><td>\n\n\n</td></tr>\n<tr><td>\n\n[track](#)\n\n\n</td><td>\n\n`readonly`\n\n\n</td><td>\n\n[Tracker](#tracker)\n\n\n</td><td>\n\n\n</td></tr>\n</tbody></table>\n\n\n<table><thead><tr><th>\n\nMethod\n\n\n</th><th>\n\nDescription\n\n\n</th></tr></thead>\n<tbody><tr><td>\n\n[cache(policyOrMilliseconds)](#resourcectx-cache)\n\n\n</td><td>\n\n\n</td></tr>\n<tr><td>\n\n[cleanup(callback)](#)\n\n\n</td><td>\n\n\n</td></tr>\n</tbody></table>",
      "editUrl": "https://github.com/QwikDev/qwik/tree/main/packages/qwik/src/core/use/use-task.ts",
      "mdFile": "qwik.resourcectx.md"
    },
    {
      "name": "ResourceFn",
      "id": "resourcefn",
      "hierarchy": [
        {
          "name": "ResourceFn",
          "id": "resourcefn"
        }
      ],
      "kind": "TypeAlias",
      "content": "```typescript\nexport type ResourceFn<T> = (ctx: ResourceCtx<unknown>) => ValueOrPromise<T>;\n```\n**References:** [ResourceCtx](#resourcectx)<!-- -->, [ValueOrPromise](#valueorpromise)",
      "editUrl": "https://github.com/QwikDev/qwik/tree/main/packages/qwik/src/core/use/use-task.ts",
      "mdFile": "qwik.resourcefn.md"
    },
    {
      "name": "ResourceOptions",
      "id": "resourceoptions",
      "hierarchy": [
        {
          "name": "ResourceOptions",
          "id": "resourceoptions"
        }
      ],
      "kind": "Interface",
      "content": "Options to pass to `useResource$()`\n\n\n```typescript\nexport interface ResourceOptions \n```\n\n\n<table><thead><tr><th>\n\nProperty\n\n\n</th><th>\n\nModifiers\n\n\n</th><th>\n\nType\n\n\n</th><th>\n\nDescription\n\n\n</th></tr></thead>\n<tbody><tr><td>\n\n[timeout?](#)\n\n\n</td><td>\n\n\n</td><td>\n\nnumber\n\n\n</td><td>\n\n_(Optional)_ Timeout in milliseconds. If the resource takes more than the specified millisecond, it will timeout. Resulting on a rejected resource.\n\n\n</td></tr>\n</tbody></table>",
      "editUrl": "https://github.com/QwikDev/qwik/tree/main/packages/qwik/src/core/use/use-resource.ts",
      "mdFile": "qwik.resourceoptions.md"
    },
    {
      "name": "ResourcePending",
      "id": "resourcepending",
      "hierarchy": [
        {
          "name": "ResourcePending",
          "id": "resourcepending"
        }
      ],
      "kind": "Interface",
      "content": "```typescript\nexport interface ResourcePending<T> \n```\n\n\n<table><thead><tr><th>\n\nProperty\n\n\n</th><th>\n\nModifiers\n\n\n</th><th>\n\nType\n\n\n</th><th>\n\nDescription\n\n\n</th></tr></thead>\n<tbody><tr><td>\n\n[loading](#)\n\n\n</td><td>\n\n`readonly`\n\n\n</td><td>\n\nboolean\n\n\n</td><td>\n\n\n</td></tr>\n<tr><td>\n\n[value](#)\n\n\n</td><td>\n\n`readonly`\n\n\n</td><td>\n\nPromise&lt;T&gt;\n\n\n</td><td>\n\n\n</td></tr>\n</tbody></table>",
      "editUrl": "https://github.com/QwikDev/qwik/tree/main/packages/qwik/src/core/use/use-task.ts",
      "mdFile": "qwik.resourcepending.md"
    },
    {
      "name": "ResourceProps",
      "id": "resourceprops",
      "hierarchy": [
        {
          "name": "ResourceProps",
          "id": "resourceprops"
        }
      ],
      "kind": "Interface",
      "content": "```typescript\nexport interface ResourceProps<T> \n```\n\n\n<table><thead><tr><th>\n\nProperty\n\n\n</th><th>\n\nModifiers\n\n\n</th><th>\n\nType\n\n\n</th><th>\n\nDescription\n\n\n</th></tr></thead>\n<tbody><tr><td>\n\n[onPending?](#)\n\n\n</td><td>\n\n\n</td><td>\n\n() =&gt; [JSXOutput](#jsxoutput)\n\n\n</td><td>\n\n_(Optional)_\n\n\n</td></tr>\n<tr><td>\n\n[onRejected?](#)\n\n\n</td><td>\n\n\n</td><td>\n\n(reason: Error) =&gt; [JSXOutput](#jsxoutput)\n\n\n</td><td>\n\n_(Optional)_\n\n\n</td></tr>\n<tr><td>\n\n[onResolved](#)\n\n\n</td><td>\n\n\n</td><td>\n\n(value: T) =&gt; [JSXOutput](#jsxoutput)\n\n\n</td><td>\n\n\n</td></tr>\n<tr><td>\n\n[value](#)\n\n\n</td><td>\n\n`readonly`\n\n\n</td><td>\n\n[ResourceReturn](#resourcereturn)<!-- -->&lt;T&gt; \\| [Signal](#signal)<!-- -->&lt;Promise&lt;T&gt; \\| T&gt; \\| Promise&lt;T&gt;\n\n\n</td><td>\n\n\n</td></tr>\n</tbody></table>",
      "editUrl": "https://github.com/QwikDev/qwik/tree/main/packages/qwik/src/core/use/use-resource.ts",
      "mdFile": "qwik.resourceprops.md"
    },
    {
      "name": "ResourceRejected",
      "id": "resourcerejected",
      "hierarchy": [
        {
          "name": "ResourceRejected",
          "id": "resourcerejected"
        }
      ],
      "kind": "Interface",
      "content": "```typescript\nexport interface ResourceRejected<T> \n```\n\n\n<table><thead><tr><th>\n\nProperty\n\n\n</th><th>\n\nModifiers\n\n\n</th><th>\n\nType\n\n\n</th><th>\n\nDescription\n\n\n</th></tr></thead>\n<tbody><tr><td>\n\n[loading](#)\n\n\n</td><td>\n\n`readonly`\n\n\n</td><td>\n\nboolean\n\n\n</td><td>\n\n\n</td></tr>\n<tr><td>\n\n[value](#)\n\n\n</td><td>\n\n`readonly`\n\n\n</td><td>\n\nPromise&lt;T&gt;\n\n\n</td><td>\n\n\n</td></tr>\n</tbody></table>",
      "editUrl": "https://github.com/QwikDev/qwik/tree/main/packages/qwik/src/core/use/use-task.ts",
      "mdFile": "qwik.resourcerejected.md"
    },
    {
      "name": "ResourceResolved",
      "id": "resourceresolved",
      "hierarchy": [
        {
          "name": "ResourceResolved",
          "id": "resourceresolved"
        }
      ],
      "kind": "Interface",
      "content": "```typescript\nexport interface ResourceResolved<T> \n```\n\n\n<table><thead><tr><th>\n\nProperty\n\n\n</th><th>\n\nModifiers\n\n\n</th><th>\n\nType\n\n\n</th><th>\n\nDescription\n\n\n</th></tr></thead>\n<tbody><tr><td>\n\n[loading](#)\n\n\n</td><td>\n\n`readonly`\n\n\n</td><td>\n\nboolean\n\n\n</td><td>\n\n\n</td></tr>\n<tr><td>\n\n[value](#)\n\n\n</td><td>\n\n`readonly`\n\n\n</td><td>\n\nPromise&lt;T&gt;\n\n\n</td><td>\n\n\n</td></tr>\n</tbody></table>",
      "editUrl": "https://github.com/QwikDev/qwik/tree/main/packages/qwik/src/core/use/use-task.ts",
      "mdFile": "qwik.resourceresolved.md"
    },
    {
      "name": "ResourceReturn",
      "id": "resourcereturn",
      "hierarchy": [
        {
          "name": "ResourceReturn",
          "id": "resourcereturn"
        }
      ],
      "kind": "TypeAlias",
      "content": "```typescript\nexport type ResourceReturn<T> = ResourcePending<T> | ResourceResolved<T> | ResourceRejected<T>;\n```\n**References:** [ResourcePending](#resourcepending)<!-- -->, [ResourceResolved](#resourceresolved)<!-- -->, [ResourceRejected](#resourcerejected)",
      "editUrl": "https://github.com/QwikDev/qwik/tree/main/packages/qwik/src/core/use/use-task.ts",
      "mdFile": "qwik.resourcereturn.md"
    },
    {
      "name": "ScriptHTMLAttributes",
      "id": "scripthtmlattributes",
      "hierarchy": [
        {
          "name": "ScriptHTMLAttributes",
          "id": "scripthtmlattributes"
        }
      ],
      "kind": "Interface",
      "content": "```typescript\nexport interface ScriptHTMLAttributes<T extends Element> extends Attrs<'script', T> \n```\n**Extends:** Attrs&lt;'script', T&gt;",
      "editUrl": "https://github.com/QwikDev/qwik/tree/main/packages/qwik/src/core/render/jsx/types/jsx-generated.ts",
      "mdFile": "qwik.scripthtmlattributes.md"
    },
    {
      "name": "SelectHTMLAttributes",
      "id": "selecthtmlattributes",
      "hierarchy": [
        {
          "name": "SelectHTMLAttributes",
          "id": "selecthtmlattributes"
        }
      ],
      "kind": "Interface",
      "content": "```typescript\nexport interface SelectHTMLAttributes<T extends Element> extends Attrs<'select', T> \n```\n**Extends:** Attrs&lt;'select', T&gt;",
      "editUrl": "https://github.com/QwikDev/qwik/tree/main/packages/qwik/src/core/render/jsx/types/jsx-generated.ts",
      "mdFile": "qwik.selecthtmlattributes.md"
    },
    {
      "name": "setPlatform",
      "id": "setplatform",
      "hierarchy": [
        {
          "name": "setPlatform",
          "id": "setplatform"
        }
      ],
      "kind": "Function",
      "content": "Sets the `CorePlatform`<!-- -->.\n\nThis is useful to override the platform in tests to change the behavior of, `requestAnimationFrame`<!-- -->, and import resolution.\n\n\n```typescript\nsetPlatform: (plt: CorePlatform) => CorePlatform\n```\n\n\n<table><thead><tr><th>\n\nParameter\n\n\n</th><th>\n\nType\n\n\n</th><th>\n\nDescription\n\n\n</th></tr></thead>\n<tbody><tr><td>\n\nplt\n\n\n</td><td>\n\n[CorePlatform](#coreplatform)\n\n\n</td><td>\n\n\n</td></tr>\n</tbody></table>\n**Returns:**\n\n[CorePlatform](#coreplatform)",
      "editUrl": "https://github.com/QwikDev/qwik/tree/main/packages/qwik/src/core/platform/platform.ts",
      "mdFile": "qwik.setplatform.md"
    },
    {
      "name": "Signal",
      "id": "signal",
      "hierarchy": [
        {
          "name": "Signal",
          "id": "signal"
        }
      ],
      "kind": "Interface",
      "content": "A signal is a reactive value which can be read and written. When the signal is written, all tasks which are tracking the signal will be re-run and all components that read the signal will be re-rendered.\n\nFurthermore, when a signal value is passed as a prop to a component, the optimizer will automatically forward the signal. This means that `return <div title={signal.value}>hi</div>` will update the `title` attribute when the signal changes without having to re-render the component.\n\n\n```typescript\nexport interface Signal<T = any> \n```\n\n\n<table><thead><tr><th>\n\nProperty\n\n\n</th><th>\n\nModifiers\n\n\n</th><th>\n\nType\n\n\n</th><th>\n\nDescription\n\n\n</th></tr></thead>\n<tbody><tr><td>\n\n[value](#)\n\n\n</td><td>\n\n\n</td><td>\n\nT\n\n\n</td><td>\n\n\n</td></tr>\n</tbody></table>",
      "editUrl": "https://github.com/QwikDev/qwik/tree/main/packages/qwik/src/core/state/signal.ts",
      "mdFile": "qwik.signal.md"
    },
    {
      "name": "Size",
      "id": "size",
      "hierarchy": [
        {
          "name": "Size",
          "id": "size"
        }
      ],
      "kind": "TypeAlias",
      "content": "```typescript\nexport type Size = number | string;\n```",
      "editUrl": "https://github.com/QwikDev/qwik/tree/main/packages/qwik/src/core/render/jsx/types/jsx-generated.ts",
      "mdFile": "qwik.size.md"
    },
    {
      "name": "SkipRender",
      "id": "skiprender",
      "hierarchy": [
        {
          "name": "SkipRender",
          "id": "skiprender"
        }
      ],
      "kind": "Variable",
      "content": "```typescript\nSkipRender: JSXNode\n```",
      "editUrl": "https://github.com/QwikDev/qwik/tree/main/packages/qwik/src/core/render/jsx/utils.public.ts",
      "mdFile": "qwik.skiprender.md"
    },
    {
      "name": "Slot",
      "id": "slot",
      "hierarchy": [
        {
          "name": "Slot",
          "id": "slot"
        }
      ],
      "kind": "Variable",
      "content": "Allows to project the children of the current component. <Slot/> can only be used within the context of a component defined with `component$`<!-- -->.\n\n\n```typescript\nSlot: FunctionComponent<{\n    name?: string;\n}>\n```",
      "editUrl": "https://github.com/QwikDev/qwik/tree/main/packages/qwik/src/core/render/jsx/slot.public.ts",
      "mdFile": "qwik.slot.md"
    },
    {
      "name": "SlotHTMLAttributes",
      "id": "slothtmlattributes",
      "hierarchy": [
        {
          "name": "SlotHTMLAttributes",
          "id": "slothtmlattributes"
        }
      ],
      "kind": "Interface",
      "content": "```typescript\nexport interface SlotHTMLAttributes<T extends Element> extends Attrs<'slot', T> \n```\n**Extends:** Attrs&lt;'slot', T&gt;",
      "editUrl": "https://github.com/QwikDev/qwik/tree/main/packages/qwik/src/core/render/jsx/types/jsx-generated.ts",
      "mdFile": "qwik.slothtmlattributes.md"
    },
    {
      "name": "SnapshotListener",
      "id": "snapshotlistener",
      "hierarchy": [
        {
          "name": "SnapshotListener",
          "id": "snapshotlistener"
        }
      ],
      "kind": "Interface",
      "content": "```typescript\nexport interface SnapshotListener \n```\n\n\n<table><thead><tr><th>\n\nProperty\n\n\n</th><th>\n\nModifiers\n\n\n</th><th>\n\nType\n\n\n</th><th>\n\nDescription\n\n\n</th></tr></thead>\n<tbody><tr><td>\n\n[el](#)\n\n\n</td><td>\n\n\n</td><td>\n\nElement\n\n\n</td><td>\n\n\n</td></tr>\n<tr><td>\n\n[key](#)\n\n\n</td><td>\n\n\n</td><td>\n\nstring\n\n\n</td><td>\n\n\n</td></tr>\n<tr><td>\n\n[qrl](#)\n\n\n</td><td>\n\n\n</td><td>\n\n[QRL](#qrl)<!-- -->&lt;any&gt;\n\n\n</td><td>\n\n\n</td></tr>\n</tbody></table>",
      "editUrl": "https://github.com/QwikDev/qwik/tree/main/packages/qwik/src/core/container/container.ts",
      "mdFile": "qwik.snapshotlistener.md"
    },
    {
      "name": "SnapshotMeta",
      "id": "snapshotmeta",
      "hierarchy": [
        {
          "name": "SnapshotMeta",
          "id": "snapshotmeta"
        }
      ],
      "kind": "TypeAlias",
      "content": "```typescript\nexport type SnapshotMeta = Record<string, SnapshotMetaValue>;\n```\n**References:** [SnapshotMetaValue](#snapshotmetavalue)",
      "editUrl": "https://github.com/QwikDev/qwik/tree/main/packages/qwik/src/core/container/container.ts",
      "mdFile": "qwik.snapshotmeta.md"
    },
    {
      "name": "SnapshotMetaValue",
      "id": "snapshotmetavalue",
      "hierarchy": [
        {
          "name": "SnapshotMetaValue",
          "id": "snapshotmetavalue"
        }
      ],
      "kind": "Interface",
      "content": "```typescript\nexport interface SnapshotMetaValue \n```\n\n\n<table><thead><tr><th>\n\nProperty\n\n\n</th><th>\n\nModifiers\n\n\n</th><th>\n\nType\n\n\n</th><th>\n\nDescription\n\n\n</th></tr></thead>\n<tbody><tr><td>\n\n[c?](#)\n\n\n</td><td>\n\n\n</td><td>\n\nstring\n\n\n</td><td>\n\n_(Optional)_\n\n\n</td></tr>\n<tr><td>\n\n[h?](#)\n\n\n</td><td>\n\n\n</td><td>\n\nstring\n\n\n</td><td>\n\n_(Optional)_\n\n\n</td></tr>\n<tr><td>\n\n[s?](#)\n\n\n</td><td>\n\n\n</td><td>\n\nstring\n\n\n</td><td>\n\n_(Optional)_\n\n\n</td></tr>\n<tr><td>\n\n[w?](#)\n\n\n</td><td>\n\n\n</td><td>\n\nstring\n\n\n</td><td>\n\n_(Optional)_\n\n\n</td></tr>\n</tbody></table>",
      "editUrl": "https://github.com/QwikDev/qwik/tree/main/packages/qwik/src/core/container/container.ts",
      "mdFile": "qwik.snapshotmetavalue.md"
    },
    {
      "name": "SnapshotResult",
      "id": "snapshotresult",
      "hierarchy": [
        {
          "name": "SnapshotResult",
          "id": "snapshotresult"
        }
      ],
      "kind": "Interface",
      "content": "```typescript\nexport interface SnapshotResult \n```\n\n\n<table><thead><tr><th>\n\nProperty\n\n\n</th><th>\n\nModifiers\n\n\n</th><th>\n\nType\n\n\n</th><th>\n\nDescription\n\n\n</th></tr></thead>\n<tbody><tr><td>\n\n[funcs](#)\n\n\n</td><td>\n\n\n</td><td>\n\nstring\\[\\]\n\n\n</td><td>\n\n\n</td></tr>\n<tr><td>\n\n[mode](#)\n\n\n</td><td>\n\n\n</td><td>\n\n'render' \\| 'listeners' \\| 'static'\n\n\n</td><td>\n\n\n</td></tr>\n<tr><td>\n\n[objs](#)\n\n\n</td><td>\n\n\n</td><td>\n\nany\\[\\]\n\n\n</td><td>\n\n\n</td></tr>\n<tr><td>\n\n[qrls](#)\n\n\n</td><td>\n\n\n</td><td>\n\n[QRL](#qrl)<!-- -->\\[\\]\n\n\n</td><td>\n\n\n</td></tr>\n<tr><td>\n\n[resources](#)\n\n\n</td><td>\n\n\n</td><td>\n\nResourceReturnInternal&lt;any&gt;\\[\\]\n\n\n</td><td>\n\n\n</td></tr>\n<tr><td>\n\n[state](#)\n\n\n</td><td>\n\n\n</td><td>\n\n[SnapshotState](#snapshotstate)\n\n\n</td><td>\n\n\n</td></tr>\n</tbody></table>",
      "editUrl": "https://github.com/QwikDev/qwik/tree/main/packages/qwik/src/core/container/container.ts",
      "mdFile": "qwik.snapshotresult.md"
    },
    {
      "name": "SnapshotState",
      "id": "snapshotstate",
      "hierarchy": [
        {
          "name": "SnapshotState",
          "id": "snapshotstate"
        }
      ],
      "kind": "Interface",
      "content": "```typescript\nexport interface SnapshotState \n```\n\n\n<table><thead><tr><th>\n\nProperty\n\n\n</th><th>\n\nModifiers\n\n\n</th><th>\n\nType\n\n\n</th><th>\n\nDescription\n\n\n</th></tr></thead>\n<tbody><tr><td>\n\n[ctx](#)\n\n\n</td><td>\n\n\n</td><td>\n\n[SnapshotMeta](#snapshotmeta)\n\n\n</td><td>\n\n\n</td></tr>\n<tr><td>\n\n[objs](#)\n\n\n</td><td>\n\n\n</td><td>\n\nany\\[\\]\n\n\n</td><td>\n\n\n</td></tr>\n<tr><td>\n\n[refs](#)\n\n\n</td><td>\n\n\n</td><td>\n\nRecord&lt;string, string&gt;\n\n\n</td><td>\n\n\n</td></tr>\n<tr><td>\n\n[subs](#)\n\n\n</td><td>\n\n\n</td><td>\n\nany\\[\\]\n\n\n</td><td>\n\n\n</td></tr>\n</tbody></table>",
      "editUrl": "https://github.com/QwikDev/qwik/tree/main/packages/qwik/src/core/container/container.ts",
      "mdFile": "qwik.snapshotstate.md"
    },
    {
      "name": "SourceHTMLAttributes",
      "id": "sourcehtmlattributes",
      "hierarchy": [
        {
          "name": "SourceHTMLAttributes",
          "id": "sourcehtmlattributes"
        }
      ],
      "kind": "Interface",
      "content": "```typescript\nexport interface SourceHTMLAttributes<T extends Element> extends Attrs<'source', T> \n```\n**Extends:** Attrs&lt;'source', T&gt;",
      "editUrl": "https://github.com/QwikDev/qwik/tree/main/packages/qwik/src/core/render/jsx/types/jsx-generated.ts",
      "mdFile": "qwik.sourcehtmlattributes.md"
    },
    {
      "name": "SSRComment",
      "id": "ssrcomment",
      "hierarchy": [
        {
          "name": "SSRComment",
          "id": "ssrcomment"
        }
      ],
      "kind": "Variable",
      "content": "```typescript\nSSRComment: FunctionComponent<{\n    data: string;\n}>\n```",
      "editUrl": "https://github.com/QwikDev/qwik/tree/main/packages/qwik/src/core/render/jsx/utils.public.ts",
      "mdFile": "qwik.ssrcomment.md"
    },
    {
      "name": "SSRHint",
      "id": "ssrhint",
      "hierarchy": [
        {
          "name": "SSRHint",
          "id": "ssrhint"
        }
      ],
      "kind": "Variable",
      "content": "> Warning: This API is now obsolete.\n> \n> - It has no effect\n> \n\n\n```typescript\nSSRHint: FunctionComponent<SSRHintProps>\n```",
      "editUrl": "https://github.com/QwikDev/qwik/tree/main/packages/qwik/src/core/render/jsx/utils.public.ts",
      "mdFile": "qwik.ssrhint.md"
    },
    {
      "name": "SSRHintProps",
      "id": "ssrhintprops",
      "hierarchy": [
        {
          "name": "SSRHintProps",
          "id": "ssrhintprops"
        }
      ],
      "kind": "TypeAlias",
      "content": "```typescript\nexport type SSRHintProps = {\n    dynamic?: boolean;\n};\n```",
      "editUrl": "https://github.com/QwikDev/qwik/tree/main/packages/qwik/src/core/render/jsx/utils.public.ts",
      "mdFile": "qwik.ssrhintprops.md"
    },
    {
      "name": "SSRRaw",
      "id": "ssrraw",
      "hierarchy": [
        {
          "name": "SSRRaw",
          "id": "ssrraw"
        }
      ],
      "kind": "Variable",
      "content": "```typescript\nSSRRaw: FunctionComponent<{\n    data: string;\n}>\n```",
      "editUrl": "https://github.com/QwikDev/qwik/tree/main/packages/qwik/src/core/render/jsx/utils.public.ts",
      "mdFile": "qwik.ssrraw.md"
    },
    {
      "name": "SSRStream",
      "id": "ssrstream",
      "hierarchy": [
        {
          "name": "SSRStream",
          "id": "ssrstream"
        }
      ],
      "kind": "Variable",
      "content": "```typescript\nSSRStream: FunctionComponent<SSRStreamProps>\n```",
      "editUrl": "https://github.com/QwikDev/qwik/tree/main/packages/qwik/src/core/render/jsx/utils.public.ts",
      "mdFile": "qwik.ssrstream.md"
    },
    {
      "name": "SSRStreamBlock",
      "id": "ssrstreamblock",
      "hierarchy": [
        {
          "name": "SSRStreamBlock",
          "id": "ssrstreamblock"
        }
      ],
      "kind": "Variable",
      "content": "```typescript\nSSRStreamBlock: FunctionComponent<{\n    children?: any;\n}>\n```",
      "editUrl": "https://github.com/QwikDev/qwik/tree/main/packages/qwik/src/core/render/jsx/utils.public.ts",
      "mdFile": "qwik.ssrstreamblock.md"
    },
    {
      "name": "SSRStreamProps",
      "id": "ssrstreamprops",
      "hierarchy": [
        {
          "name": "SSRStreamProps",
          "id": "ssrstreamprops"
        }
      ],
      "kind": "TypeAlias",
      "content": "```typescript\nexport type SSRStreamProps = {\n    children: AsyncGenerator<JSXChildren, void, any> | ((stream: StreamWriter) => Promise<void>) | (() => AsyncGenerator<JSXChildren, void, any>);\n};\n```\n**References:** [JSXChildren](#jsxchildren)<!-- -->, [StreamWriter](#streamwriter)",
      "editUrl": "https://github.com/QwikDev/qwik/tree/main/packages/qwik/src/core/render/jsx/utils.public.ts",
      "mdFile": "qwik.ssrstreamprops.md"
    },
    {
      "name": "StreamWriter",
      "id": "streamwriter",
      "hierarchy": [
        {
          "name": "StreamWriter",
          "id": "streamwriter"
        }
      ],
      "kind": "TypeAlias",
      "content": "```typescript\nexport type StreamWriter = {\n    write: (chunk: string) => void;\n};\n```",
      "editUrl": "https://github.com/QwikDev/qwik/tree/main/packages/qwik/src/core/render/ssr/render-ssr.ts",
      "mdFile": "qwik.streamwriter.md"
    },
    {
      "name": "StyleHTMLAttributes",
      "id": "stylehtmlattributes",
      "hierarchy": [
        {
          "name": "StyleHTMLAttributes",
          "id": "stylehtmlattributes"
        }
      ],
      "kind": "Interface",
      "content": "```typescript\nexport interface StyleHTMLAttributes<T extends Element> extends Attrs<'style', T> \n```\n**Extends:** Attrs&lt;'style', T&gt;",
      "editUrl": "https://github.com/QwikDev/qwik/tree/main/packages/qwik/src/core/render/jsx/types/jsx-generated.ts",
      "mdFile": "qwik.stylehtmlattributes.md"
    },
    {
      "name": "SVGAttributes",
      "id": "svgattributes",
      "hierarchy": [
        {
          "name": "SVGAttributes",
          "id": "svgattributes"
        }
      ],
      "kind": "Interface",
      "content": "The TS types don't include the SVG attributes so we have to define them ourselves\n\nNOTE: These props are probably not complete\n\n\n```typescript\nexport interface SVGAttributes<T extends Element = Element> extends AriaAttributes \n```\n**Extends:** [AriaAttributes](#ariaattributes)\n\n\n<table><thead><tr><th>\n\nProperty\n\n\n</th><th>\n\nModifiers\n\n\n</th><th>\n\nType\n\n\n</th><th>\n\nDescription\n\n\n</th></tr></thead>\n<tbody><tr><td>\n\n[\"accent-height\"?](#)\n\n\n</td><td>\n\n\n</td><td>\n\nnumber \\| string \\| undefined\n\n\n</td><td>\n\n_(Optional)_\n\n\n</td></tr>\n<tr><td>\n\n[\"alignment-baseline\"?](#)\n\n\n</td><td>\n\n\n</td><td>\n\n'auto' \\| 'baseline' \\| 'before-edge' \\| 'text-before-edge' \\| 'middle' \\| 'central' \\| 'after-edge' \\| 'text-after-edge' \\| 'ideographic' \\| 'alphabetic' \\| 'hanging' \\| 'mathematical' \\| 'inherit' \\| undefined\n\n\n</td><td>\n\n_(Optional)_\n\n\n</td></tr>\n<tr><td>\n\n[\"arabic-form\"?](#)\n\n\n</td><td>\n\n\n</td><td>\n\n'initial' \\| 'medial' \\| 'terminal' \\| 'isolated' \\| undefined\n\n\n</td><td>\n\n_(Optional)_\n\n\n</td></tr>\n<tr><td>\n\n[\"baseline-shift\"?](#)\n\n\n</td><td>\n\n\n</td><td>\n\nnumber \\| string \\| undefined\n\n\n</td><td>\n\n_(Optional)_\n\n\n</td></tr>\n<tr><td>\n\n[\"cap-height\"?](#)\n\n\n</td><td>\n\n\n</td><td>\n\nnumber \\| string \\| undefined\n\n\n</td><td>\n\n_(Optional)_\n\n\n</td></tr>\n<tr><td>\n\n[\"clip-path\"?](#)\n\n\n</td><td>\n\n\n</td><td>\n\nstring \\| undefined\n\n\n</td><td>\n\n_(Optional)_\n\n\n</td></tr>\n<tr><td>\n\n[\"clip-rule\"?](#)\n\n\n</td><td>\n\n\n</td><td>\n\nnumber \\| string \\| undefined\n\n\n</td><td>\n\n_(Optional)_\n\n\n</td></tr>\n<tr><td>\n\n[\"color-interpolation-filters\"?](#)\n\n\n</td><td>\n\n\n</td><td>\n\n'auto' \\| 's-rGB' \\| 'linear-rGB' \\| 'inherit' \\| undefined\n\n\n</td><td>\n\n_(Optional)_\n\n\n</td></tr>\n<tr><td>\n\n[\"color-interpolation\"?](#)\n\n\n</td><td>\n\n\n</td><td>\n\nnumber \\| string \\| undefined\n\n\n</td><td>\n\n_(Optional)_\n\n\n</td></tr>\n<tr><td>\n\n[\"color-profile\"?](#)\n\n\n</td><td>\n\n\n</td><td>\n\nnumber \\| string \\| undefined\n\n\n</td><td>\n\n_(Optional)_\n\n\n</td></tr>\n<tr><td>\n\n[\"color-rendering\"?](#)\n\n\n</td><td>\n\n\n</td><td>\n\nnumber \\| string \\| undefined\n\n\n</td><td>\n\n_(Optional)_\n\n\n</td></tr>\n<tr><td>\n\n[\"dominant-baseline\"?](#)\n\n\n</td><td>\n\n\n</td><td>\n\nnumber \\| string \\| undefined\n\n\n</td><td>\n\n_(Optional)_\n\n\n</td></tr>\n<tr><td>\n\n[\"edge-mode\"?](#)\n\n\n</td><td>\n\n\n</td><td>\n\nnumber \\| string \\| undefined\n\n\n</td><td>\n\n_(Optional)_\n\n\n</td></tr>\n<tr><td>\n\n[\"enable-background\"?](#)\n\n\n</td><td>\n\n\n</td><td>\n\nnumber \\| string \\| undefined\n\n\n</td><td>\n\n_(Optional)_\n\n\n</td></tr>\n<tr><td>\n\n[\"fill-opacity\"?](#)\n\n\n</td><td>\n\n\n</td><td>\n\nnumber \\| string \\| undefined\n\n\n</td><td>\n\n_(Optional)_\n\n\n</td></tr>\n<tr><td>\n\n[\"fill-rule\"?](#)\n\n\n</td><td>\n\n\n</td><td>\n\n'nonzero' \\| 'evenodd' \\| 'inherit' \\| undefined\n\n\n</td><td>\n\n_(Optional)_\n\n\n</td></tr>\n<tr><td>\n\n[\"flood-color\"?](#)\n\n\n</td><td>\n\n\n</td><td>\n\nnumber \\| string \\| undefined\n\n\n</td><td>\n\n_(Optional)_\n\n\n</td></tr>\n<tr><td>\n\n[\"flood-opacity\"?](#)\n\n\n</td><td>\n\n\n</td><td>\n\nnumber \\| string \\| undefined\n\n\n</td><td>\n\n_(Optional)_\n\n\n</td></tr>\n<tr><td>\n\n[\"font-family\"?](#)\n\n\n</td><td>\n\n\n</td><td>\n\nstring \\| undefined\n\n\n</td><td>\n\n_(Optional)_\n\n\n</td></tr>\n<tr><td>\n\n[\"font-size-adjust\"?](#)\n\n\n</td><td>\n\n\n</td><td>\n\nnumber \\| string \\| undefined\n\n\n</td><td>\n\n_(Optional)_\n\n\n</td></tr>\n<tr><td>\n\n[\"font-size\"?](#)\n\n\n</td><td>\n\n\n</td><td>\n\nnumber \\| string \\| undefined\n\n\n</td><td>\n\n_(Optional)_\n\n\n</td></tr>\n<tr><td>\n\n[\"font-stretch\"?](#)\n\n\n</td><td>\n\n\n</td><td>\n\nnumber \\| string \\| undefined\n\n\n</td><td>\n\n_(Optional)_\n\n\n</td></tr>\n<tr><td>\n\n[\"font-style\"?](#)\n\n\n</td><td>\n\n\n</td><td>\n\nnumber \\| string \\| undefined\n\n\n</td><td>\n\n_(Optional)_\n\n\n</td></tr>\n<tr><td>\n\n[\"font-variant\"?](#)\n\n\n</td><td>\n\n\n</td><td>\n\nnumber \\| string \\| undefined\n\n\n</td><td>\n\n_(Optional)_\n\n\n</td></tr>\n<tr><td>\n\n[\"font-weight\"?](#)\n\n\n</td><td>\n\n\n</td><td>\n\nnumber \\| string \\| undefined\n\n\n</td><td>\n\n_(Optional)_\n\n\n</td></tr>\n<tr><td>\n\n[\"glyph-name\"?](#)\n\n\n</td><td>\n\n\n</td><td>\n\nnumber \\| string \\| undefined\n\n\n</td><td>\n\n_(Optional)_\n\n\n</td></tr>\n<tr><td>\n\n[\"glyph-orientation-horizontal\"?](#)\n\n\n</td><td>\n\n\n</td><td>\n\nnumber \\| string \\| undefined\n\n\n</td><td>\n\n_(Optional)_\n\n\n</td></tr>\n<tr><td>\n\n[\"glyph-orientation-vertical\"?](#)\n\n\n</td><td>\n\n\n</td><td>\n\nnumber \\| string \\| undefined\n\n\n</td><td>\n\n_(Optional)_\n\n\n</td></tr>\n<tr><td>\n\n[\"horiz-adv-x\"?](#)\n\n\n</td><td>\n\n\n</td><td>\n\nnumber \\| string \\| undefined\n\n\n</td><td>\n\n_(Optional)_\n\n\n</td></tr>\n<tr><td>\n\n[\"horiz-origin-x\"?](#)\n\n\n</td><td>\n\n\n</td><td>\n\nnumber \\| string \\| undefined\n\n\n</td><td>\n\n_(Optional)_\n\n\n</td></tr>\n<tr><td>\n\n[\"image-rendering\"?](#)\n\n\n</td><td>\n\n\n</td><td>\n\nnumber \\| string \\| undefined\n\n\n</td><td>\n\n_(Optional)_\n\n\n</td></tr>\n<tr><td>\n\n[\"letter-spacing\"?](#)\n\n\n</td><td>\n\n\n</td><td>\n\nnumber \\| string \\| undefined\n\n\n</td><td>\n\n_(Optional)_\n\n\n</td></tr>\n<tr><td>\n\n[\"lighting-color\"?](#)\n\n\n</td><td>\n\n\n</td><td>\n\nnumber \\| string \\| undefined\n\n\n</td><td>\n\n_(Optional)_\n\n\n</td></tr>\n<tr><td>\n\n[\"marker-end\"?](#)\n\n\n</td><td>\n\n\n</td><td>\n\nstring \\| undefined\n\n\n</td><td>\n\n_(Optional)_\n\n\n</td></tr>\n<tr><td>\n\n[\"marker-mid\"?](#)\n\n\n</td><td>\n\n\n</td><td>\n\nstring \\| undefined\n\n\n</td><td>\n\n_(Optional)_\n\n\n</td></tr>\n<tr><td>\n\n[\"marker-start\"?](#)\n\n\n</td><td>\n\n\n</td><td>\n\nstring \\| undefined\n\n\n</td><td>\n\n_(Optional)_\n\n\n</td></tr>\n<tr><td>\n\n[\"overline-position\"?](#)\n\n\n</td><td>\n\n\n</td><td>\n\nnumber \\| string \\| undefined\n\n\n</td><td>\n\n_(Optional)_\n\n\n</td></tr>\n<tr><td>\n\n[\"overline-thickness\"?](#)\n\n\n</td><td>\n\n\n</td><td>\n\nnumber \\| string \\| undefined\n\n\n</td><td>\n\n_(Optional)_\n\n\n</td></tr>\n<tr><td>\n\n[\"paint-order\"?](#)\n\n\n</td><td>\n\n\n</td><td>\n\nnumber \\| string \\| undefined\n\n\n</td><td>\n\n_(Optional)_\n\n\n</td></tr>\n<tr><td>\n\n[\"pointer-events\"?](#)\n\n\n</td><td>\n\n\n</td><td>\n\nnumber \\| string \\| undefined\n\n\n</td><td>\n\n_(Optional)_\n\n\n</td></tr>\n<tr><td>\n\n[\"rendering-intent\"?](#)\n\n\n</td><td>\n\n\n</td><td>\n\nnumber \\| string \\| undefined\n\n\n</td><td>\n\n_(Optional)_\n\n\n</td></tr>\n<tr><td>\n\n[\"shape-rendering\"?](#)\n\n\n</td><td>\n\n\n</td><td>\n\nnumber \\| string \\| undefined\n\n\n</td><td>\n\n_(Optional)_\n\n\n</td></tr>\n<tr><td>\n\n[\"stop-color\"?](#)\n\n\n</td><td>\n\n\n</td><td>\n\nstring \\| undefined\n\n\n</td><td>\n\n_(Optional)_\n\n\n</td></tr>\n<tr><td>\n\n[\"stop-opacity\"?](#)\n\n\n</td><td>\n\n\n</td><td>\n\nnumber \\| string \\| undefined\n\n\n</td><td>\n\n_(Optional)_\n\n\n</td></tr>\n<tr><td>\n\n[\"strikethrough-position\"?](#)\n\n\n</td><td>\n\n\n</td><td>\n\nnumber \\| string \\| undefined\n\n\n</td><td>\n\n_(Optional)_\n\n\n</td></tr>\n<tr><td>\n\n[\"strikethrough-thickness\"?](#)\n\n\n</td><td>\n\n\n</td><td>\n\nnumber \\| string \\| undefined\n\n\n</td><td>\n\n_(Optional)_\n\n\n</td></tr>\n<tr><td>\n\n[\"stroke-dasharray\"?](#)\n\n\n</td><td>\n\n\n</td><td>\n\nstring \\| number \\| undefined\n\n\n</td><td>\n\n_(Optional)_\n\n\n</td></tr>\n<tr><td>\n\n[\"stroke-dashoffset\"?](#)\n\n\n</td><td>\n\n\n</td><td>\n\nstring \\| number \\| undefined\n\n\n</td><td>\n\n_(Optional)_\n\n\n</td></tr>\n<tr><td>\n\n[\"stroke-linecap\"?](#)\n\n\n</td><td>\n\n\n</td><td>\n\n'butt' \\| 'round' \\| 'square' \\| 'inherit' \\| undefined\n\n\n</td><td>\n\n_(Optional)_\n\n\n</td></tr>\n<tr><td>\n\n[\"stroke-linejoin\"?](#)\n\n\n</td><td>\n\n\n</td><td>\n\n'miter' \\| 'round' \\| 'bevel' \\| 'inherit' \\| undefined\n\n\n</td><td>\n\n_(Optional)_\n\n\n</td></tr>\n<tr><td>\n\n[\"stroke-miterlimit\"?](#)\n\n\n</td><td>\n\n\n</td><td>\n\nstring \\| undefined\n\n\n</td><td>\n\n_(Optional)_\n\n\n</td></tr>\n<tr><td>\n\n[\"stroke-opacity\"?](#)\n\n\n</td><td>\n\n\n</td><td>\n\nnumber \\| string \\| undefined\n\n\n</td><td>\n\n_(Optional)_\n\n\n</td></tr>\n<tr><td>\n\n[\"stroke-width\"?](#)\n\n\n</td><td>\n\n\n</td><td>\n\nnumber \\| string \\| undefined\n\n\n</td><td>\n\n_(Optional)_\n\n\n</td></tr>\n<tr><td>\n\n[\"text-anchor\"?](#)\n\n\n</td><td>\n\n\n</td><td>\n\nstring \\| undefined\n\n\n</td><td>\n\n_(Optional)_\n\n\n</td></tr>\n<tr><td>\n\n[\"text-decoration\"?](#)\n\n\n</td><td>\n\n\n</td><td>\n\nnumber \\| string \\| undefined\n\n\n</td><td>\n\n_(Optional)_\n\n\n</td></tr>\n<tr><td>\n\n[\"text-rendering\"?](#)\n\n\n</td><td>\n\n\n</td><td>\n\nnumber \\| string \\| undefined\n\n\n</td><td>\n\n_(Optional)_\n\n\n</td></tr>\n<tr><td>\n\n[\"underline-position\"?](#)\n\n\n</td><td>\n\n\n</td><td>\n\nnumber \\| string \\| undefined\n\n\n</td><td>\n\n_(Optional)_\n\n\n</td></tr>\n<tr><td>\n\n[\"underline-thickness\"?](#)\n\n\n</td><td>\n\n\n</td><td>\n\nnumber \\| string \\| undefined\n\n\n</td><td>\n\n_(Optional)_\n\n\n</td></tr>\n<tr><td>\n\n[\"unicode-bidi\"?](#)\n\n\n</td><td>\n\n\n</td><td>\n\nnumber \\| string \\| undefined\n\n\n</td><td>\n\n_(Optional)_\n\n\n</td></tr>\n<tr><td>\n\n[\"unicode-range\"?](#)\n\n\n</td><td>\n\n\n</td><td>\n\nnumber \\| string \\| undefined\n\n\n</td><td>\n\n_(Optional)_\n\n\n</td></tr>\n<tr><td>\n\n[\"units-per-em\"?](#)\n\n\n</td><td>\n\n\n</td><td>\n\nnumber \\| string \\| undefined\n\n\n</td><td>\n\n_(Optional)_\n\n\n</td></tr>\n<tr><td>\n\n[\"v-alphabetic\"?](#)\n\n\n</td><td>\n\n\n</td><td>\n\nnumber \\| string \\| undefined\n\n\n</td><td>\n\n_(Optional)_\n\n\n</td></tr>\n<tr><td>\n\n[\"v-hanging\"?](#)\n\n\n</td><td>\n\n\n</td><td>\n\nnumber \\| string \\| undefined\n\n\n</td><td>\n\n_(Optional)_\n\n\n</td></tr>\n<tr><td>\n\n[\"v-ideographic\"?](#)\n\n\n</td><td>\n\n\n</td><td>\n\nnumber \\| string \\| undefined\n\n\n</td><td>\n\n_(Optional)_\n\n\n</td></tr>\n<tr><td>\n\n[\"v-mathematical\"?](#)\n\n\n</td><td>\n\n\n</td><td>\n\nnumber \\| string \\| undefined\n\n\n</td><td>\n\n_(Optional)_\n\n\n</td></tr>\n<tr><td>\n\n[\"vector-effect\"?](#)\n\n\n</td><td>\n\n\n</td><td>\n\nnumber \\| string \\| undefined\n\n\n</td><td>\n\n_(Optional)_\n\n\n</td></tr>\n<tr><td>\n\n[\"vert-adv-y\"?](#)\n\n\n</td><td>\n\n\n</td><td>\n\nnumber \\| string \\| undefined\n\n\n</td><td>\n\n_(Optional)_\n\n\n</td></tr>\n<tr><td>\n\n[\"vert-origin-x\"?](#)\n\n\n</td><td>\n\n\n</td><td>\n\nnumber \\| string \\| undefined\n\n\n</td><td>\n\n_(Optional)_\n\n\n</td></tr>\n<tr><td>\n\n[\"vert-origin-y\"?](#)\n\n\n</td><td>\n\n\n</td><td>\n\nnumber \\| string \\| undefined\n\n\n</td><td>\n\n_(Optional)_\n\n\n</td></tr>\n<tr><td>\n\n[\"word-spacing\"?](#)\n\n\n</td><td>\n\n\n</td><td>\n\nnumber \\| string \\| undefined\n\n\n</td><td>\n\n_(Optional)_\n\n\n</td></tr>\n<tr><td>\n\n[\"writing-mode\"?](#)\n\n\n</td><td>\n\n\n</td><td>\n\nnumber \\| string \\| undefined\n\n\n</td><td>\n\n_(Optional)_\n\n\n</td></tr>\n<tr><td>\n\n[\"x-channel-selector\"?](#)\n\n\n</td><td>\n\n\n</td><td>\n\nstring \\| undefined\n\n\n</td><td>\n\n_(Optional)_\n\n\n</td></tr>\n<tr><td>\n\n[\"x-height\"?](#)\n\n\n</td><td>\n\n\n</td><td>\n\nnumber \\| string \\| undefined\n\n\n</td><td>\n\n_(Optional)_\n\n\n</td></tr>\n<tr><td>\n\n[\"xlink:actuate\"?](#svgattributes-_xlink_actuate_)\n\n\n</td><td>\n\n\n</td><td>\n\nstring \\| undefined\n\n\n</td><td>\n\n_(Optional)_\n\n\n</td></tr>\n<tr><td>\n\n[\"xlink:arcrole\"?](#svgattributes-_xlink_arcrole_)\n\n\n</td><td>\n\n\n</td><td>\n\nstring \\| undefined\n\n\n</td><td>\n\n_(Optional)_\n\n\n</td></tr>\n<tr><td>\n\n[\"xlink:href\"?](#svgattributes-_xlink_href_)\n\n\n</td><td>\n\n\n</td><td>\n\nstring \\| undefined\n\n\n</td><td>\n\n_(Optional)_\n\n\n</td></tr>\n<tr><td>\n\n[\"xlink:role\"?](#svgattributes-_xlink_role_)\n\n\n</td><td>\n\n\n</td><td>\n\nstring \\| undefined\n\n\n</td><td>\n\n_(Optional)_\n\n\n</td></tr>\n<tr><td>\n\n[\"xlink:show\"?](#svgattributes-_xlink_show_)\n\n\n</td><td>\n\n\n</td><td>\n\nstring \\| undefined\n\n\n</td><td>\n\n_(Optional)_\n\n\n</td></tr>\n<tr><td>\n\n[\"xlink:title\"?](#svgattributes-_xlink_title_)\n\n\n</td><td>\n\n\n</td><td>\n\nstring \\| undefined\n\n\n</td><td>\n\n_(Optional)_\n\n\n</td></tr>\n<tr><td>\n\n[\"xlink:type\"?](#svgattributes-_xlink_type_)\n\n\n</td><td>\n\n\n</td><td>\n\nstring \\| undefined\n\n\n</td><td>\n\n_(Optional)_\n\n\n</td></tr>\n<tr><td>\n\n[\"xml:base\"?](#svgattributes-_xml_base_)\n\n\n</td><td>\n\n\n</td><td>\n\nstring \\| undefined\n\n\n</td><td>\n\n_(Optional)_\n\n\n</td></tr>\n<tr><td>\n\n[\"xml:lang\"?](#svgattributes-_xml_lang_)\n\n\n</td><td>\n\n\n</td><td>\n\nstring \\| undefined\n\n\n</td><td>\n\n_(Optional)_\n\n\n</td></tr>\n<tr><td>\n\n[\"xml:space\"?](#svgattributes-_xml_space_)\n\n\n</td><td>\n\n\n</td><td>\n\nstring \\| undefined\n\n\n</td><td>\n\n_(Optional)_\n\n\n</td></tr>\n<tr><td>\n\n[\"xmlns:xlink\"?](#svgattributes-_xmlns_xlink_)\n\n\n</td><td>\n\n\n</td><td>\n\nstring \\| undefined\n\n\n</td><td>\n\n_(Optional)_\n\n\n</td></tr>\n<tr><td>\n\n[accumulate?](#)\n\n\n</td><td>\n\n\n</td><td>\n\n'none' \\| 'sum' \\| undefined\n\n\n</td><td>\n\n_(Optional)_\n\n\n</td></tr>\n<tr><td>\n\n[additive?](#)\n\n\n</td><td>\n\n\n</td><td>\n\n'replace' \\| 'sum' \\| undefined\n\n\n</td><td>\n\n_(Optional)_\n\n\n</td></tr>\n<tr><td>\n\n[allowReorder?](#)\n\n\n</td><td>\n\n\n</td><td>\n\n'no' \\| 'yes' \\| undefined\n\n\n</td><td>\n\n_(Optional)_\n\n\n</td></tr>\n<tr><td>\n\n[alphabetic?](#)\n\n\n</td><td>\n\n\n</td><td>\n\nnumber \\| string \\| undefined\n\n\n</td><td>\n\n_(Optional)_\n\n\n</td></tr>\n<tr><td>\n\n[amplitude?](#)\n\n\n</td><td>\n\n\n</td><td>\n\nnumber \\| string \\| undefined\n\n\n</td><td>\n\n_(Optional)_\n\n\n</td></tr>\n<tr><td>\n\n[ascent?](#)\n\n\n</td><td>\n\n\n</td><td>\n\nnumber \\| string \\| undefined\n\n\n</td><td>\n\n_(Optional)_\n\n\n</td></tr>\n<tr><td>\n\n[attributeName?](#)\n\n\n</td><td>\n\n\n</td><td>\n\nstring \\| undefined\n\n\n</td><td>\n\n_(Optional)_\n\n\n</td></tr>\n<tr><td>\n\n[attributeType?](#)\n\n\n</td><td>\n\n\n</td><td>\n\nstring \\| undefined\n\n\n</td><td>\n\n_(Optional)_\n\n\n</td></tr>\n<tr><td>\n\n[autoReverse?](#)\n\n\n</td><td>\n\n\n</td><td>\n\n[Booleanish](#booleanish) \\| undefined\n\n\n</td><td>\n\n_(Optional)_\n\n\n</td></tr>\n<tr><td>\n\n[azimuth?](#)\n\n\n</td><td>\n\n\n</td><td>\n\nnumber \\| string \\| undefined\n\n\n</td><td>\n\n_(Optional)_\n\n\n</td></tr>\n<tr><td>\n\n[baseFrequency?](#)\n\n\n</td><td>\n\n\n</td><td>\n\nnumber \\| string \\| undefined\n\n\n</td><td>\n\n_(Optional)_\n\n\n</td></tr>\n<tr><td>\n\n[baseProfile?](#)\n\n\n</td><td>\n\n\n</td><td>\n\nnumber \\| string \\| undefined\n\n\n</td><td>\n\n_(Optional)_\n\n\n</td></tr>\n<tr><td>\n\n[bbox?](#)\n\n\n</td><td>\n\n\n</td><td>\n\nnumber \\| string \\| undefined\n\n\n</td><td>\n\n_(Optional)_\n\n\n</td></tr>\n<tr><td>\n\n[begin?](#)\n\n\n</td><td>\n\n\n</td><td>\n\nnumber \\| string \\| undefined\n\n\n</td><td>\n\n_(Optional)_\n\n\n</td></tr>\n<tr><td>\n\n[bias?](#)\n\n\n</td><td>\n\n\n</td><td>\n\nnumber \\| string \\| undefined\n\n\n</td><td>\n\n_(Optional)_\n\n\n</td></tr>\n<tr><td>\n\n[by?](#)\n\n\n</td><td>\n\n\n</td><td>\n\nnumber \\| string \\| undefined\n\n\n</td><td>\n\n_(Optional)_\n\n\n</td></tr>\n<tr><td>\n\n[calcMode?](#)\n\n\n</td><td>\n\n\n</td><td>\n\nnumber \\| string \\| undefined\n\n\n</td><td>\n\n_(Optional)_\n\n\n</td></tr>\n<tr><td>\n\n[clip?](#)\n\n\n</td><td>\n\n\n</td><td>\n\nnumber \\| string \\| undefined\n\n\n</td><td>\n\n_(Optional)_\n\n\n</td></tr>\n<tr><td>\n\n[clipPathUnits?](#)\n\n\n</td><td>\n\n\n</td><td>\n\nnumber \\| string \\| undefined\n\n\n</td><td>\n\n_(Optional)_\n\n\n</td></tr>\n<tr><td>\n\n[color?](#)\n\n\n</td><td>\n\n\n</td><td>\n\nstring \\| undefined\n\n\n</td><td>\n\n_(Optional)_\n\n\n</td></tr>\n<tr><td>\n\n[contentScriptType?](#)\n\n\n</td><td>\n\n\n</td><td>\n\nnumber \\| string \\| undefined\n\n\n</td><td>\n\n_(Optional)_\n\n\n</td></tr>\n<tr><td>\n\n[contentStyleType?](#)\n\n\n</td><td>\n\n\n</td><td>\n\nnumber \\| string \\| undefined\n\n\n</td><td>\n\n_(Optional)_\n\n\n</td></tr>\n<tr><td>\n\n[crossOrigin?](#)\n\n\n</td><td>\n\n\n</td><td>\n\n[HTMLCrossOriginAttribute](#htmlcrossoriginattribute)\n\n\n</td><td>\n\n_(Optional)_\n\n\n</td></tr>\n<tr><td>\n\n[cursor?](#)\n\n\n</td><td>\n\n\n</td><td>\n\nnumber \\| string\n\n\n</td><td>\n\n_(Optional)_\n\n\n</td></tr>\n<tr><td>\n\n[cx?](#)\n\n\n</td><td>\n\n\n</td><td>\n\nnumber \\| string \\| undefined\n\n\n</td><td>\n\n_(Optional)_\n\n\n</td></tr>\n<tr><td>\n\n[cy?](#)\n\n\n</td><td>\n\n\n</td><td>\n\nnumber \\| string \\| undefined\n\n\n</td><td>\n\n_(Optional)_\n\n\n</td></tr>\n<tr><td>\n\n[d?](#)\n\n\n</td><td>\n\n\n</td><td>\n\nstring \\| undefined\n\n\n</td><td>\n\n_(Optional)_\n\n\n</td></tr>\n<tr><td>\n\n[decelerate?](#)\n\n\n</td><td>\n\n\n</td><td>\n\nnumber \\| string \\| undefined\n\n\n</td><td>\n\n_(Optional)_\n\n\n</td></tr>\n<tr><td>\n\n[descent?](#)\n\n\n</td><td>\n\n\n</td><td>\n\nnumber \\| string \\| undefined\n\n\n</td><td>\n\n_(Optional)_\n\n\n</td></tr>\n<tr><td>\n\n[diffuseConstant?](#)\n\n\n</td><td>\n\n\n</td><td>\n\nnumber \\| string \\| undefined\n\n\n</td><td>\n\n_(Optional)_\n\n\n</td></tr>\n<tr><td>\n\n[direction?](#)\n\n\n</td><td>\n\n\n</td><td>\n\nnumber \\| string \\| undefined\n\n\n</td><td>\n\n_(Optional)_\n\n\n</td></tr>\n<tr><td>\n\n[display?](#)\n\n\n</td><td>\n\n\n</td><td>\n\nnumber \\| string \\| undefined\n\n\n</td><td>\n\n_(Optional)_\n\n\n</td></tr>\n<tr><td>\n\n[divisor?](#)\n\n\n</td><td>\n\n\n</td><td>\n\nnumber \\| string \\| undefined\n\n\n</td><td>\n\n_(Optional)_\n\n\n</td></tr>\n<tr><td>\n\n[dur?](#)\n\n\n</td><td>\n\n\n</td><td>\n\nnumber \\| string \\| undefined\n\n\n</td><td>\n\n_(Optional)_\n\n\n</td></tr>\n<tr><td>\n\n[dx?](#)\n\n\n</td><td>\n\n\n</td><td>\n\nnumber \\| string \\| undefined\n\n\n</td><td>\n\n_(Optional)_\n\n\n</td></tr>\n<tr><td>\n\n[dy?](#)\n\n\n</td><td>\n\n\n</td><td>\n\nnumber \\| string \\| undefined\n\n\n</td><td>\n\n_(Optional)_\n\n\n</td></tr>\n<tr><td>\n\n[elevation?](#)\n\n\n</td><td>\n\n\n</td><td>\n\nnumber \\| string \\| undefined\n\n\n</td><td>\n\n_(Optional)_\n\n\n</td></tr>\n<tr><td>\n\n[end?](#)\n\n\n</td><td>\n\n\n</td><td>\n\nnumber \\| string \\| undefined\n\n\n</td><td>\n\n_(Optional)_\n\n\n</td></tr>\n<tr><td>\n\n[exponent?](#)\n\n\n</td><td>\n\n\n</td><td>\n\nnumber \\| string \\| undefined\n\n\n</td><td>\n\n_(Optional)_\n\n\n</td></tr>\n<tr><td>\n\n[externalResourcesRequired?](#)\n\n\n</td><td>\n\n\n</td><td>\n\nnumber \\| string \\| undefined\n\n\n</td><td>\n\n_(Optional)_\n\n\n</td></tr>\n<tr><td>\n\n[fill?](#)\n\n\n</td><td>\n\n\n</td><td>\n\nstring \\| undefined\n\n\n</td><td>\n\n_(Optional)_\n\n\n</td></tr>\n<tr><td>\n\n[filter?](#)\n\n\n</td><td>\n\n\n</td><td>\n\nstring \\| undefined\n\n\n</td><td>\n\n_(Optional)_\n\n\n</td></tr>\n<tr><td>\n\n[filterRes?](#)\n\n\n</td><td>\n\n\n</td><td>\n\nnumber \\| string \\| undefined\n\n\n</td><td>\n\n_(Optional)_\n\n\n</td></tr>\n<tr><td>\n\n[filterUnits?](#)\n\n\n</td><td>\n\n\n</td><td>\n\nnumber \\| string \\| undefined\n\n\n</td><td>\n\n_(Optional)_\n\n\n</td></tr>\n<tr><td>\n\n[focusable?](#)\n\n\n</td><td>\n\n\n</td><td>\n\nnumber \\| string \\| undefined\n\n\n</td><td>\n\n_(Optional)_\n\n\n</td></tr>\n<tr><td>\n\n[format?](#)\n\n\n</td><td>\n\n\n</td><td>\n\nnumber \\| string \\| undefined\n\n\n</td><td>\n\n_(Optional)_\n\n\n</td></tr>\n<tr><td>\n\n[fr?](#)\n\n\n</td><td>\n\n\n</td><td>\n\nnumber \\| string \\| undefined\n\n\n</td><td>\n\n_(Optional)_\n\n\n</td></tr>\n<tr><td>\n\n[from?](#)\n\n\n</td><td>\n\n\n</td><td>\n\nnumber \\| string \\| undefined\n\n\n</td><td>\n\n_(Optional)_\n\n\n</td></tr>\n<tr><td>\n\n[fx?](#)\n\n\n</td><td>\n\n\n</td><td>\n\nnumber \\| string \\| undefined\n\n\n</td><td>\n\n_(Optional)_\n\n\n</td></tr>\n<tr><td>\n\n[fy?](#)\n\n\n</td><td>\n\n\n</td><td>\n\nnumber \\| string \\| undefined\n\n\n</td><td>\n\n_(Optional)_\n\n\n</td></tr>\n<tr><td>\n\n[g1?](#)\n\n\n</td><td>\n\n\n</td><td>\n\nnumber \\| string \\| undefined\n\n\n</td><td>\n\n_(Optional)_\n\n\n</td></tr>\n<tr><td>\n\n[g2?](#)\n\n\n</td><td>\n\n\n</td><td>\n\nnumber \\| string \\| undefined\n\n\n</td><td>\n\n_(Optional)_\n\n\n</td></tr>\n<tr><td>\n\n[glyphRef?](#)\n\n\n</td><td>\n\n\n</td><td>\n\nnumber \\| string \\| undefined\n\n\n</td><td>\n\n_(Optional)_\n\n\n</td></tr>\n<tr><td>\n\n[gradientTransform?](#)\n\n\n</td><td>\n\n\n</td><td>\n\nstring \\| undefined\n\n\n</td><td>\n\n_(Optional)_\n\n\n</td></tr>\n<tr><td>\n\n[gradientUnits?](#)\n\n\n</td><td>\n\n\n</td><td>\n\nstring \\| undefined\n\n\n</td><td>\n\n_(Optional)_\n\n\n</td></tr>\n<tr><td>\n\n[hanging?](#)\n\n\n</td><td>\n\n\n</td><td>\n\nnumber \\| string \\| undefined\n\n\n</td><td>\n\n_(Optional)_\n\n\n</td></tr>\n<tr><td>\n\n[height?](#)\n\n\n</td><td>\n\n\n</td><td>\n\n[Size](#size) \\| undefined\n\n\n</td><td>\n\n_(Optional)_\n\n\n</td></tr>\n<tr><td>\n\n[href?](#)\n\n\n</td><td>\n\n\n</td><td>\n\nstring \\| undefined\n\n\n</td><td>\n\n_(Optional)_\n\n\n</td></tr>\n<tr><td>\n\n[id?](#)\n\n\n</td><td>\n\n\n</td><td>\n\nstring \\| undefined\n\n\n</td><td>\n\n_(Optional)_\n\n\n</td></tr>\n<tr><td>\n\n[ideographic?](#)\n\n\n</td><td>\n\n\n</td><td>\n\nnumber \\| string \\| undefined\n\n\n</td><td>\n\n_(Optional)_\n\n\n</td></tr>\n<tr><td>\n\n[in?](#)\n\n\n</td><td>\n\n\n</td><td>\n\nstring \\| undefined\n\n\n</td><td>\n\n_(Optional)_\n\n\n</td></tr>\n<tr><td>\n\n[in2?](#)\n\n\n</td><td>\n\n\n</td><td>\n\nnumber \\| string \\| undefined\n\n\n</td><td>\n\n_(Optional)_\n\n\n</td></tr>\n<tr><td>\n\n[intercept?](#)\n\n\n</td><td>\n\n\n</td><td>\n\nnumber \\| string \\| undefined\n\n\n</td><td>\n\n_(Optional)_\n\n\n</td></tr>\n<tr><td>\n\n[k?](#)\n\n\n</td><td>\n\n\n</td><td>\n\nnumber \\| string \\| undefined\n\n\n</td><td>\n\n_(Optional)_\n\n\n</td></tr>\n<tr><td>\n\n[k1?](#)\n\n\n</td><td>\n\n\n</td><td>\n\nnumber \\| string \\| undefined\n\n\n</td><td>\n\n_(Optional)_\n\n\n</td></tr>\n<tr><td>\n\n[k2?](#)\n\n\n</td><td>\n\n\n</td><td>\n\nnumber \\| string \\| undefined\n\n\n</td><td>\n\n_(Optional)_\n\n\n</td></tr>\n<tr><td>\n\n[k3?](#)\n\n\n</td><td>\n\n\n</td><td>\n\nnumber \\| string \\| undefined\n\n\n</td><td>\n\n_(Optional)_\n\n\n</td></tr>\n<tr><td>\n\n[k4?](#)\n\n\n</td><td>\n\n\n</td><td>\n\nnumber \\| string \\| undefined\n\n\n</td><td>\n\n_(Optional)_\n\n\n</td></tr>\n<tr><td>\n\n[kernelMatrix?](#)\n\n\n</td><td>\n\n\n</td><td>\n\nnumber \\| string \\| undefined\n\n\n</td><td>\n\n_(Optional)_\n\n\n</td></tr>\n<tr><td>\n\n[kernelUnitLength?](#)\n\n\n</td><td>\n\n\n</td><td>\n\nnumber \\| string \\| undefined\n\n\n</td><td>\n\n_(Optional)_\n\n\n</td></tr>\n<tr><td>\n\n[kerning?](#)\n\n\n</td><td>\n\n\n</td><td>\n\nnumber \\| string \\| undefined\n\n\n</td><td>\n\n_(Optional)_\n\n\n</td></tr>\n<tr><td>\n\n[keyPoints?](#)\n\n\n</td><td>\n\n\n</td><td>\n\nnumber \\| string \\| undefined\n\n\n</td><td>\n\n_(Optional)_\n\n\n</td></tr>\n<tr><td>\n\n[keySplines?](#)\n\n\n</td><td>\n\n\n</td><td>\n\nnumber \\| string \\| undefined\n\n\n</td><td>\n\n_(Optional)_\n\n\n</td></tr>\n<tr><td>\n\n[keyTimes?](#)\n\n\n</td><td>\n\n\n</td><td>\n\nnumber \\| string \\| undefined\n\n\n</td><td>\n\n_(Optional)_\n\n\n</td></tr>\n<tr><td>\n\n[lang?](#)\n\n\n</td><td>\n\n\n</td><td>\n\nstring \\| undefined\n\n\n</td><td>\n\n_(Optional)_\n\n\n</td></tr>\n<tr><td>\n\n[lengthAdjust?](#)\n\n\n</td><td>\n\n\n</td><td>\n\nnumber \\| string \\| undefined\n\n\n</td><td>\n\n_(Optional)_\n\n\n</td></tr>\n<tr><td>\n\n[limitingConeAngle?](#)\n\n\n</td><td>\n\n\n</td><td>\n\nnumber \\| string \\| undefined\n\n\n</td><td>\n\n_(Optional)_\n\n\n</td></tr>\n<tr><td>\n\n[local?](#)\n\n\n</td><td>\n\n\n</td><td>\n\nnumber \\| string \\| undefined\n\n\n</td><td>\n\n_(Optional)_\n\n\n</td></tr>\n<tr><td>\n\n[markerHeight?](#)\n\n\n</td><td>\n\n\n</td><td>\n\nnumber \\| string \\| undefined\n\n\n</td><td>\n\n_(Optional)_\n\n\n</td></tr>\n<tr><td>\n\n[markerUnits?](#)\n\n\n</td><td>\n\n\n</td><td>\n\nnumber \\| string \\| undefined\n\n\n</td><td>\n\n_(Optional)_\n\n\n</td></tr>\n<tr><td>\n\n[markerWidth?](#)\n\n\n</td><td>\n\n\n</td><td>\n\nnumber \\| string \\| undefined\n\n\n</td><td>\n\n_(Optional)_\n\n\n</td></tr>\n<tr><td>\n\n[mask?](#)\n\n\n</td><td>\n\n\n</td><td>\n\nstring \\| undefined\n\n\n</td><td>\n\n_(Optional)_\n\n\n</td></tr>\n<tr><td>\n\n[maskContentUnits?](#)\n\n\n</td><td>\n\n\n</td><td>\n\nnumber \\| string \\| undefined\n\n\n</td><td>\n\n_(Optional)_\n\n\n</td></tr>\n<tr><td>\n\n[maskUnits?](#)\n\n\n</td><td>\n\n\n</td><td>\n\nnumber \\| string \\| undefined\n\n\n</td><td>\n\n_(Optional)_\n\n\n</td></tr>\n<tr><td>\n\n[mathematical?](#)\n\n\n</td><td>\n\n\n</td><td>\n\nnumber \\| string \\| undefined\n\n\n</td><td>\n\n_(Optional)_\n\n\n</td></tr>\n<tr><td>\n\n[max?](#)\n\n\n</td><td>\n\n\n</td><td>\n\nnumber \\| string \\| undefined\n\n\n</td><td>\n\n_(Optional)_\n\n\n</td></tr>\n<tr><td>\n\n[media?](#)\n\n\n</td><td>\n\n\n</td><td>\n\nstring \\| undefined\n\n\n</td><td>\n\n_(Optional)_\n\n\n</td></tr>\n<tr><td>\n\n[method?](#)\n\n\n</td><td>\n\n\n</td><td>\n\nstring \\| undefined\n\n\n</td><td>\n\n_(Optional)_\n\n\n</td></tr>\n<tr><td>\n\n[min?](#)\n\n\n</td><td>\n\n\n</td><td>\n\nnumber \\| string \\| undefined\n\n\n</td><td>\n\n_(Optional)_\n\n\n</td></tr>\n<tr><td>\n\n[mode?](#)\n\n\n</td><td>\n\n\n</td><td>\n\nnumber \\| string \\| undefined\n\n\n</td><td>\n\n_(Optional)_\n\n\n</td></tr>\n<tr><td>\n\n[name?](#)\n\n\n</td><td>\n\n\n</td><td>\n\nstring \\| undefined\n\n\n</td><td>\n\n_(Optional)_\n\n\n</td></tr>\n<tr><td>\n\n[numOctaves?](#)\n\n\n</td><td>\n\n\n</td><td>\n\nnumber \\| string \\| undefined\n\n\n</td><td>\n\n_(Optional)_\n\n\n</td></tr>\n<tr><td>\n\n[offset?](#)\n\n\n</td><td>\n\n\n</td><td>\n\nnumber \\| string \\| undefined\n\n\n</td><td>\n\n_(Optional)_\n\n\n</td></tr>\n<tr><td>\n\n[opacity?](#)\n\n\n</td><td>\n\n\n</td><td>\n\nnumber \\| string \\| undefined\n\n\n</td><td>\n\n_(Optional)_\n\n\n</td></tr>\n<tr><td>\n\n[operator?](#)\n\n\n</td><td>\n\n\n</td><td>\n\nnumber \\| string \\| undefined\n\n\n</td><td>\n\n_(Optional)_\n\n\n</td></tr>\n<tr><td>\n\n[order?](#)\n\n\n</td><td>\n\n\n</td><td>\n\nnumber \\| string \\| undefined\n\n\n</td><td>\n\n_(Optional)_\n\n\n</td></tr>\n<tr><td>\n\n[orient?](#)\n\n\n</td><td>\n\n\n</td><td>\n\nnumber \\| string \\| undefined\n\n\n</td><td>\n\n_(Optional)_\n\n\n</td></tr>\n<tr><td>\n\n[orientation?](#)\n\n\n</td><td>\n\n\n</td><td>\n\nnumber \\| string \\| undefined\n\n\n</td><td>\n\n_(Optional)_\n\n\n</td></tr>\n<tr><td>\n\n[origin?](#)\n\n\n</td><td>\n\n\n</td><td>\n\nnumber \\| string \\| undefined\n\n\n</td><td>\n\n_(Optional)_\n\n\n</td></tr>\n<tr><td>\n\n[overflow?](#)\n\n\n</td><td>\n\n\n</td><td>\n\nnumber \\| string \\| undefined\n\n\n</td><td>\n\n_(Optional)_\n\n\n</td></tr>\n<tr><td>\n\n[panose1?](#)\n\n\n</td><td>\n\n\n</td><td>\n\nnumber \\| string \\| undefined\n\n\n</td><td>\n\n_(Optional)_\n\n\n</td></tr>\n<tr><td>\n\n[path?](#)\n\n\n</td><td>\n\n\n</td><td>\n\nstring \\| undefined\n\n\n</td><td>\n\n_(Optional)_\n\n\n</td></tr>\n<tr><td>\n\n[pathLength?](#)\n\n\n</td><td>\n\n\n</td><td>\n\nnumber \\| string \\| undefined\n\n\n</td><td>\n\n_(Optional)_\n\n\n</td></tr>\n<tr><td>\n\n[patternContentUnits?](#)\n\n\n</td><td>\n\n\n</td><td>\n\nstring \\| undefined\n\n\n</td><td>\n\n_(Optional)_\n\n\n</td></tr>\n<tr><td>\n\n[patternTransform?](#)\n\n\n</td><td>\n\n\n</td><td>\n\nnumber \\| string \\| undefined\n\n\n</td><td>\n\n_(Optional)_\n\n\n</td></tr>\n<tr><td>\n\n[patternUnits?](#)\n\n\n</td><td>\n\n\n</td><td>\n\nstring \\| undefined\n\n\n</td><td>\n\n_(Optional)_\n\n\n</td></tr>\n<tr><td>\n\n[points?](#)\n\n\n</td><td>\n\n\n</td><td>\n\nstring \\| undefined\n\n\n</td><td>\n\n_(Optional)_\n\n\n</td></tr>\n<tr><td>\n\n[pointsAtX?](#)\n\n\n</td><td>\n\n\n</td><td>\n\nnumber \\| string \\| undefined\n\n\n</td><td>\n\n_(Optional)_\n\n\n</td></tr>\n<tr><td>\n\n[pointsAtY?](#)\n\n\n</td><td>\n\n\n</td><td>\n\nnumber \\| string \\| undefined\n\n\n</td><td>\n\n_(Optional)_\n\n\n</td></tr>\n<tr><td>\n\n[pointsAtZ?](#)\n\n\n</td><td>\n\n\n</td><td>\n\nnumber \\| string \\| undefined\n\n\n</td><td>\n\n_(Optional)_\n\n\n</td></tr>\n<tr><td>\n\n[preserveAlpha?](#)\n\n\n</td><td>\n\n\n</td><td>\n\nnumber \\| string \\| undefined\n\n\n</td><td>\n\n_(Optional)_\n\n\n</td></tr>\n<tr><td>\n\n[preserveAspectRatio?](#)\n\n\n</td><td>\n\n\n</td><td>\n\nstring \\| undefined\n\n\n</td><td>\n\n_(Optional)_\n\n\n</td></tr>\n<tr><td>\n\n[primitiveUnits?](#)\n\n\n</td><td>\n\n\n</td><td>\n\nnumber \\| string \\| undefined\n\n\n</td><td>\n\n_(Optional)_\n\n\n</td></tr>\n<tr><td>\n\n[r?](#)\n\n\n</td><td>\n\n\n</td><td>\n\nnumber \\| string \\| undefined\n\n\n</td><td>\n\n_(Optional)_\n\n\n</td></tr>\n<tr><td>\n\n[radius?](#)\n\n\n</td><td>\n\n\n</td><td>\n\nnumber \\| string \\| undefined\n\n\n</td><td>\n\n_(Optional)_\n\n\n</td></tr>\n<tr><td>\n\n[refX?](#)\n\n\n</td><td>\n\n\n</td><td>\n\nnumber \\| string \\| undefined\n\n\n</td><td>\n\n_(Optional)_\n\n\n</td></tr>\n<tr><td>\n\n[refY?](#)\n\n\n</td><td>\n\n\n</td><td>\n\nnumber \\| string \\| undefined\n\n\n</td><td>\n\n_(Optional)_\n\n\n</td></tr>\n<tr><td>\n\n[repeatCount?](#)\n\n\n</td><td>\n\n\n</td><td>\n\nnumber \\| string \\| undefined\n\n\n</td><td>\n\n_(Optional)_\n\n\n</td></tr>\n<tr><td>\n\n[repeatDur?](#)\n\n\n</td><td>\n\n\n</td><td>\n\nnumber \\| string \\| undefined\n\n\n</td><td>\n\n_(Optional)_\n\n\n</td></tr>\n<tr><td>\n\n[requiredextensions?](#)\n\n\n</td><td>\n\n\n</td><td>\n\nnumber \\| string \\| undefined\n\n\n</td><td>\n\n_(Optional)_\n\n\n</td></tr>\n<tr><td>\n\n[requiredFeatures?](#)\n\n\n</td><td>\n\n\n</td><td>\n\nnumber \\| string \\| undefined\n\n\n</td><td>\n\n_(Optional)_\n\n\n</td></tr>\n<tr><td>\n\n[restart?](#)\n\n\n</td><td>\n\n\n</td><td>\n\nnumber \\| string \\| undefined\n\n\n</td><td>\n\n_(Optional)_\n\n\n</td></tr>\n<tr><td>\n\n[result?](#)\n\n\n</td><td>\n\n\n</td><td>\n\nstring \\| undefined\n\n\n</td><td>\n\n_(Optional)_\n\n\n</td></tr>\n<tr><td>\n\n[role?](#)\n\n\n</td><td>\n\n\n</td><td>\n\nstring \\| undefined\n\n\n</td><td>\n\n_(Optional)_\n\n\n</td></tr>\n<tr><td>\n\n[rotate?](#)\n\n\n</td><td>\n\n\n</td><td>\n\nnumber \\| string \\| undefined\n\n\n</td><td>\n\n_(Optional)_\n\n\n</td></tr>\n<tr><td>\n\n[rx?](#)\n\n\n</td><td>\n\n\n</td><td>\n\nnumber \\| string \\| undefined\n\n\n</td><td>\n\n_(Optional)_\n\n\n</td></tr>\n<tr><td>\n\n[ry?](#)\n\n\n</td><td>\n\n\n</td><td>\n\nnumber \\| string \\| undefined\n\n\n</td><td>\n\n_(Optional)_\n\n\n</td></tr>\n<tr><td>\n\n[scale?](#)\n\n\n</td><td>\n\n\n</td><td>\n\nnumber \\| string \\| undefined\n\n\n</td><td>\n\n_(Optional)_\n\n\n</td></tr>\n<tr><td>\n\n[seed?](#)\n\n\n</td><td>\n\n\n</td><td>\n\nnumber \\| string \\| undefined\n\n\n</td><td>\n\n_(Optional)_\n\n\n</td></tr>\n<tr><td>\n\n[slope?](#)\n\n\n</td><td>\n\n\n</td><td>\n\nnumber \\| string \\| undefined\n\n\n</td><td>\n\n_(Optional)_\n\n\n</td></tr>\n<tr><td>\n\n[spacing?](#)\n\n\n</td><td>\n\n\n</td><td>\n\nnumber \\| string \\| undefined\n\n\n</td><td>\n\n_(Optional)_\n\n\n</td></tr>\n<tr><td>\n\n[specularConstant?](#)\n\n\n</td><td>\n\n\n</td><td>\n\nnumber \\| string \\| undefined\n\n\n</td><td>\n\n_(Optional)_\n\n\n</td></tr>\n<tr><td>\n\n[specularExponent?](#)\n\n\n</td><td>\n\n\n</td><td>\n\nnumber \\| string \\| undefined\n\n\n</td><td>\n\n_(Optional)_\n\n\n</td></tr>\n<tr><td>\n\n[speed?](#)\n\n\n</td><td>\n\n\n</td><td>\n\nnumber \\| string \\| undefined\n\n\n</td><td>\n\n_(Optional)_\n\n\n</td></tr>\n<tr><td>\n\n[spreadMethod?](#)\n\n\n</td><td>\n\n\n</td><td>\n\nstring \\| undefined\n\n\n</td><td>\n\n_(Optional)_\n\n\n</td></tr>\n<tr><td>\n\n[startOffset?](#)\n\n\n</td><td>\n\n\n</td><td>\n\nnumber \\| string \\| undefined\n\n\n</td><td>\n\n_(Optional)_\n\n\n</td></tr>\n<tr><td>\n\n[stdDeviation?](#)\n\n\n</td><td>\n\n\n</td><td>\n\nnumber \\| string \\| undefined\n\n\n</td><td>\n\n_(Optional)_\n\n\n</td></tr>\n<tr><td>\n\n[stemh?](#)\n\n\n</td><td>\n\n\n</td><td>\n\nnumber \\| string \\| undefined\n\n\n</td><td>\n\n_(Optional)_\n\n\n</td></tr>\n<tr><td>\n\n[stemv?](#)\n\n\n</td><td>\n\n\n</td><td>\n\nnumber \\| string \\| undefined\n\n\n</td><td>\n\n_(Optional)_\n\n\n</td></tr>\n<tr><td>\n\n[stitchTiles?](#)\n\n\n</td><td>\n\n\n</td><td>\n\nnumber \\| string \\| undefined\n\n\n</td><td>\n\n_(Optional)_\n\n\n</td></tr>\n<tr><td>\n\n[string?](#)\n\n\n</td><td>\n\n\n</td><td>\n\nnumber \\| string \\| undefined\n\n\n</td><td>\n\n_(Optional)_\n\n\n</td></tr>\n<tr><td>\n\n[stroke?](#)\n\n\n</td><td>\n\n\n</td><td>\n\nstring \\| undefined\n\n\n</td><td>\n\n_(Optional)_\n\n\n</td></tr>\n<tr><td>\n\n[style?](#)\n\n\n</td><td>\n\n\n</td><td>\n\n[CSSProperties](#cssproperties) \\| string \\| undefined\n\n\n</td><td>\n\n_(Optional)_\n\n\n</td></tr>\n<tr><td>\n\n[surfaceScale?](#)\n\n\n</td><td>\n\n\n</td><td>\n\nnumber \\| string \\| undefined\n\n\n</td><td>\n\n_(Optional)_\n\n\n</td></tr>\n<tr><td>\n\n[systemLanguage?](#)\n\n\n</td><td>\n\n\n</td><td>\n\nnumber \\| string \\| undefined\n\n\n</td><td>\n\n_(Optional)_\n\n\n</td></tr>\n<tr><td>\n\n[tabindex?](#)\n\n\n</td><td>\n\n\n</td><td>\n\nnumber \\| undefined\n\n\n</td><td>\n\n_(Optional)_\n\n\n</td></tr>\n<tr><td>\n\n[tableValues?](#)\n\n\n</td><td>\n\n\n</td><td>\n\nnumber \\| string \\| undefined\n\n\n</td><td>\n\n_(Optional)_\n\n\n</td></tr>\n<tr><td>\n\n[target?](#)\n\n\n</td><td>\n\n\n</td><td>\n\nstring \\| undefined\n\n\n</td><td>\n\n_(Optional)_\n\n\n</td></tr>\n<tr><td>\n\n[targetX?](#)\n\n\n</td><td>\n\n\n</td><td>\n\nnumber \\| string \\| undefined\n\n\n</td><td>\n\n_(Optional)_\n\n\n</td></tr>\n<tr><td>\n\n[targetY?](#)\n\n\n</td><td>\n\n\n</td><td>\n\nnumber \\| string \\| undefined\n\n\n</td><td>\n\n_(Optional)_\n\n\n</td></tr>\n<tr><td>\n\n[textLength?](#)\n\n\n</td><td>\n\n\n</td><td>\n\nnumber \\| string \\| undefined\n\n\n</td><td>\n\n_(Optional)_\n\n\n</td></tr>\n<tr><td>\n\n[to?](#)\n\n\n</td><td>\n\n\n</td><td>\n\nnumber \\| string \\| undefined\n\n\n</td><td>\n\n_(Optional)_\n\n\n</td></tr>\n<tr><td>\n\n[transform?](#)\n\n\n</td><td>\n\n\n</td><td>\n\nstring \\| undefined\n\n\n</td><td>\n\n_(Optional)_\n\n\n</td></tr>\n<tr><td>\n\n[type?](#)\n\n\n</td><td>\n\n\n</td><td>\n\nstring \\| undefined\n\n\n</td><td>\n\n_(Optional)_\n\n\n</td></tr>\n<tr><td>\n\n[u1?](#)\n\n\n</td><td>\n\n\n</td><td>\n\nnumber \\| string \\| undefined\n\n\n</td><td>\n\n_(Optional)_\n\n\n</td></tr>\n<tr><td>\n\n[u2?](#)\n\n\n</td><td>\n\n\n</td><td>\n\nnumber \\| string \\| undefined\n\n\n</td><td>\n\n_(Optional)_\n\n\n</td></tr>\n<tr><td>\n\n[unicode?](#)\n\n\n</td><td>\n\n\n</td><td>\n\nnumber \\| string \\| undefined\n\n\n</td><td>\n\n_(Optional)_\n\n\n</td></tr>\n<tr><td>\n\n[values?](#)\n\n\n</td><td>\n\n\n</td><td>\n\nstring \\| undefined\n\n\n</td><td>\n\n_(Optional)_\n\n\n</td></tr>\n<tr><td>\n\n[version?](#)\n\n\n</td><td>\n\n\n</td><td>\n\nstring \\| undefined\n\n\n</td><td>\n\n_(Optional)_\n\n\n</td></tr>\n<tr><td>\n\n[viewBox?](#)\n\n\n</td><td>\n\n\n</td><td>\n\nstring \\| undefined\n\n\n</td><td>\n\n_(Optional)_\n\n\n</td></tr>\n<tr><td>\n\n[viewTarget?](#)\n\n\n</td><td>\n\n\n</td><td>\n\nnumber \\| string \\| undefined\n\n\n</td><td>\n\n_(Optional)_\n\n\n</td></tr>\n<tr><td>\n\n[visibility?](#)\n\n\n</td><td>\n\n\n</td><td>\n\nnumber \\| string \\| undefined\n\n\n</td><td>\n\n_(Optional)_\n\n\n</td></tr>\n<tr><td>\n\n[width?](#)\n\n\n</td><td>\n\n\n</td><td>\n\n[Size](#size) \\| undefined\n\n\n</td><td>\n\n_(Optional)_\n\n\n</td></tr>\n<tr><td>\n\n[widths?](#)\n\n\n</td><td>\n\n\n</td><td>\n\nnumber \\| string \\| undefined\n\n\n</td><td>\n\n_(Optional)_\n\n\n</td></tr>\n<tr><td>\n\n[x?](#)\n\n\n</td><td>\n\n\n</td><td>\n\nnumber \\| string \\| undefined\n\n\n</td><td>\n\n_(Optional)_\n\n\n</td></tr>\n<tr><td>\n\n[x1?](#)\n\n\n</td><td>\n\n\n</td><td>\n\nnumber \\| string \\| undefined\n\n\n</td><td>\n\n_(Optional)_\n\n\n</td></tr>\n<tr><td>\n\n[x2?](#)\n\n\n</td><td>\n\n\n</td><td>\n\nnumber \\| string \\| undefined\n\n\n</td><td>\n\n_(Optional)_\n\n\n</td></tr>\n<tr><td>\n\n[xmlns?](#)\n\n\n</td><td>\n\n\n</td><td>\n\nstring \\| undefined\n\n\n</td><td>\n\n_(Optional)_\n\n\n</td></tr>\n<tr><td>\n\n[y?](#)\n\n\n</td><td>\n\n\n</td><td>\n\nnumber \\| string \\| undefined\n\n\n</td><td>\n\n_(Optional)_\n\n\n</td></tr>\n<tr><td>\n\n[y1?](#)\n\n\n</td><td>\n\n\n</td><td>\n\nnumber \\| string \\| undefined\n\n\n</td><td>\n\n_(Optional)_\n\n\n</td></tr>\n<tr><td>\n\n[y2?](#)\n\n\n</td><td>\n\n\n</td><td>\n\nnumber \\| string \\| undefined\n\n\n</td><td>\n\n_(Optional)_\n\n\n</td></tr>\n<tr><td>\n\n[yChannelSelector?](#)\n\n\n</td><td>\n\n\n</td><td>\n\nstring \\| undefined\n\n\n</td><td>\n\n_(Optional)_\n\n\n</td></tr>\n<tr><td>\n\n[z?](#)\n\n\n</td><td>\n\n\n</td><td>\n\nnumber \\| string \\| undefined\n\n\n</td><td>\n\n_(Optional)_\n\n\n</td></tr>\n<tr><td>\n\n[zoomAndPan?](#)\n\n\n</td><td>\n\n\n</td><td>\n\nstring \\| undefined\n\n\n</td><td>\n\n_(Optional)_\n\n\n</td></tr>\n</tbody></table>",
      "editUrl": "https://github.com/QwikDev/qwik/tree/main/packages/qwik/src/core/render/jsx/types/jsx-generated.ts",
      "mdFile": "qwik.svgattributes.md"
    },
    {
      "name": "SVGProps",
      "id": "svgprops",
      "hierarchy": [
        {
          "name": "SVGProps",
          "id": "svgprops"
        }
      ],
      "kind": "Interface",
      "content": "```typescript\nexport interface SVGProps<T extends Element> extends SVGAttributes, QwikAttributes<T> \n```\n**Extends:** [SVGAttributes](#svgattributes)<!-- -->, [QwikAttributes](#qwikattributes)<!-- -->&lt;T&gt;",
      "editUrl": "https://github.com/QwikDev/qwik/tree/main/packages/qwik/src/core/render/jsx/types/jsx-generated.ts",
      "mdFile": "qwik.svgprops.md"
    },
    {
      "name": "sync$",
      "id": "sync_",
      "hierarchy": [
        {
          "name": "sync$",
          "id": "sync_"
        }
      ],
      "kind": "Function",
      "content": "> This API is provided as an alpha preview for developers and may change based on feedback that we receive. Do not use this API in a production environment.\n> \n\nExtract function into a synchronously loadable QRL.\n\nNOTE: Synchronous QRLs functions can't close over any variables, including exports.\n\n\n```typescript\nsync$: <T extends Function>(fn: T) => SyncQRL<T>\n```\n\n\n<table><thead><tr><th>\n\nParameter\n\n\n</th><th>\n\nType\n\n\n</th><th>\n\nDescription\n\n\n</th></tr></thead>\n<tbody><tr><td>\n\nfn\n\n\n</td><td>\n\nT\n\n\n</td><td>\n\nFunction to extract.\n\n\n</td></tr>\n</tbody></table>\n**Returns:**\n\n[SyncQRL](#syncqrl)<!-- -->&lt;T&gt;",
      "editUrl": "https://github.com/QwikDev/qwik/tree/main/packages/qwik/src/core/qrl/qrl.public.ts",
      "mdFile": "qwik.sync_.md"
    },
    {
      "name": "SyncQRL",
      "id": "syncqrl",
      "hierarchy": [
        {
          "name": "SyncQRL",
          "id": "syncqrl"
        }
      ],
      "kind": "Interface",
      "content": "> This API is provided as an alpha preview for developers and may change based on feedback that we receive. Do not use this API in a production environment.\n> \n\n\n\n```typescript\nexport interface SyncQRL<TYPE extends Function = any> extends QRL<TYPE> \n```\n**Extends:** [QRL](#qrl)<!-- -->&lt;TYPE&gt;\n\n\n<table><thead><tr><th>\n\nProperty\n\n\n</th><th>\n\nModifiers\n\n\n</th><th>\n\nType\n\n\n</th><th>\n\nDescription\n\n\n</th></tr></thead>\n<tbody><tr><td>\n\n[\\_\\_brand\\_\\_SyncQRL\\_\\_](#)\n\n\n</td><td>\n\n\n</td><td>\n\nTYPE\n\n\n</td><td>\n\n**_(ALPHA)_**\n\n\n</td></tr>\n<tr><td>\n\n[dev](#)\n\n\n</td><td>\n\n\n</td><td>\n\nQRLDev \\| null\n\n\n</td><td>\n\n**_(ALPHA)_**\n\n\n</td></tr>\n<tr><td>\n\n[resolved](#)\n\n\n</td><td>\n\n\n</td><td>\n\nTYPE\n\n\n</td><td>\n\n**_(ALPHA)_**\n\n\n</td></tr>\n</tbody></table>",
      "editUrl": "https://github.com/QwikDev/qwik/tree/main/packages/qwik/src/core/qrl/qrl.public.ts",
      "mdFile": "qwik.syncqrl.md"
    },
    {
      "name": "TableHTMLAttributes",
      "id": "tablehtmlattributes",
      "hierarchy": [
        {
          "name": "TableHTMLAttributes",
          "id": "tablehtmlattributes"
        }
      ],
      "kind": "Interface",
      "content": "```typescript\nexport interface TableHTMLAttributes<T extends Element> extends Attrs<'table', T> \n```\n**Extends:** Attrs&lt;'table', T&gt;",
      "editUrl": "https://github.com/QwikDev/qwik/tree/main/packages/qwik/src/core/render/jsx/types/jsx-generated.ts",
      "mdFile": "qwik.tablehtmlattributes.md"
    },
    {
      "name": "TaskCtx",
      "id": "taskctx",
      "hierarchy": [
        {
          "name": "TaskCtx",
          "id": "taskctx"
        }
      ],
      "kind": "Interface",
      "content": "```typescript\nexport interface TaskCtx \n```\n\n\n<table><thead><tr><th>\n\nProperty\n\n\n</th><th>\n\nModifiers\n\n\n</th><th>\n\nType\n\n\n</th><th>\n\nDescription\n\n\n</th></tr></thead>\n<tbody><tr><td>\n\n[track](#)\n\n\n</td><td>\n\n\n</td><td>\n\n[Tracker](#tracker)\n\n\n</td><td>\n\n\n</td></tr>\n</tbody></table>\n\n\n<table><thead><tr><th>\n\nMethod\n\n\n</th><th>\n\nDescription\n\n\n</th></tr></thead>\n<tbody><tr><td>\n\n[cleanup(callback)](#)\n\n\n</td><td>\n\n\n</td></tr>\n</tbody></table>",
      "editUrl": "https://github.com/QwikDev/qwik/tree/main/packages/qwik/src/core/use/use-task.ts",
      "mdFile": "qwik.taskctx.md"
    },
    {
      "name": "TaskFn",
      "id": "taskfn",
      "hierarchy": [
        {
          "name": "TaskFn",
          "id": "taskfn"
        }
      ],
      "kind": "TypeAlias",
      "content": "```typescript\nexport type TaskFn = (ctx: TaskCtx) => ValueOrPromise<void | (() => void)>;\n```\n**References:** [TaskCtx](#taskctx)<!-- -->, [ValueOrPromise](#valueorpromise)",
      "editUrl": "https://github.com/QwikDev/qwik/tree/main/packages/qwik/src/core/use/use-task.ts",
      "mdFile": "qwik.taskfn.md"
    },
    {
      "name": "TdHTMLAttributes",
      "id": "tdhtmlattributes",
      "hierarchy": [
        {
          "name": "TdHTMLAttributes",
          "id": "tdhtmlattributes"
        }
      ],
      "kind": "Interface",
      "content": "```typescript\nexport interface TdHTMLAttributes<T extends Element> extends Attrs<'td', T> \n```\n**Extends:** Attrs&lt;'td', T&gt;",
      "editUrl": "https://github.com/QwikDev/qwik/tree/main/packages/qwik/src/core/render/jsx/types/jsx-generated.ts",
      "mdFile": "qwik.tdhtmlattributes.md"
    },
    {
      "name": "TextareaHTMLAttributes",
      "id": "textareahtmlattributes",
      "hierarchy": [
        {
          "name": "TextareaHTMLAttributes",
          "id": "textareahtmlattributes"
        }
      ],
      "kind": "Interface",
      "content": "```typescript\nexport interface TextareaHTMLAttributes<T extends Element> extends Attrs<'textarea', T> \n```\n**Extends:** Attrs&lt;'textarea', T&gt;",
      "editUrl": "https://github.com/QwikDev/qwik/tree/main/packages/qwik/src/core/render/jsx/types/jsx-generated.ts",
      "mdFile": "qwik.textareahtmlattributes.md"
    },
    {
      "name": "ThHTMLAttributes",
      "id": "thhtmlattributes",
      "hierarchy": [
        {
          "name": "ThHTMLAttributes",
          "id": "thhtmlattributes"
        }
      ],
      "kind": "Interface",
      "content": "```typescript\nexport interface ThHTMLAttributes<T extends Element> extends Attrs<'tr', T> \n```\n**Extends:** Attrs&lt;'tr', T&gt;",
      "editUrl": "https://github.com/QwikDev/qwik/tree/main/packages/qwik/src/core/render/jsx/types/jsx-generated.ts",
      "mdFile": "qwik.thhtmlattributes.md"
    },
    {
      "name": "TimeHTMLAttributes",
      "id": "timehtmlattributes",
      "hierarchy": [
        {
          "name": "TimeHTMLAttributes",
          "id": "timehtmlattributes"
        }
      ],
      "kind": "Interface",
      "content": "```typescript\nexport interface TimeHTMLAttributes<T extends Element> extends Attrs<'time', T> \n```\n**Extends:** Attrs&lt;'time', T&gt;",
      "editUrl": "https://github.com/QwikDev/qwik/tree/main/packages/qwik/src/core/render/jsx/types/jsx-generated.ts",
      "mdFile": "qwik.timehtmlattributes.md"
    },
    {
      "name": "TitleHTMLAttributes",
      "id": "titlehtmlattributes",
      "hierarchy": [
        {
          "name": "TitleHTMLAttributes",
          "id": "titlehtmlattributes"
        }
      ],
      "kind": "Interface",
      "content": "```typescript\nexport interface TitleHTMLAttributes<T extends Element> extends Attrs<'title', T> \n```\n**Extends:** Attrs&lt;'title', T&gt;",
      "editUrl": "https://github.com/QwikDev/qwik/tree/main/packages/qwik/src/core/render/jsx/types/jsx-generated.ts",
      "mdFile": "qwik.titlehtmlattributes.md"
    },
    {
      "name": "Tracker",
      "id": "tracker",
      "hierarchy": [
        {
          "name": "Tracker",
          "id": "tracker"
        }
      ],
      "kind": "Interface",
      "content": "Used to signal to Qwik which state should be watched for changes.\n\nThe `Tracker` is passed into the `taskFn` of `useTask`<!-- -->. It is intended to be used to wrap state objects in a read proxy which signals to Qwik which properties should be watched for changes. A change to any of the properties causes the `taskFn` to rerun.\n\n\\#\\#\\# Example\n\nThe `obs` passed into the `taskFn` is used to mark `state.count` as a property of interest. Any changes to the `state.count` property will cause the `taskFn` to rerun.\n\n```tsx\nconst Cmp = component$(() => {\n  const store = useStore({ count: 0, doubleCount: 0 });\n  const signal = useSignal(0);\n  useTask$(({ track }) => {\n    // Any signals or stores accessed inside the task will be tracked\n    const count = track(() => store.count);\n    // You can also pass a signal to track() directly\n    const signalCount = track(signal);\n    store.doubleCount = count + signalCount;\n  });\n  return (\n    <div>\n      <span>\n        {store.count} / {store.doubleCount}\n      </span>\n      <button\n        onClick$={() => {\n          store.count++;\n          signal.value++;\n        }}\n      >\n        +\n      </button>\n    </div>\n  );\n});\n```\n\n\n```typescript\nexport interface Tracker \n```",
      "editUrl": "https://github.com/QwikDev/qwik/tree/main/packages/qwik/src/core/use/use-task.ts",
      "mdFile": "qwik.tracker.md"
    },
    {
      "name": "TrackHTMLAttributes",
      "id": "trackhtmlattributes",
      "hierarchy": [
        {
          "name": "TrackHTMLAttributes",
          "id": "trackhtmlattributes"
        }
      ],
      "kind": "Interface",
      "content": "```typescript\nexport interface TrackHTMLAttributes<T extends Element> extends Attrs<'track', T> \n```\n**Extends:** Attrs&lt;'track', T&gt;",
      "editUrl": "https://github.com/QwikDev/qwik/tree/main/packages/qwik/src/core/render/jsx/types/jsx-generated.ts",
      "mdFile": "qwik.trackhtmlattributes.md"
    },
    {
      "name": "untrack",
      "id": "untrack",
      "hierarchy": [
        {
          "name": "untrack",
          "id": "untrack"
        }
      ],
      "kind": "Function",
      "content": "Don't track listeners for this callback\n\n\n```typescript\nuntrack: <T>(fn: () => T) => T\n```\n\n\n<table><thead><tr><th>\n\nParameter\n\n\n</th><th>\n\nType\n\n\n</th><th>\n\nDescription\n\n\n</th></tr></thead>\n<tbody><tr><td>\n\nfn\n\n\n</td><td>\n\n() =&gt; T\n\n\n</td><td>\n\n\n</td></tr>\n</tbody></table>\n**Returns:**\n\nT",
      "editUrl": "https://github.com/QwikDev/qwik/tree/main/packages/qwik/src/core/use/use-core.ts",
      "mdFile": "qwik.untrack.md"
    },
    {
      "name": "useComputed$",
      "id": "usecomputed_",
      "hierarchy": [
        {
          "name": "useComputed$",
          "id": "usecomputed_"
        }
      ],
      "kind": "Function",
      "content": "Hook that returns a read-only signal that updates when signals used in the `ComputedFn` change.\n\n\n```typescript\nuseComputed$: <T>(qrl: ComputedFn<T>) => Signal<Awaited<T>>\n```\n\n\n<table><thead><tr><th>\n\nParameter\n\n\n</th><th>\n\nType\n\n\n</th><th>\n\nDescription\n\n\n</th></tr></thead>\n<tbody><tr><td>\n\nqrl\n\n\n</td><td>\n\n[ComputedFn](#computedfn)<!-- -->&lt;T&gt;\n\n\n</td><td>\n\n\n</td></tr>\n</tbody></table>\n**Returns:**\n\n[Signal](#signal)<!-- -->&lt;Awaited&lt;T&gt;&gt;",
      "editUrl": "https://github.com/QwikDev/qwik/tree/main/packages/qwik/src/core/use/use-task.ts",
      "mdFile": "qwik.usecomputed_.md"
    },
    {
      "name": "useComputedQrl",
      "id": "usecomputedqrl",
      "hierarchy": [
        {
          "name": "useComputedQrl",
          "id": "usecomputedqrl"
        }
      ],
      "kind": "Function",
      "content": "```typescript\nuseComputedQrl: <T>(qrl: QRL<ComputedFn<T>>) => Signal<Awaited<T>>\n```\n\n\n<table><thead><tr><th>\n\nParameter\n\n\n</th><th>\n\nType\n\n\n</th><th>\n\nDescription\n\n\n</th></tr></thead>\n<tbody><tr><td>\n\nqrl\n\n\n</td><td>\n\n[QRL](#qrl)<!-- -->&lt;[ComputedFn](#computedfn)<!-- -->&lt;T&gt;&gt;\n\n\n</td><td>\n\n\n</td></tr>\n</tbody></table>\n**Returns:**\n\n[Signal](#signal)<!-- -->&lt;Awaited&lt;T&gt;&gt;",
      "editUrl": "https://github.com/QwikDev/qwik/tree/main/packages/qwik/src/core/use/use-task.ts",
      "mdFile": "qwik.usecomputedqrl.md"
    },
    {
      "name": "useConstant",
      "id": "useconstant",
      "hierarchy": [
        {
          "name": "useConstant",
          "id": "useconstant"
        }
      ],
      "kind": "Function",
      "content": "> Warning: This API is now obsolete.\n> \n> This is a technology preview\n> \n\nStores a value which is retained for the lifetime of the component.\n\nIf the value is a function, the function is invoked to calculate the actual value.\n\n\n```typescript\nuseConstant: <T>(value: (() => T) | T) => T\n```\n\n\n<table><thead><tr><th>\n\nParameter\n\n\n</th><th>\n\nType\n\n\n</th><th>\n\nDescription\n\n\n</th></tr></thead>\n<tbody><tr><td>\n\nvalue\n\n\n</td><td>\n\n(() =&gt; T) \\| T\n\n\n</td><td>\n\n\n</td></tr>\n</tbody></table>\n**Returns:**\n\nT",
      "editUrl": "https://github.com/QwikDev/qwik/tree/main/packages/qwik/src/core/use/use-signal.ts",
      "mdFile": "qwik.useconstant.md"
    },
    {
      "name": "useContext",
      "id": "usecontext",
      "hierarchy": [
        {
          "name": "useContext",
          "id": "usecontext"
        }
      ],
      "kind": "Variable",
      "content": "Retrieve Context value.\n\nUse `useContext()` to retrieve the value of context in a component. To retrieve a value a parent component needs to invoke `useContextProvider()` to assign a value.\n\n\\#\\#\\# Example\n\n```tsx\n// Declare the Context type.\ninterface TodosStore {\n  items: string[];\n}\n// Create a Context ID (no data is saved here.)\n// You will use this ID to both create and retrieve the Context.\nexport const TodosContext = createContextId<TodosStore>('Todos');\n\n// Example of providing context to child components.\nexport const App = component$(() => {\n  useContextProvider(\n    TodosContext,\n    useStore<TodosStore>({\n      items: ['Learn Qwik', 'Build Qwik app', 'Profit'],\n    })\n  );\n\n  return <Items />;\n});\n\n// Example of retrieving the context provided by a parent component.\nexport const Items = component$(() => {\n  const todos = useContext(TodosContext);\n  return (\n    <ul>\n      {todos.items.map((item) => (\n        <li>{item}</li>\n      ))}\n    </ul>\n  );\n});\n\n```\n\n\n```typescript\nuseContext: UseContext\n```",
      "editUrl": "https://github.com/QwikDev/qwik/tree/main/packages/qwik/src/core/use/use-context.ts",
      "mdFile": "qwik.usecontext.md"
    },
    {
      "name": "useContextProvider",
      "id": "usecontextprovider",
      "hierarchy": [
        {
          "name": "useContextProvider",
          "id": "usecontextprovider"
        }
      ],
      "kind": "Function",
      "content": "Assign a value to a Context.\n\nUse `useContextProvider()` to assign a value to a context. The assignment happens in the component's function. Once assigned, use `useContext()` in any child component to retrieve the value.\n\nContext is a way to pass stores to the child components without prop-drilling. Note that scalar values are allowed, but for reactivity you need signals or stores.\n\n\\#\\#\\# Example\n\n```tsx\n// Declare the Context type.\ninterface TodosStore {\n  items: string[];\n}\n// Create a Context ID (no data is saved here.)\n// You will use this ID to both create and retrieve the Context.\nexport const TodosContext = createContextId<TodosStore>('Todos');\n\n// Example of providing context to child components.\nexport const App = component$(() => {\n  useContextProvider(\n    TodosContext,\n    useStore<TodosStore>({\n      items: ['Learn Qwik', 'Build Qwik app', 'Profit'],\n    })\n  );\n\n  return <Items />;\n});\n\n// Example of retrieving the context provided by a parent component.\nexport const Items = component$(() => {\n  const todos = useContext(TodosContext);\n  return (\n    <ul>\n      {todos.items.map((item) => (\n        <li>{item}</li>\n      ))}\n    </ul>\n  );\n});\n\n```\n\n\n```typescript\nuseContextProvider: <STATE>(context: ContextId<STATE>, newValue: STATE) => void\n```\n\n\n<table><thead><tr><th>\n\nParameter\n\n\n</th><th>\n\nType\n\n\n</th><th>\n\nDescription\n\n\n</th></tr></thead>\n<tbody><tr><td>\n\ncontext\n\n\n</td><td>\n\n[ContextId](#contextid)<!-- -->&lt;STATE&gt;\n\n\n</td><td>\n\nThe context to assign a value to.\n\n\n</td></tr>\n<tr><td>\n\nnewValue\n\n\n</td><td>\n\nSTATE\n\n\n</td><td>\n\n\n</td></tr>\n</tbody></table>\n**Returns:**\n\nvoid",
      "editUrl": "https://github.com/QwikDev/qwik/tree/main/packages/qwik/src/core/use/use-context.ts",
      "mdFile": "qwik.usecontextprovider.md"
    },
    {
      "name": "useErrorBoundary",
      "id": "useerrorboundary",
      "hierarchy": [
        {
          "name": "useErrorBoundary",
          "id": "useerrorboundary"
        }
      ],
      "kind": "Function",
      "content": "```typescript\nuseErrorBoundary: () => Readonly<ErrorBoundaryStore>\n```\n**Returns:**\n\nReadonly&lt;[ErrorBoundaryStore](#errorboundarystore)<!-- -->&gt;",
      "editUrl": "https://github.com/QwikDev/qwik/tree/main/packages/qwik/src/core/use/use-error-boundary.ts",
      "mdFile": "qwik.useerrorboundary.md"
    },
    {
      "name": "useId",
      "id": "useid",
      "hierarchy": [
        {
          "name": "useId",
          "id": "useid"
        }
      ],
      "kind": "Function",
      "content": "```typescript\nuseId: () => string\n```\n**Returns:**\n\nstring",
      "editUrl": "https://github.com/QwikDev/qwik/tree/main/packages/qwik/src/core/use/use-id.ts",
      "mdFile": "qwik.useid.md"
    },
    {
      "name": "useOn",
      "id": "useon",
      "hierarchy": [
        {
          "name": "useOn",
          "id": "useon"
        }
      ],
      "kind": "Function",
      "content": "Register a listener on the current component's host element.\n\nUsed to programmatically add event listeners. Useful from custom `use*` methods, which do not have access to the JSX. Otherwise, it's adding a JSX listener in the `<div>` is a better idea.\n\n\n```typescript\nuseOn: <T extends KnownEventNames>(event: T | T[], eventQrl: EventQRL<T>) => void\n```\n\n\n<table><thead><tr><th>\n\nParameter\n\n\n</th><th>\n\nType\n\n\n</th><th>\n\nDescription\n\n\n</th></tr></thead>\n<tbody><tr><td>\n\nevent\n\n\n</td><td>\n\nT \\| T\\[\\]\n\n\n</td><td>\n\n\n</td></tr>\n<tr><td>\n\neventQrl\n\n\n</td><td>\n\nEventQRL&lt;T&gt;\n\n\n</td><td>\n\n\n</td></tr>\n</tbody></table>\n**Returns:**\n\nvoid",
      "editUrl": "https://github.com/QwikDev/qwik/tree/main/packages/qwik/src/core/use/use-on.ts",
      "mdFile": "qwik.useon.md"
    },
    {
      "name": "useOnDocument",
      "id": "useondocument",
      "hierarchy": [
        {
          "name": "useOnDocument",
          "id": "useondocument"
        }
      ],
      "kind": "Function",
      "content": "Register a listener on `document`<!-- -->.\n\nUsed to programmatically add event listeners. Useful from custom `use*` methods, which do not have access to the JSX.\n\n\n```typescript\nuseOnDocument: <T extends KnownEventNames>(event: T | T[], eventQrl: EventQRL<T>) => void\n```\n\n\n<table><thead><tr><th>\n\nParameter\n\n\n</th><th>\n\nType\n\n\n</th><th>\n\nDescription\n\n\n</th></tr></thead>\n<tbody><tr><td>\n\nevent\n\n\n</td><td>\n\nT \\| T\\[\\]\n\n\n</td><td>\n\n\n</td></tr>\n<tr><td>\n\neventQrl\n\n\n</td><td>\n\nEventQRL&lt;T&gt;\n\n\n</td><td>\n\n\n</td></tr>\n</tbody></table>\n**Returns:**\n\nvoid",
      "editUrl": "https://github.com/QwikDev/qwik/tree/main/packages/qwik/src/core/use/use-on.ts",
      "mdFile": "qwik.useondocument.md"
    },
    {
      "name": "useOnWindow",
      "id": "useonwindow",
      "hierarchy": [
        {
          "name": "useOnWindow",
          "id": "useonwindow"
        }
      ],
      "kind": "Function",
      "content": "Register a listener on `window`<!-- -->.\n\nUsed to programmatically add event listeners. Useful from custom `use*` methods, which do not have access to the JSX.\n\n\n```typescript\nuseOnWindow: <T extends KnownEventNames>(event: T | T[], eventQrl: EventQRL<T>) => void\n```\n\n\n<table><thead><tr><th>\n\nParameter\n\n\n</th><th>\n\nType\n\n\n</th><th>\n\nDescription\n\n\n</th></tr></thead>\n<tbody><tr><td>\n\nevent\n\n\n</td><td>\n\nT \\| T\\[\\]\n\n\n</td><td>\n\n\n</td></tr>\n<tr><td>\n\neventQrl\n\n\n</td><td>\n\nEventQRL&lt;T&gt;\n\n\n</td><td>\n\n\n</td></tr>\n</tbody></table>\n**Returns:**\n\nvoid",
      "editUrl": "https://github.com/QwikDev/qwik/tree/main/packages/qwik/src/core/use/use-on.ts",
      "mdFile": "qwik.useonwindow.md"
    },
    {
      "name": "useResource$",
      "id": "useresource_",
      "hierarchy": [
        {
          "name": "useResource$",
          "id": "useresource_"
        }
      ],
      "kind": "Function",
      "content": "This method works like an async memoized function that runs whenever some tracked value changes and returns some data.\n\n`useResource` however returns immediate a `ResourceReturn` object that contains the data and a state that indicates if the data is available or not.\n\nThe status can be one of the following:\n\n- 'pending' - the data is not yet available. - 'resolved' - the data is available. - 'rejected' - the data is not available due to an error or timeout.\n\n\\#\\#\\# Example\n\nExample showing how `useResource` to perform a fetch to request the weather, whenever the input city name changes.\n\n```tsx\nconst Cmp = component$(() => {\n  const cityS = useSignal('');\n\n  const weatherResource = useResource$(async ({ track, cleanup }) => {\n    const cityName = track(cityS);\n    const abortController = new AbortController();\n    cleanup(() => abortController.abort('cleanup'));\n    const res = await fetch(`http://weatherdata.com?city=${cityName}`, {\n      signal: abortController.signal,\n    });\n    const data = await res.json();\n    return data as { temp: number };\n  });\n\n  return (\n    <div>\n      <input name=\"city\" bind:value={cityS} />\n      <Resource\n        value={weatherResource}\n        onResolved={(weather) => {\n          return <div>Temperature: {weather.temp}</div>;\n        }}\n      />\n    </div>\n  );\n});\n```\n\n\n```typescript\nuseResource$: <T>(generatorFn: ResourceFn<T>, opts?: ResourceOptions) => ResourceReturn<T>\n```\n\n\n<table><thead><tr><th>\n\nParameter\n\n\n</th><th>\n\nType\n\n\n</th><th>\n\nDescription\n\n\n</th></tr></thead>\n<tbody><tr><td>\n\ngeneratorFn\n\n\n</td><td>\n\n[ResourceFn](#resourcefn)<!-- -->&lt;T&gt;\n\n\n</td><td>\n\n\n</td></tr>\n<tr><td>\n\nopts\n\n\n</td><td>\n\n[ResourceOptions](#resourceoptions)\n\n\n</td><td>\n\n_(Optional)_\n\n\n</td></tr>\n</tbody></table>\n**Returns:**\n\n[ResourceReturn](#resourcereturn)<!-- -->&lt;T&gt;",
      "editUrl": "https://github.com/QwikDev/qwik/tree/main/packages/qwik/src/core/use/use-resource.ts",
      "mdFile": "qwik.useresource_.md"
    },
    {
      "name": "useResourceQrl",
      "id": "useresourceqrl",
      "hierarchy": [
        {
          "name": "useResourceQrl",
          "id": "useresourceqrl"
        }
      ],
      "kind": "Function",
      "content": "This method works like an async memoized function that runs whenever some tracked value changes and returns some data.\n\n`useResource` however returns immediate a `ResourceReturn` object that contains the data and a state that indicates if the data is available or not.\n\nThe status can be one of the following:\n\n- `pending` - the data is not yet available. - `resolved` - the data is available. - `rejected` - the data is not available due to an error or timeout.\n\nAvoid using a `try/catch` statement in `useResource$`<!-- -->. If you catch the error instead of passing it, the resource status will never be `rejected`<!-- -->.\n\n\\#\\#\\# Example\n\nExample showing how `useResource` to perform a fetch to request the weather, whenever the input city name changes.\n\n```tsx\nconst Cmp = component$(() => {\n  const cityS = useSignal('');\n\n  const weatherResource = useResource$(async ({ track, cleanup }) => {\n    const cityName = track(cityS);\n    const abortController = new AbortController();\n    cleanup(() => abortController.abort('cleanup'));\n    const res = await fetch(`http://weatherdata.com?city=${cityName}`, {\n      signal: abortController.signal,\n    });\n    const data = await res.json();\n    return data as { temp: number };\n  });\n\n  return (\n    <div>\n      <input name=\"city\" bind:value={cityS} />\n      <Resource\n        value={weatherResource}\n        onResolved={(weather) => {\n          return <div>Temperature: {weather.temp}</div>;\n        }}\n      />\n    </div>\n  );\n});\n```\n\n\n```typescript\nuseResourceQrl: <T>(qrl: QRL<ResourceFn<T>>, opts?: ResourceOptions) => ResourceReturn<T>\n```\n\n\n<table><thead><tr><th>\n\nParameter\n\n\n</th><th>\n\nType\n\n\n</th><th>\n\nDescription\n\n\n</th></tr></thead>\n<tbody><tr><td>\n\nqrl\n\n\n</td><td>\n\n[QRL](#qrl)<!-- -->&lt;[ResourceFn](#resourcefn)<!-- -->&lt;T&gt;&gt;\n\n\n</td><td>\n\n\n</td></tr>\n<tr><td>\n\nopts\n\n\n</td><td>\n\n[ResourceOptions](#resourceoptions)\n\n\n</td><td>\n\n_(Optional)_\n\n\n</td></tr>\n</tbody></table>\n**Returns:**\n\n[ResourceReturn](#resourcereturn)<!-- -->&lt;T&gt;",
      "editUrl": "https://github.com/QwikDev/qwik/tree/main/packages/qwik/src/core/use/use-resource.ts",
      "mdFile": "qwik.useresourceqrl.md"
    },
    {
      "name": "useServerData",
      "id": "useserverdata",
      "hierarchy": [
        {
          "name": "useServerData",
          "id": "useserverdata"
        }
      ],
      "kind": "Function",
      "content": "```typescript\nexport declare function useServerData<T>(key: string): T | undefined;\n```\n\n\n<table><thead><tr><th>\n\nParameter\n\n\n</th><th>\n\nType\n\n\n</th><th>\n\nDescription\n\n\n</th></tr></thead>\n<tbody><tr><td>\n\nkey\n\n\n</td><td>\n\nstring\n\n\n</td><td>\n\n\n</td></tr>\n</tbody></table>\n**Returns:**\n\nT \\| undefined",
      "editUrl": "https://github.com/QwikDev/qwik/tree/main/packages/qwik/src/core/use/use-env-data.ts",
      "mdFile": "qwik.useserverdata.md"
    },
    {
      "name": "useSignal",
      "id": "usesignal",
      "hierarchy": [
        {
          "name": "useSignal",
          "id": "usesignal"
        }
      ],
      "kind": "Variable",
      "content": "Hook that creates a signal that is retained for the lifetime of the component.\n\n\n```typescript\nuseSignal: UseSignal\n```",
      "editUrl": "https://github.com/QwikDev/qwik/tree/main/packages/qwik/src/core/use/use-signal.ts",
      "mdFile": "qwik.usesignal.md"
    },
    {
      "name": "UseSignal",
      "id": "usesignal",
      "hierarchy": [
        {
          "name": "UseSignal",
          "id": "usesignal"
        }
      ],
      "kind": "Interface",
      "content": "Hook that creates a signal that is retained for the lifetime of the component.\n\n\n```typescript\nuseSignal: UseSignal\n```",
      "editUrl": "https://github.com/QwikDev/qwik/tree/main/packages/qwik/src/core/use/use-signal.ts",
      "mdFile": "qwik.usesignal.md"
    },
    {
      "name": "useStore",
      "id": "usestore",
      "hierarchy": [
        {
          "name": "useStore",
          "id": "usestore"
        }
      ],
      "kind": "Function",
      "content": "Creates an object that Qwik can track across serializations.\n\nUse `useStore` to create a state for your application. The returned object is a proxy that has a unique ID. The ID of the object is used in the `QRL`<!-- -->s to refer to the store.\n\n\\#\\#\\# Example\n\nExample showing how `useStore` is used in Counter example to keep track of the count.\n\n```tsx\nconst Stores = component$(() => {\n  const counter = useCounter(1);\n\n  // Reactivity happens even for nested objects and arrays\n  const userData = useStore({\n    name: 'Manu',\n    address: {\n      address: '',\n      city: '',\n    },\n    orgs: [],\n  });\n\n  // useStore() can also accept a function to calculate the initial value\n  const state = useStore(() => {\n    return {\n      value: expensiveInitialValue(),\n    };\n  });\n\n  return (\n    <div>\n      <div>Counter: {counter.value}</div>\n      <Child userData={userData} state={state} />\n    </div>\n  );\n});\n\nfunction useCounter(step: number) {\n  // Multiple stores can be created in custom hooks for convenience and composability\n  const counterStore = useStore({\n    value: 0,\n  });\n  useVisibleTask$(() => {\n    // Only runs in the client\n    const timer = setInterval(() => {\n      counterStore.value += step;\n    }, 500);\n    return () => {\n      clearInterval(timer);\n    };\n  });\n  return counterStore;\n}\n```\n\n\n```typescript\nuseStore: <STATE extends object>(initialState: STATE | (() => STATE), opts?: UseStoreOptions) => STATE\n```\n\n\n<table><thead><tr><th>\n\nParameter\n\n\n</th><th>\n\nType\n\n\n</th><th>\n\nDescription\n\n\n</th></tr></thead>\n<tbody><tr><td>\n\ninitialState\n\n\n</td><td>\n\nSTATE \\| (() =&gt; STATE)\n\n\n</td><td>\n\n\n</td></tr>\n<tr><td>\n\nopts\n\n\n</td><td>\n\n[UseStoreOptions](#usestoreoptions)\n\n\n</td><td>\n\n_(Optional)_\n\n\n</td></tr>\n</tbody></table>\n**Returns:**\n\nSTATE",
      "editUrl": "https://github.com/QwikDev/qwik/tree/main/packages/qwik/src/core/use/use-store.public.ts",
      "mdFile": "qwik.usestore.md"
    },
    {
      "name": "UseStoreOptions",
      "id": "usestoreoptions",
      "hierarchy": [
        {
          "name": "UseStoreOptions",
          "id": "usestoreoptions"
        }
      ],
      "kind": "Interface",
      "content": "```typescript\nexport interface UseStoreOptions \n```\n\n\n<table><thead><tr><th>\n\nProperty\n\n\n</th><th>\n\nModifiers\n\n\n</th><th>\n\nType\n\n\n</th><th>\n\nDescription\n\n\n</th></tr></thead>\n<tbody><tr><td>\n\n[deep?](#)\n\n\n</td><td>\n\n\n</td><td>\n\nboolean\n\n\n</td><td>\n\n_(Optional)_ If `true` then all nested objects and arrays will be tracked as well. Default is `true`<!-- -->.\n\n\n</td></tr>\n<tr><td>\n\n[reactive?](#)\n\n\n</td><td>\n\n\n</td><td>\n\nboolean\n\n\n</td><td>\n\n_(Optional)_ If `false` then the object will not be tracked for changes. Default is `true`<!-- -->.\n\n\n</td></tr>\n</tbody></table>",
      "editUrl": "https://github.com/QwikDev/qwik/tree/main/packages/qwik/src/core/use/use-store.public.ts",
      "mdFile": "qwik.usestoreoptions.md"
    },
    {
      "name": "useStyles$",
      "id": "usestyles_",
      "hierarchy": [
        {
          "name": "useStyles$",
          "id": "usestyles_"
        }
      ],
      "kind": "Function",
      "content": "A lazy-loadable reference to a component's styles.\n\nComponent styles allow Qwik to lazy load the style information for the component only when needed. (And avoid double loading it in case of SSR hydration.)\n\n```tsx\nimport styles from './code-block.css?inline';\n\nexport const CmpStyles = component$(() => {\n  useStyles$(styles);\n\n  return <div>Some text</div>;\n});\n```\n\n\n```typescript\nuseStyles$: (qrl: string) => void\n```\n\n\n<table><thead><tr><th>\n\nParameter\n\n\n</th><th>\n\nType\n\n\n</th><th>\n\nDescription\n\n\n</th></tr></thead>\n<tbody><tr><td>\n\nqrl\n\n\n</td><td>\n\nstring\n\n\n</td><td>\n\n\n</td></tr>\n</tbody></table>\n**Returns:**\n\nvoid",
      "editUrl": "https://github.com/QwikDev/qwik/tree/main/packages/qwik/src/core/use/use-styles.ts",
      "mdFile": "qwik.usestyles_.md"
    },
    {
      "name": "useStylesQrl",
      "id": "usestylesqrl",
      "hierarchy": [
        {
          "name": "useStylesQrl",
          "id": "usestylesqrl"
        }
      ],
      "kind": "Function",
      "content": "A lazy-loadable reference to a component's styles.\n\nComponent styles allow Qwik to lazy load the style information for the component only when needed. (And avoid double loading it in case of SSR hydration.)\n\n```tsx\nimport styles from './code-block.css?inline';\n\nexport const CmpStyles = component$(() => {\n  useStyles$(styles);\n\n  return <div>Some text</div>;\n});\n```\n\n\n```typescript\nuseStylesQrl: (styles: QRL<string>) => void\n```\n\n\n<table><thead><tr><th>\n\nParameter\n\n\n</th><th>\n\nType\n\n\n</th><th>\n\nDescription\n\n\n</th></tr></thead>\n<tbody><tr><td>\n\nstyles\n\n\n</td><td>\n\n[QRL](#qrl)<!-- -->&lt;string&gt;\n\n\n</td><td>\n\n\n</td></tr>\n</tbody></table>\n**Returns:**\n\nvoid",
      "editUrl": "https://github.com/QwikDev/qwik/tree/main/packages/qwik/src/core/use/use-styles.ts",
      "mdFile": "qwik.usestylesqrl.md"
    },
    {
      "name": "UseStylesScoped",
      "id": "usestylesscoped",
      "hierarchy": [
        {
          "name": "UseStylesScoped",
          "id": "usestylesscoped"
        }
      ],
      "kind": "Interface",
      "content": "```typescript\nexport interface UseStylesScoped \n```\n\n\n<table><thead><tr><th>\n\nProperty\n\n\n</th><th>\n\nModifiers\n\n\n</th><th>\n\nType\n\n\n</th><th>\n\nDescription\n\n\n</th></tr></thead>\n<tbody><tr><td>\n\n[scopeId](#)\n\n\n</td><td>\n\n\n</td><td>\n\nstring\n\n\n</td><td>\n\n\n</td></tr>\n</tbody></table>",
      "editUrl": "https://github.com/QwikDev/qwik/tree/main/packages/qwik/src/core/use/use-styles.ts",
      "mdFile": "qwik.usestylesscoped.md"
    },
    {
      "name": "useStylesScoped$",
      "id": "usestylesscoped_",
      "hierarchy": [
        {
          "name": "useStylesScoped$",
          "id": "usestylesscoped_"
        }
      ],
      "kind": "Function",
      "content": "A lazy-loadable reference to a component's styles, that is scoped to the component.\n\nComponent styles allow Qwik to lazy load the style information for the component only when needed. (And avoid double loading it in case of SSR hydration.)\n\n```tsx\nimport scoped from './code-block.css?inline';\n\nexport const CmpScopedStyles = component$(() => {\n  useStylesScoped$(scoped);\n\n  return <div>Some text</div>;\n});\n```\n\n\n```typescript\nuseStylesScoped$: (qrl: string) => UseStylesScoped\n```\n\n\n<table><thead><tr><th>\n\nParameter\n\n\n</th><th>\n\nType\n\n\n</th><th>\n\nDescription\n\n\n</th></tr></thead>\n<tbody><tr><td>\n\nqrl\n\n\n</td><td>\n\nstring\n\n\n</td><td>\n\n\n</td></tr>\n</tbody></table>\n**Returns:**\n\n[UseStylesScoped](#usestylesscoped)",
      "editUrl": "https://github.com/QwikDev/qwik/tree/main/packages/qwik/src/core/use/use-styles.ts",
      "mdFile": "qwik.usestylesscoped_.md"
    },
    {
      "name": "useStylesScopedQrl",
      "id": "usestylesscopedqrl",
      "hierarchy": [
        {
          "name": "useStylesScopedQrl",
          "id": "usestylesscopedqrl"
        }
      ],
      "kind": "Function",
      "content": "A lazy-loadable reference to a component's styles, that is scoped to the component.\n\nComponent styles allow Qwik to lazy load the style information for the component only when needed. (And avoid double loading it in case of SSR hydration.)\n\n```tsx\nimport scoped from './code-block.css?inline';\n\nexport const CmpScopedStyles = component$(() => {\n  useStylesScoped$(scoped);\n\n  return <div>Some text</div>;\n});\n```\n\n\n```typescript\nuseStylesScopedQrl: (styles: QRL<string>) => UseStylesScoped\n```\n\n\n<table><thead><tr><th>\n\nParameter\n\n\n</th><th>\n\nType\n\n\n</th><th>\n\nDescription\n\n\n</th></tr></thead>\n<tbody><tr><td>\n\nstyles\n\n\n</td><td>\n\n[QRL](#qrl)<!-- -->&lt;string&gt;\n\n\n</td><td>\n\n\n</td></tr>\n</tbody></table>\n**Returns:**\n\n[UseStylesScoped](#usestylesscoped)",
      "editUrl": "https://github.com/QwikDev/qwik/tree/main/packages/qwik/src/core/use/use-styles.ts",
      "mdFile": "qwik.usestylesscopedqrl.md"
    },
    {
      "name": "useTask$",
      "id": "usetask_",
      "hierarchy": [
        {
          "name": "useTask$",
          "id": "usetask_"
        }
      ],
      "kind": "Function",
      "content": "Reruns the `taskFn` when the observed inputs change.\n\nUse `useTask` to observe changes on a set of inputs, and then re-execute the `taskFn` when those inputs change.\n\nThe `taskFn` only executes if the observed inputs change. To observe the inputs, use the `obs` function to wrap property reads. This creates subscriptions that will trigger the `taskFn` to rerun.\n\n\n```typescript\nuseTask$: (qrl: TaskFn, opts?: UseTaskOptions | undefined) => void\n```\n\n\n<table><thead><tr><th>\n\nParameter\n\n\n</th><th>\n\nType\n\n\n</th><th>\n\nDescription\n\n\n</th></tr></thead>\n<tbody><tr><td>\n\nqrl\n\n\n</td><td>\n\n[TaskFn](#taskfn)\n\n\n</td><td>\n\n\n</td></tr>\n<tr><td>\n\nopts\n\n\n</td><td>\n\n[UseTaskOptions](#usetaskoptions) \\| undefined\n\n\n</td><td>\n\n_(Optional)_\n\n\n</td></tr>\n</tbody></table>\n**Returns:**\n\nvoid",
      "editUrl": "https://github.com/QwikDev/qwik/tree/main/packages/qwik/src/core/use/use-task.ts",
      "mdFile": "qwik.usetask_.md"
    },
    {
      "name": "UseTaskOptions",
      "id": "usetaskoptions",
      "hierarchy": [
        {
          "name": "UseTaskOptions",
          "id": "usetaskoptions"
        }
      ],
      "kind": "Interface",
      "content": "```typescript\nexport interface UseTaskOptions \n```\n\n\n<table><thead><tr><th>\n\nProperty\n\n\n</th><th>\n\nModifiers\n\n\n</th><th>\n\nType\n\n\n</th><th>\n\nDescription\n\n\n</th></tr></thead>\n<tbody><tr><td>\n\n[eagerness?](#)\n\n\n</td><td>\n\n\n</td><td>\n\n[EagernessOptions](#eagernessoptions)\n\n\n</td><td>\n\n_(Optional)_ - `visible`<!-- -->: run the effect when the element is visible. - `load`<!-- -->: eagerly run the effect when the application resumes.\n\n\n</td></tr>\n</tbody></table>",
      "editUrl": "https://github.com/QwikDev/qwik/tree/main/packages/qwik/src/core/use/use-task.ts",
      "mdFile": "qwik.usetaskoptions.md"
    },
    {
      "name": "useTaskQrl",
      "id": "usetaskqrl",
      "hierarchy": [
        {
          "name": "useTaskQrl",
          "id": "usetaskqrl"
        }
      ],
      "kind": "Function",
      "content": "Reruns the `taskFn` when the observed inputs change.\n\nUse `useTask` to observe changes on a set of inputs, and then re-execute the `taskFn` when those inputs change.\n\nThe `taskFn` only executes if the observed inputs change. To observe the inputs, use the `obs` function to wrap property reads. This creates subscriptions that will trigger the `taskFn` to rerun.\n\n\n```typescript\nuseTaskQrl: (qrl: QRL<TaskFn>, opts?: UseTaskOptions) => void\n```\n\n\n<table><thead><tr><th>\n\nParameter\n\n\n</th><th>\n\nType\n\n\n</th><th>\n\nDescription\n\n\n</th></tr></thead>\n<tbody><tr><td>\n\nqrl\n\n\n</td><td>\n\n[QRL](#qrl)<!-- -->&lt;[TaskFn](#taskfn)<!-- -->&gt;\n\n\n</td><td>\n\n\n</td></tr>\n<tr><td>\n\nopts\n\n\n</td><td>\n\n[UseTaskOptions](#usetaskoptions)\n\n\n</td><td>\n\n_(Optional)_\n\n\n</td></tr>\n</tbody></table>\n**Returns:**\n\nvoid",
      "editUrl": "https://github.com/QwikDev/qwik/tree/main/packages/qwik/src/core/use/use-task.ts",
      "mdFile": "qwik.usetaskqrl.md"
    },
    {
      "name": "useVisibleTask$",
      "id": "usevisibletask_",
      "hierarchy": [
        {
          "name": "useVisibleTask$",
          "id": "usevisibletask_"
        }
      ],
      "kind": "Function",
      "content": "```tsx\nconst Timer = component$(() => {\n  const store = useStore({\n    count: 0,\n  });\n\n  useVisibleTask$(() => {\n    // Only runs in the client\n    const timer = setInterval(() => {\n      store.count++;\n    }, 500);\n    return () => {\n      clearInterval(timer);\n    };\n  });\n\n  return <div>{store.count}</div>;\n});\n```\n\n\n```typescript\nuseVisibleTask$: (qrl: TaskFn, opts?: OnVisibleTaskOptions | undefined) => void\n```\n\n\n<table><thead><tr><th>\n\nParameter\n\n\n</th><th>\n\nType\n\n\n</th><th>\n\nDescription\n\n\n</th></tr></thead>\n<tbody><tr><td>\n\nqrl\n\n\n</td><td>\n\n[TaskFn](#taskfn)\n\n\n</td><td>\n\n\n</td></tr>\n<tr><td>\n\nopts\n\n\n</td><td>\n\n[OnVisibleTaskOptions](#onvisibletaskoptions) \\| undefined\n\n\n</td><td>\n\n_(Optional)_\n\n\n</td></tr>\n</tbody></table>\n**Returns:**\n\nvoid",
      "editUrl": "https://github.com/QwikDev/qwik/tree/main/packages/qwik/src/core/use/use-task.ts",
      "mdFile": "qwik.usevisibletask_.md"
    },
    {
      "name": "useVisibleTaskQrl",
      "id": "usevisibletaskqrl",
      "hierarchy": [
        {
          "name": "useVisibleTaskQrl",
          "id": "usevisibletaskqrl"
        }
      ],
      "kind": "Function",
      "content": "```tsx\nconst Timer = component$(() => {\n  const store = useStore({\n    count: 0,\n  });\n\n  useVisibleTask$(() => {\n    // Only runs in the client\n    const timer = setInterval(() => {\n      store.count++;\n    }, 500);\n    return () => {\n      clearInterval(timer);\n    };\n  });\n\n  return <div>{store.count}</div>;\n});\n```\n\n\n```typescript\nuseVisibleTaskQrl: (qrl: QRL<TaskFn>, opts?: OnVisibleTaskOptions) => void\n```\n\n\n<table><thead><tr><th>\n\nParameter\n\n\n</th><th>\n\nType\n\n\n</th><th>\n\nDescription\n\n\n</th></tr></thead>\n<tbody><tr><td>\n\nqrl\n\n\n</td><td>\n\n[QRL](#qrl)<!-- -->&lt;[TaskFn](#taskfn)<!-- -->&gt;\n\n\n</td><td>\n\n\n</td></tr>\n<tr><td>\n\nopts\n\n\n</td><td>\n\n[OnVisibleTaskOptions](#onvisibletaskoptions)\n\n\n</td><td>\n\n_(Optional)_\n\n\n</td></tr>\n</tbody></table>\n**Returns:**\n\nvoid",
      "editUrl": "https://github.com/QwikDev/qwik/tree/main/packages/qwik/src/core/use/use-task.ts",
      "mdFile": "qwik.usevisibletaskqrl.md"
    },
    {
      "name": "ValueOrPromise",
      "id": "valueorpromise",
      "hierarchy": [
        {
          "name": "ValueOrPromise",
          "id": "valueorpromise"
        }
      ],
      "kind": "TypeAlias",
      "content": "Type representing a value which is either resolve or a promise.\n\n\n```typescript\nexport type ValueOrPromise<T> = T | Promise<T>;\n```",
      "editUrl": "https://github.com/QwikDev/qwik/tree/main/packages/qwik/src/core/util/types.ts",
      "mdFile": "qwik.valueorpromise.md"
    },
    {
      "name": "version",
      "id": "version",
      "hierarchy": [
        {
          "name": "version",
          "id": "version"
        }
      ],
      "kind": "Variable",
      "content": "QWIK\\_VERSION\n\n\n```typescript\nversion: string\n```",
      "editUrl": "https://github.com/QwikDev/qwik/tree/main/packages/qwik/src/core/version.ts",
      "mdFile": "qwik.version.md"
    },
    {
      "name": "VideoHTMLAttributes",
      "id": "videohtmlattributes",
      "hierarchy": [
        {
          "name": "VideoHTMLAttributes",
          "id": "videohtmlattributes"
        }
      ],
      "kind": "Interface",
      "content": "```typescript\nexport interface VideoHTMLAttributes<T extends Element> extends Attrs<'video', T> \n```\n**Extends:** Attrs&lt;'video', T&gt;",
      "editUrl": "https://github.com/QwikDev/qwik/tree/main/packages/qwik/src/core/render/jsx/types/jsx-generated.ts",
      "mdFile": "qwik.videohtmlattributes.md"
    },
    {
      "name": "VisibleTaskStrategy",
      "id": "visibletaskstrategy",
      "hierarchy": [
        {
          "name": "VisibleTaskStrategy",
          "id": "visibletaskstrategy"
        }
      ],
      "kind": "TypeAlias",
      "content": "```typescript\nexport type VisibleTaskStrategy = 'intersection-observer' | 'document-ready' | 'document-idle';\n```",
      "editUrl": "https://github.com/QwikDev/qwik/tree/main/packages/qwik/src/core/use/use-task.ts",
      "mdFile": "qwik.visibletaskstrategy.md"
    },
    {
      "name": "WebViewHTMLAttributes",
      "id": "webviewhtmlattributes",
      "hierarchy": [
        {
          "name": "WebViewHTMLAttributes",
          "id": "webviewhtmlattributes"
        }
      ],
      "kind": "Interface",
      "content": "> Warning: This API is now obsolete.\n> \n> This is the type for a React Native WebView. It doesn't belong in Qwik (yet?) but we're keeping it for backwards compatibility.\n> \n\n\n```typescript\nexport interface WebViewHTMLAttributes<T extends Element> extends HTMLAttributes<T> \n```\n**Extends:** [HTMLAttributes](#htmlattributes)<!-- -->&lt;T&gt;\n\n\n<table><thead><tr><th>\n\nProperty\n\n\n</th><th>\n\nModifiers\n\n\n</th><th>\n\nType\n\n\n</th><th>\n\nDescription\n\n\n</th></tr></thead>\n<tbody><tr><td>\n\n[allowFullScreen?](#)\n\n\n</td><td>\n\n\n</td><td>\n\nboolean \\| undefined\n\n\n</td><td>\n\n_(Optional)_\n\n\n</td></tr>\n<tr><td>\n\n[allowpopups?](#)\n\n\n</td><td>\n\n\n</td><td>\n\nboolean \\| undefined\n\n\n</td><td>\n\n_(Optional)_\n\n\n</td></tr>\n<tr><td>\n\n[autoFocus?](#)\n\n\n</td><td>\n\n\n</td><td>\n\nboolean \\| undefined\n\n\n</td><td>\n\n_(Optional)_\n\n\n</td></tr>\n<tr><td>\n\n[autosize?](#)\n\n\n</td><td>\n\n\n</td><td>\n\nboolean \\| undefined\n\n\n</td><td>\n\n_(Optional)_\n\n\n</td></tr>\n<tr><td>\n\n[blinkfeatures?](#)\n\n\n</td><td>\n\n\n</td><td>\n\nstring \\| undefined\n\n\n</td><td>\n\n_(Optional)_\n\n\n</td></tr>\n<tr><td>\n\n[disableblinkfeatures?](#)\n\n\n</td><td>\n\n\n</td><td>\n\nstring \\| undefined\n\n\n</td><td>\n\n_(Optional)_\n\n\n</td></tr>\n<tr><td>\n\n[disableguestresize?](#)\n\n\n</td><td>\n\n\n</td><td>\n\nboolean \\| undefined\n\n\n</td><td>\n\n_(Optional)_\n\n\n</td></tr>\n<tr><td>\n\n[disablewebsecurity?](#)\n\n\n</td><td>\n\n\n</td><td>\n\nboolean \\| undefined\n\n\n</td><td>\n\n_(Optional)_\n\n\n</td></tr>\n<tr><td>\n\n[guestinstance?](#)\n\n\n</td><td>\n\n\n</td><td>\n\nstring \\| undefined\n\n\n</td><td>\n\n_(Optional)_\n\n\n</td></tr>\n<tr><td>\n\n[httpreferrer?](#)\n\n\n</td><td>\n\n\n</td><td>\n\nstring \\| undefined\n\n\n</td><td>\n\n_(Optional)_\n\n\n</td></tr>\n<tr><td>\n\n[nodeintegration?](#)\n\n\n</td><td>\n\n\n</td><td>\n\nboolean \\| undefined\n\n\n</td><td>\n\n_(Optional)_\n\n\n</td></tr>\n<tr><td>\n\n[partition?](#)\n\n\n</td><td>\n\n\n</td><td>\n\nstring \\| undefined\n\n\n</td><td>\n\n_(Optional)_\n\n\n</td></tr>\n<tr><td>\n\n[plugins?](#)\n\n\n</td><td>\n\n\n</td><td>\n\nboolean \\| undefined\n\n\n</td><td>\n\n_(Optional)_\n\n\n</td></tr>\n<tr><td>\n\n[preload?](#)\n\n\n</td><td>\n\n\n</td><td>\n\nstring \\| undefined\n\n\n</td><td>\n\n_(Optional)_\n\n\n</td></tr>\n<tr><td>\n\n[src?](#)\n\n\n</td><td>\n\n\n</td><td>\n\nstring \\| undefined\n\n\n</td><td>\n\n_(Optional)_\n\n\n</td></tr>\n<tr><td>\n\n[useragent?](#)\n\n\n</td><td>\n\n\n</td><td>\n\nstring \\| undefined\n\n\n</td><td>\n\n_(Optional)_\n\n\n</td></tr>\n<tr><td>\n\n[webpreferences?](#)\n\n\n</td><td>\n\n\n</td><td>\n\nstring \\| undefined\n\n\n</td><td>\n\n_(Optional)_\n\n\n</td></tr>\n</tbody></table>",
      "editUrl": "https://github.com/QwikDev/qwik/tree/main/packages/qwik/src/core/render/jsx/types/jsx-generated.ts",
      "mdFile": "qwik.webviewhtmlattributes.md"
    }
  ]
}