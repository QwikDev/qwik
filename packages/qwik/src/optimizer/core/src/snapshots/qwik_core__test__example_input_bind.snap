---
source: packages/qwik/src/optimizer/core/src/test.rs
assertion_line: 2012
expression: output
snapshot_kind: text
---
==INPUT==


import { component$, $ } from '@qwik.dev/core';

export const Greeter = component$(() => {
	const value = useSignal(0);
	const checked = useSignal(false);
	const stuff = useSignal();
	return (
		<>
			<input bind:value={value} />
			<input bind:checked={checked} />
			<input bind:stuff={stuff} />
			<div>{value}</div>
			<div>{value.value}</div>
		</>

	)
});

============================= test.js ==

import { componentQrl } from "@qwik.dev/core";
import { useLexicalScope } from "@qwik.dev/core";
import { inlinedQrl } from "@qwik.dev/core";
import { _jsxSorted } from "@qwik.dev/core";
import { _wrapProp } from "@qwik.dev/core";
import { Fragment as _Fragment } from "@qwik.dev/core/jsx-runtime";
import { _addLoc } from "@qwik.dev/core/internal";
export const Greeter = /*#__PURE__*/ _addLoc(componentQrl(/*#__PURE__*/ inlinedQrl(()=>{
    const value = _addLoc(useSignal(0), "test.tsx", 6, 16);
    const checked = _addLoc(useSignal(false), "test.tsx", 7, 18);
    const stuff = _addLoc(useSignal(), "test.tsx", 8, 16);
    return /*#__PURE__*/ _jsxSorted(_Fragment, null, null, [
        /*#__PURE__*/ _jsxSorted("input", {
            "onInput$": /*#__PURE__*/ inlinedQrl((_, elm)=>{
                const [value] = useLexicalScope();
                return value.value = elm.type == "number" ? elm.valueAsNumber : elm.value;
            }, "s_b85ZKAd2j00", [
                value
            ])
        }, {
            "value": value
        }, null, 2, null),
        /*#__PURE__*/ _jsxSorted("input", {
            "onInput$": /*#__PURE__*/ inlinedQrl((_, elm)=>{
                const [checked] = useLexicalScope();
                return checked.value = elm.type == "number" ? elm.valueAsNumber : elm.checked;
            }, "s_7TWZmNIt2nQ", [
                checked
            ])
        }, {
            "checked": checked
        }, null, 2, null),
        /*#__PURE__*/ _jsxSorted("input", {
            "onChange$": /*#__PURE__*/ inlinedQrl((_, elm)=>{
                const [stuff] = useLexicalScope();
                return stuff.value = elm.type == "number" ? elm.valueAsNumber : elm.stuff;
            }, "s_CtufvifGdmw", [
                stuff
            ])
        }, {
            "stuff": stuff
        }, null, 2, null),
        /*#__PURE__*/ _jsxSorted("div", null, null, value, 1, null),
        /*#__PURE__*/ _jsxSorted("div", null, null, _wrapProp(value), 1, null)
    ], 1, "u6_0");
}, "s_n7HuG2hhU0Q")), "test.tsx", 5, 24);


Some("{\"version\":3,\"sources\":[\"/user/qwik/src/test.tsx\"],\"names\":[],\"mappings\":\";;;;;;;AAGA,OAAO,MAAM,wBAAU,QAAA,sCAAW;IACjC,MAAM,QAAQ,QAAA,UAAU;IACxB,MAAM,UAAU,QAAA,UAAU;IAC1B,MAAM,QAAQ,QAAA;IACd,qBACC;sBACC,WAAC;;;uBAAkB;;;;;qBAAA;;sBACnB,WAAC;;;uBAAoB;;;;;uBAAA;;sBACrB,WAAC;;;uBAAkB;;;;;qBAAA;;sBACnB,WAAC,mBAAK;sBACN,WAAC,6BAAK;;AAIT,yCAAG\"}")
== DIAGNOSTICS ==

[]
