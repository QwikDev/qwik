---
source: packages/qwik/src/optimizer/core/src/test.rs
assertion_line: 3325
expression: output
snapshot_kind: text
---
==INPUT==

import * as qwikRouterConfig from '@qwik-router-config';
import swRegister from '@qwik-router-sw-register';
import {
  _deserializeData,
  _fnSignal,
  _getContextElement,
  _jsxBranch,
  _jsxSplit,
  _restProps,
  _serializeData,
  _weakSerialize,
  _wrapSignal,
  componentQrl,
  createContextId,
  eventQrl,
  getLocale,
  implicit$FirstArg,
  inlinedQrl,
  noSerialize,
  SkipRender,
  Slot,
  untrack,
  useContext,
  useContextProvider,
  useLexicalScope,
  useOnDocument,
  useServerData,
  useSignal,
  useStore,
  useStylesQrl,
  useTaskQrl,
  withLocale,
} from '@qwik.dev/core';
import { isBrowser, isDev, isServer } from '@qwik.dev/core/build';
import { z, z as z2 } from 'zod';
const RouteStateContext = /* @__PURE__ */ createContextId('qc-s');
const ContentContext = /* @__PURE__ */ createContextId('qc-c');
const ContentInternalContext = /* @__PURE__ */ createContextId('qc-ic');
const DocumentHeadContext = /* @__PURE__ */ createContextId('qc-h');
const RouteLocationContext = /* @__PURE__ */ createContextId('qc-l');
const RouteNavigateContext = /* @__PURE__ */ createContextId('qc-n');
const RouteActionContext = /* @__PURE__ */ createContextId('qc-a');
const RouterOutlet = /* @__PURE__ */ componentQrl(
  /* @__PURE__ */ inlinedQrl(() => {
    _jsxBranch();
    useOnDocument(
      'qinit',
      eventQrl(
        /* @__PURE__ */ inlinedQrl(() => {
          const POPSTATE_FALLBACK_INITIALIZED = '_qRouterPopstateFallback';
          const CLIENT_HISTORY_INITIALIZED = '_qRouterHistory';
          if (!window[POPSTATE_FALLBACK_INITIALIZED]) {
            window[POPSTATE_FALLBACK_INITIALIZED] = () => {
              if (!window[CLIENT_HISTORY_INITIALIZED]) location.reload();
            };
            setTimeout(() => {
              addEventListener('popstate', window[POPSTATE_FALLBACK_INITIALIZED]);
            }, 0);
          }
        }, 'RouterOutlet_component_useOnDocument_event_KnNE9eL0qfc')
      )
    );
    const context = useContext(ContentInternalContext);
    if (context.value && context.value.length > 0) {
      const contentsLen = context.value.length;
      let cmp = null;
      for (let i = contentsLen - 1; i >= 0; i--)
        cmp = _jsxSplit(
          context.value[i].default,
          {
            children: cmp,
          },
          1,
          'k8_0'
        );
      return cmp;
    }
    return SkipRender;
  }, 'RouterOutlet_component_AKetNByE5TM')
);
const MODULE_CACHE = /* @__PURE__ */ new WeakMap();
const CLIENT_DATA_CACHE = /* @__PURE__ */ new Map();
const QACTION_KEY = 'qaction';
const toPath = (url) => url.pathname + url.search + url.hash;
const toUrl = (url, baseUrl) => new URL(url, baseUrl.href);
const isSameOrigin = (a, b) => a.origin === b.origin;
const isSamePath = (a, b) => a.pathname + a.search === b.pathname + b.search;
const isSamePathname = (a, b) => a.pathname === b.pathname;
const isSameOriginDifferentPathname = (a, b) => isSameOrigin(a, b) && !isSamePath(a, b);
const getClientDataPath = (pathname, pageSearch, action) => {
  let search = pageSearch ?? '';
  if (action) search += (search ? '&' : '?') + QACTION_KEY + '=' + encodeURIComponent(action.id);
  return pathname + (pathname.endsWith('/') ? '' : '/') + 'q-data.json' + search;
};
const getClientNavPath = (props, baseUrl) => {
  const href = props.href;
  if (typeof href === 'string' && href.trim() !== '' && typeof props.target !== 'string')
    try {
      const linkUrl = toUrl(href, baseUrl.url);
      const currentUrl = toUrl('', baseUrl.url);
      if (isSameOrigin(linkUrl, currentUrl)) return toPath(linkUrl);
    } catch (e) {
      console.error(e);
    }
  else if (props.reload) return toPath(toUrl('', baseUrl.url));
  return null;
};
const getPrefetchDataset = (props, clientNavPath, currentLoc) => {
  if (props.prefetch === true && clientNavPath) {
    const prefetchUrl = toUrl(clientNavPath, currentLoc.url);
    if (!isSamePathname(prefetchUrl, toUrl('', currentLoc.url))) return '';
  }
  return null;
};
const clientNavigate = (win, newUrl, routeNavigate) => {
  const currentUrl = win.location;
  if (isSameOriginDifferentPathname(currentUrl, newUrl)) {
    handleScroll(win, currentUrl, newUrl);
    win.history.pushState('', '', toPath(newUrl));
  }
  if (!win._qRouterHistory) {
    win._qRouterHistory = 1;
    win.addEventListener('popstate', () => {
      const currentUrl2 = win.location;
      const previousUrl = toUrl(routeNavigate.value, currentUrl2);
      if (isSameOriginDifferentPathname(currentUrl2, previousUrl)) {
        handleScroll(win, previousUrl, currentUrl2);
        routeNavigate.value = toPath(new URL(currentUrl2.href));
      }
    });
    win.removeEventListener('popstate', win._qRouterPopstateFallback);
  }
};
const handleScroll = async (win, previousUrl, newUrl) => {
  const doc = win.document;
  const newHash = newUrl.hash;
  if (isSamePath(previousUrl, newUrl)) {
    if (previousUrl.hash !== newHash) {
      await domWait();
      if (newHash) scrollToHashId(doc, newHash);
      else win.scrollTo(0, 0);
    }
  } else {
    if (newHash)
      for (let i = 0; i < 24; i++) {
        await domWait();
        if (scrollToHashId(doc, newHash)) break;
      }
    else {
      await domWait();
      win.scrollTo(0, 0);
    }
  }
};
const domWait = () => new Promise((resolve) => setTimeout(resolve, 12));
const scrollToHashId = (doc, hash) => {
  const elmId = hash.slice(1);
  const elm = doc.getElementById(elmId);
  if (elm) elm.scrollIntoView();
  return elm;
};
const dispatchPrefetchEvent = (prefetchData) => {
  if (typeof document !== 'undefined')
    document.dispatchEvent(
      new CustomEvent('qprefetch', {
        detail: prefetchData,
      })
    );
};
const resolveHead = (endpoint, routeLocation, contentModules, locale) => {
  const head = createDocumentHead();
  const getData = (loaderOrAction) => {
    const id = loaderOrAction.__id;
    if (loaderOrAction.__brand === 'server_loader') {
      if (!(id in endpoint.loaders))
        throw new Error(
          'You can not get the returned data of a loader that has not been executed for this request.'
        );
    }
    const data = endpoint.loaders[id];
    if (data instanceof Promise)
      throw new Error('Loaders returning a function can not be referred to in the head function.');
    return data;
  };
  const headProps = {
    head,
    withLocale: (fn) => withLocale(locale, fn),
    resolveValue: getData,
    ...routeLocation,
  };
  for (let i = contentModules.length - 1; i >= 0; i--) {
    const contentModuleHead = contentModules[i] && contentModules[i].head;
    if (contentModuleHead) {
      if (typeof contentModuleHead === 'function')
        resolveDocumentHead(
          head,
          withLocale(locale, () => contentModuleHead(headProps))
        );
      else if (typeof contentModuleHead === 'object') resolveDocumentHead(head, contentModuleHead);
    }
  }
  return headProps.head;
};
const resolveDocumentHead = (resolvedHead, updatedHead) => {
  if (typeof updatedHead.title === 'string') resolvedHead.title = updatedHead.title;
  mergeArray(resolvedHead.meta, updatedHead.meta);
  mergeArray(resolvedHead.links, updatedHead.links);
  mergeArray(resolvedHead.styles, updatedHead.styles);
  Object.assign(resolvedHead.frontmatter, updatedHead.frontmatter);
};
const mergeArray = (existingArr, newArr) => {
  if (Array.isArray(newArr))
    for (const newItem of newArr) {
      if (typeof newItem.key === 'string') {
        const existingIndex = existingArr.findIndex((i) => i.key === newItem.key);
        if (existingIndex > -1) {
          existingArr[existingIndex] = newItem;
          continue;
        }
      }
      existingArr.push(newItem);
    }
};
const createDocumentHead = () => ({
  title: '',
  meta: [],
  links: [],
  styles: [],
  frontmatter: {},
});
const loadRoute = async (routes, menus, cacheModules, pathname) => {
  if (Array.isArray(routes))
    for (const route of routes) {
      const match = route[0].exec(pathname);
      if (match) {
        const loaders = route[1];
        const params = getPathParams(route[2], match);
        const routeBundleNames = route[4];
        const mods = new Array(loaders.length);
        const pendingLoads = [];
        const menuLoader = getMenuLoader(menus, pathname);
        let menu = void 0;
        loaders.forEach((moduleLoader, i) => {
          loadModule(
            moduleLoader,
            pendingLoads,
            (routeModule) => (mods[i] = routeModule),
            cacheModules
          );
        });
        loadModule(
          menuLoader,
          pendingLoads,
          (menuModule) => (menu = menuModule?.default),
          cacheModules
        );
        if (pendingLoads.length > 0) await Promise.all(pendingLoads);
        return [params, mods, menu, routeBundleNames];
      }
    }
  return null;
};
const loadModule = (moduleLoader, pendingLoads, moduleSetter, cacheModules) => {
  if (typeof moduleLoader === 'function') {
    const loadedModule = MODULE_CACHE.get(moduleLoader);
    if (loadedModule) moduleSetter(loadedModule);
    else {
      const l = moduleLoader();
      if (typeof l.then === 'function')
        pendingLoads.push(
          l.then((loadedModule2) => {
            if (cacheModules !== false) MODULE_CACHE.set(moduleLoader, loadedModule2);
            moduleSetter(loadedModule2);
          })
        );
      else if (l) moduleSetter(l);
    }
  }
};
const getMenuLoader = (menus, pathname) => {
  if (menus) {
    pathname = pathname.endsWith('/') ? pathname : pathname + '/';
    const menu = menus.find(
      (m) => m[0] === pathname || pathname.startsWith(m[0] + (pathname.endsWith('/') ? '' : '/'))
    );
    if (menu) return menu[1];
  }
};
const getPathParams = (paramNames, match) => {
  const params = {};
  if (paramNames)
    for (let i = 0; i < paramNames.length; i++) {
      const param = match?.[i + 1] ?? '';
      const v = param.endsWith('/') ? param.slice(0, -1) : param;
      params[paramNames[i]] = decodeURIComponent(v);
    }
  return params;
};
const loadClientData = async (url, element, clearCache, action) => {
  const pagePathname = url.pathname;
  const pageSearch = url.search;
  const clientDataPath = getClientDataPath(pagePathname, pageSearch, action);
  let qData = void 0;
  if (!action) qData = CLIENT_DATA_CACHE.get(clientDataPath);
  dispatchPrefetchEvent({
    links: [pagePathname],
  });
  if (!qData) {
    const options = getFetchOptions(action);
    if (action) action.data = void 0;
    qData = fetch(clientDataPath, options).then((rsp) => {
      const redirectedURL = new URL(rsp.url);
      if (redirectedURL.origin !== location.origin || !isQDataJson(redirectedURL.pathname)) {
        location.href = redirectedURL.href;
        return;
      }
      if ((rsp.headers.get('content-type') || '').includes('json'))
        return rsp.text().then((text) => {
          const clientData = _deserializeData(text, element);
          if (!clientData) {
            location.href = url.href;
            return;
          }
          if (clearCache) CLIENT_DATA_CACHE.delete(clientDataPath);
          if (clientData.redirect) location.href = clientData.redirect;
          else if (action) {
            const actionData = clientData.loaders[action.id];
            action.resolve({
              status: rsp.status,
              result: actionData,
            });
          }
          return clientData;
        });
      else {
        location.href = url.href;
        return void 0;
      }
    });
    if (!action) CLIENT_DATA_CACHE.set(clientDataPath, qData);
  }
  return qData.then((v) => {
    if (!v) CLIENT_DATA_CACHE.delete(clientDataPath);
    return v;
  });
};
const getFetchOptions = (action) => {
  const actionData = action?.data;
  if (!actionData) return void 0;
  if (actionData instanceof FormData)
    return {
      method: 'POST',
      body: actionData,
    };
  else
    return {
      method: 'POST',
      body: JSON.stringify(actionData),
      headers: {
        'Content-Type': 'application/json, charset=UTF-8',
      },
    };
};
const isQDataJson = (pathname) => {
  return pathname.endsWith(QDATA_JSON);
};
const QDATA_JSON = '/q-data.json';
const useContent = () => useContext(ContentContext);
const useDocumentHead = () => useContext(DocumentHeadContext);
const useLocation = () => useContext(RouteLocationContext);
const useNavigate = () => useContext(RouteNavigateContext);
const useAction = () => useContext(RouteActionContext);
const useQwikRouterEnv = () => noSerialize(useServerData('qwikrouter'));
const QwikRouterProvider = /* @__PURE__ */ componentQrl(
  /* @__PURE__ */ inlinedQrl((props) => {
    useStylesQrl(
      /* @__PURE__ */ inlinedQrl(
        `:root{view-transition-name: none}`,
        'QwikRouterProvider_component_useStyles_RPDJAz33WLA'
      )
    );
    const env = useQwikRouterEnv();
    if (!env?.params) throw new Error(`Missing Qwik Router Env Data`);
    const urlEnv = useServerData('url');
    if (!urlEnv) throw new Error(`Missing Qwik URL Env Data`);
    const url = new URL(urlEnv);
    const routeLocation = useStore(
      {
        url,
        params: env.params,
        isNavigating: false,
      },
      {
        deep: false,
      }
    );
    const loaderState = _weakSerialize(
      useStore(env.response.loaders, {
        deep: false,
      })
    );
    const navPath = useSignal(toPath(url));
    const documentHead = useStore(createDocumentHead);
    const content = useStore({
      headings: void 0,
      menu: void 0,
    });
    const contentInternal = useSignal();
    const currentActionId = env.response.action;
    const currentAction = currentActionId ? env.response.loaders[currentActionId] : void 0;
    const actionState = useSignal(
      currentAction
        ? {
            id: currentActionId,
            data: env.response.formData,
            output: {
              result: currentAction,
              status: env.response.status,
            },
          }
        : void 0
    );
    const goto = eventQrl(
      /* @__PURE__ */ inlinedQrl(
        async (path, forceReload) => {
          const [actionState2, navPath2, routeLocation2] = useLexicalScope();
          if (path === void 0) {
            path = navPath2.value;
            navPath2.value = '';
          } else if (forceReload) navPath2.value = '';
          const resolvedURL = new URL(path, routeLocation2.url);
          path = toPath(resolvedURL);
          if (!forceReload && navPath2.value === path) return;
          navPath2.value = path;
          if (isBrowser) {
            loadClientData(resolvedURL, _getContextElement());
            loadRoute(
              qwikRouterConfig.routes,
              qwikRouterConfig.menus,
              qwikRouterConfig.cacheModules,
              resolvedURL.pathname
            );
          }
          actionState2.value = void 0;
          routeLocation2.isNavigating = true;
        },
        'QwikRouterProvider_component_goto_event_cBcjROynRVg',
        [actionState, navPath, routeLocation]
      )
    );
    useContextProvider(ContentContext, content);
    useContextProvider(ContentInternalContext, contentInternal);
    useContextProvider(DocumentHeadContext, documentHead);
    useContextProvider(RouteLocationContext, routeLocation);
    useContextProvider(RouteNavigateContext, goto);
    useContextProvider(RouteStateContext, loaderState);
    useContextProvider(RouteActionContext, actionState);
    useTaskQrl(
      /* @__PURE__ */ inlinedQrl(
        ({ track }) => {
          const [
            actionState2,
            content2,
            contentInternal2,
            documentHead2,
            env2,
            loaderState2,
            navPath2,
            props2,
            routeLocation2,
            url2,
          ] = useLexicalScope();
          async function run() {
            const [path, action] = track(() => [navPath2.value, actionState2.value]);
            const locale = getLocale('');
            let trackUrl;
            let clientPageData;
            let loadedRoute = null;
            if (isServer) {
              trackUrl = new URL(path, routeLocation2.url);
              loadedRoute = env2.loadedRoute;
              clientPageData = env2.response;
            } else {
              trackUrl = new URL(path, location);
              if (trackUrl.pathname.endsWith('/')) {
                if (!qwikRouterConfig.trailingSlash)
                  trackUrl.pathname = trackUrl.pathname.slice(0, -1);
              } else if (qwikRouterConfig.trailingSlash) trackUrl.pathname += '/';
              let loadRoutePromise = loadRoute(
                qwikRouterConfig.routes,
                qwikRouterConfig.menus,
                qwikRouterConfig.cacheModules,
                trackUrl.pathname
              );
              const element = _getContextElement();
              const pageData = (clientPageData = await loadClientData(
                trackUrl,
                element,
                true,
                action
              ));
              if (!pageData) {
                navPath2.untrackedValue = toPath(trackUrl);
                return;
              }
              const newHref = pageData.href;
              const newURL = new URL(newHref, trackUrl.href);
              if (newURL.pathname !== trackUrl.pathname) {
                trackUrl = newURL;
                loadRoutePromise = loadRoute(
                  qwikRouterConfig.routes,
                  qwikRouterConfig.menus,
                  qwikRouterConfig.cacheModules,
                  trackUrl.pathname
                );
              }
              loadedRoute = await loadRoutePromise;
            }
            if (loadedRoute) {
              const [params, mods, menu] = loadedRoute;
              const contentModules = mods;
              const pageModule = contentModules[contentModules.length - 1];
              routeLocation2.url = trackUrl;
              routeLocation2.params = {
                ...params,
              };
              navPath2.untrackedValue = toPath(trackUrl);
              const resolvedHead = resolveHead(
                clientPageData,
                routeLocation2,
                contentModules,
                locale
              );
              content2.headings = pageModule.headings;
              content2.menu = menu;
              contentInternal2.value = noSerialize(contentModules);
              documentHead2.links = resolvedHead.links;
              documentHead2.meta = resolvedHead.meta;
              documentHead2.styles = resolvedHead.styles;
              documentHead2.title = resolvedHead.title;
              documentHead2.frontmatter = resolvedHead.frontmatter;
              if (isBrowser) {
                if (
                  (props2.viewTransition ?? true) &&
                  isSameOriginDifferentPathname(window.location, url2)
                )
                  document.__q_view_transition__ = true;
                const loaders = clientPageData?.loaders;
                if (loaders) Object.assign(loaderState2, loaders);
                CLIENT_DATA_CACHE.clear();
                clientNavigate(window, trackUrl, navPath2);
                routeLocation2.isNavigating = false;
              }
            }
          }
          const promise = run();
          if (isServer) return promise;
          else return;
        },
        'QwikRouterProvider_component_useTask_02wMImzEAbk',
        [
          actionState,
          content,
          contentInternal,
          documentHead,
          env,
          loaderState,
          navPath,
          props,
          routeLocation,
          url,
        ]
      )
    );
    return /* @__PURE__ */ _jsxSplit(Slot, null, 3, 'qY_0');
  }, 'QwikRouterProvider_component_TxCFOy819ag')
);
const QwikRouterMockProvider = /* @__PURE__ */ componentQrl(
  /* @__PURE__ */ inlinedQrl((props) => {
    const urlEnv = props.url ?? 'http://localhost/';
    const url = new URL(urlEnv);
    const routeLocation = useStore(
      {
        url,
        params: props.params ?? {},
        isNavigating: false,
      },
      {
        deep: false,
      }
    );
    const loaderState = useSignal({});
    const goto = /* @__PURE__ */ inlinedQrl(async (path) => {
      throw new Error('Not implemented');
    }, 'QwikRouterMockProvider_component_goto_BUbtvTyvVRE');
    const documentHead = useStore(createDocumentHead, {
      deep: false,
    });
    const content = useStore(
      {
        headings: void 0,
        menu: void 0,
      },
      {
        deep: false,
      }
    );
    const contentInternal = useSignal();
    useContextProvider(ContentContext, content);
    useContextProvider(ContentInternalContext, contentInternal);
    useContextProvider(DocumentHeadContext, documentHead);
    useContextProvider(RouteLocationContext, routeLocation);
    useContextProvider(RouteNavigateContext, goto);
    useContextProvider(RouteStateContext, loaderState);
    return /* @__PURE__ */ _jsxSplit(Slot, null, 3, 'qY_1');
  }, 'QwikRouterMockProvider_component_WmYC5H00wtI')
);
const Link = /* @__PURE__ */ componentQrl(
  /* @__PURE__ */ inlinedQrl((props) => {
    const nav = useNavigate();
    const loc = useLocation();
    const linkProps = {
      ...props,
    };
    const clientNavPath = untrack(() => getClientNavPath(linkProps, loc));
    const prefetchDataset = untrack(() => getPrefetchDataset(props, clientNavPath, loc));
    const reload = !!linkProps.reload;
    linkProps['preventdefault:click'] = !!clientNavPath;
    linkProps.href = clientNavPath || props.href;
    const event = eventQrl(
      /* @__PURE__ */ inlinedQrl(
        (ev, elm) => prefetchLinkResources(elm, ev.type === 'qvisible'),
        'Link_component_event_event_5g4B0Gd1Wck'
      )
    );
    return /* @__PURE__ */ _jsxSplit(
      'a',
      {
        ...linkProps,
        'data-prefetch': prefetchDataset,
        children: /* @__PURE__ */ _jsxSplit(Slot, null, null, 3, 'AD_0'),
        onClick$: /* @__PURE__ */ inlinedQrl(
          (_, elm) => {
            const [nav2, reload2] = useLexicalScope();
            if (elm.href) nav2(elm.href, reload2);
          },
          'Link_component_a_onClick_kzjavhDI3L0',
          [nav, reload]
        ),
        onMouseOver$: event,
        onFocus$: event,
        onQVisible$: event,
      },
      null,
      0,
      'AD_1'
    );
  }, 'Link_component_8gdLBszqbaM')
);
const prefetchLinkResources = (elm, isOnVisible) => {
  if (elm && elm.href && elm.hasAttribute('data-prefetch')) {
    if (!windowInnerWidth) windowInnerWidth = innerWidth;
    if (!isOnVisible || (isOnVisible && windowInnerWidth < 520))
      loadClientData(new URL(elm.href), elm);
  }
};
let windowInnerWidth = 0;
const ServiceWorkerRegister = (props) =>
  _jsxSplit(
    'script',
    null,
    {
      nonce: _wrapSignal(props, 'nonce'),
      dangerouslySetInnerHTML: swRegister,
    },
    3,
    '1Z_0'
  );
const routeActionQrl = (actionQrl, ...rest) => {
  const { id, validators } = getValidators(rest, actionQrl);
  function action() {
    const loc = useLocation();
    const currentAction = useAction();
    const initialState = {
      actionPath: `?${QACTION_KEY}=${id}`,
      isRunning: false,
      status: void 0,
      value: void 0,
      formData: void 0,
    };
    const state = useStore(() => {
      const value = currentAction.value;
      if (value && value?.id === id) {
        const data = value.data;
        if (data instanceof FormData) initialState.formData = data;
        if (value.output) {
          const { status, result } = value.output;
          initialState.status = status;
          initialState.value = result;
        }
      }
      return initialState;
    });
    const submit = /* @__PURE__ */ inlinedQrl(
      (input = {}) => {
        const [currentAction2, id2, loc2, state2] = useLexicalScope();
        if (isServer)
          throw new Error(`Actions can not be invoked within the server during SSR.
Action.run() can only be called on the browser, for example when a user clicks a button, or submits a form.`);
        let data;
        let form;
        if (input instanceof SubmitEvent) {
          form = input.target;
          data = new FormData(form);
          if (
            (input.submitter instanceof HTMLInputElement ||
              input.submitter instanceof HTMLButtonElement) &&
            input.submitter.name
          ) {
            if (input.submitter.name) data.append(input.submitter.name, input.submitter.value);
          }
        } else data = input;
        return new Promise((resolve) => {
          if (data instanceof FormData) state2.formData = data;
          state2.isRunning = true;
          loc2.isNavigating = true;
          currentAction2.value = {
            data,
            id: id2,
            resolve: noSerialize(resolve),
          };
        }).then(({ result, status }) => {
          state2.isRunning = false;
          state2.status = status;
          state2.value = result;
          if (form) {
            if (form.getAttribute('data-spa-reset') === 'true') form.reset();
            const detail = {
              status,
              value: result,
            };
            form.dispatchEvent(
              new CustomEvent('submitcompleted', {
                bubbles: false,
                cancelable: false,
                composed: false,
                detail,
              })
            );
          }
          return {
            status,
            value: result,
          };
        });
      },
      'routeActionQrl_action_submit_A5bZC7WO00A',
      [currentAction, id, loc, state]
    );
    initialState.submit = submit;
    return state;
  }
  action.__brand = 'server_action';
  action.__validators = validators;
  action.__qrl = actionQrl;
  action.__id = id;
  Object.freeze(action);
  return action;
};
const globalActionQrl = (actionQrl, ...rest) => {
  const action = routeActionQrl(actionQrl, ...rest);
  if (isServer) {
    if (typeof globalThis._qwikActionsMap === 'undefined')
      globalThis._qwikActionsMap = /* @__PURE__ */ new Map();
    globalThis._qwikActionsMap.set(action.__id, action);
  }
  return action;
};
const routeAction$ = /* @__PURE__ */ implicit$FirstArg(routeActionQrl);
const globalAction$ = /* @__PURE__ */ implicit$FirstArg(globalActionQrl);
const routeLoaderQrl = (loaderQrl, ...rest) => {
  const { id, validators } = getValidators(rest, loaderQrl);
  function loader() {
    return useContext(RouteStateContext, (state) => {
      if (!(id in state))
        throw new Error(`Loader (${id}) was used in a path where the 'loader$' was not declared.
    This is likely because the used loader was not exported in a layout.tsx or index.tsx file of the existing route.
    For more information check: https://qwik.dev/docs/route-loader/`);
      return _wrapSignal(state, id);
    });
  }
  loader.__brand = 'server_loader';
  loader.__qrl = loaderQrl;
  loader.__validators = validators;
  loader.__id = id;
  Object.freeze(loader);
  return loader;
};
const routeLoader$ = /* @__PURE__ */ implicit$FirstArg(routeLoaderQrl);
const validatorQrl = (validator) => {
  if (isServer)
    return {
      validate: validator,
    };
  return void 0;
};
const validator$ = /* @__PURE__ */ implicit$FirstArg(validatorQrl);
const zodQrl = (qrl) => {
  if (isServer) {
    const schema = qrl.resolve().then((obj) => {
      if (typeof obj === 'function') obj = obj(z);
      if (obj instanceof z.Schema) return obj;
      else return z.object(obj);
    });
    return {
      async validate(ev, inputData) {
        const data = inputData ?? (await ev.parseBody());
        const result = await (await schema).safeParseAsync(data);
        if (result.success) return result;
        else {
          if (isDev)
            console.error(
              '\nVALIDATION ERROR\naction$() zod validated failed',
              '\n  - Issues:',
              result.error.issues
            );
          return {
            success: false,
            status: 400,
            error: result.error.flatten(),
          };
        }
      },
    };
  }
  return void 0;
};
const zod$ = /* @__PURE__ */ implicit$FirstArg(zodQrl);
const serverQrl = (qrl) => {
  if (isServer) {
    const captured = qrl.getCaptured();
    if (captured && captured.length > 0 && !_getContextElement())
      throw new Error('For security reasons, we cannot serialize QRLs that capture lexical scope.');
  }
  function stuff() {
    return /* @__PURE__ */ inlinedQrl(
      async (...args) => {
        const [qrl2] = useLexicalScope();
        if (isServer) {
          const requestEvent = useQwikRouterEnv()?.ev;
          return qrl2.apply(requestEvent, args);
        } else {
          const ctxElm = _getContextElement();
          const filtered = args.map((arg) => {
            if (arg instanceof SubmitEvent && arg.target instanceof HTMLFormElement)
              return new FormData(arg.target);
            else if (arg instanceof Event) return null;
            else if (arg instanceof Node) return null;
            return arg;
          });
          const hash = qrl2.getHash();
          const path = `?qfunc=${qrl2.getHash()}`;
          const body = await _serializeData([qrl2, ...filtered], false);
          const res = await fetch(path, {
            method: 'POST',
            headers: {
              'Content-Type': 'application/qwik-json',
              'X-QRL': hash,
            },
            body,
          });
          const contentType = res.headers.get('Content-Type');
          if (res.ok && contentType === 'text/event-stream') {
            const { writable, readable } = getSSETransformer();
            res.body?.pipeTo(writable);
            return streamAsyncIterator(readable, ctxElm ?? document.documentElement);
          } else if (contentType === 'application/qwik-json') {
            const str = await res.text();
            const obj = await _deserializeData(str, ctxElm ?? document.documentElement);
            if (res.status === 500) throw obj;
            return obj;
          }
        }
      },
      'serverQrl_stuff_wOIPfiQ04l4',
      [qrl]
    );
  }
  return stuff();
};
const server$ = /* @__PURE__ */ implicit$FirstArg(serverQrl);
const getValidators = (rest, qrl) => {
  let id;
  const validators = [];
  if (rest.length === 1) {
    const options = rest[0];
    if (options && typeof options === 'object') {
      if ('validate' in options) validators.push(options);
      else {
        id = options.id;
        if (options.validation) validators.push(...options.validation);
      }
    }
  } else if (rest.length > 1) validators.push(...rest.filter((v) => !!v));
  if (typeof id === 'string') {
    if (isDev) {
      if (!/^[\w/.-]+$/.test(id))
        throw new Error(`Invalid id: ${id}, id can only contain [a-zA-Z0-9_.-]`);
    }
    id = `id_${id}`;
  } else id = qrl.getHash();
  return {
    validators: validators.reverse(),
    id,
  };
};
const getSSETransformer = () => {
  let currentLine = '';
  const encoder = new TextDecoder();
  const transformer = new TransformStream({
    transform(chunk, controller) {
      const lines = encoder.decode(chunk).split('\n\n');
      for (let i = 0; i < lines.length - 1; i++) {
        const line = currentLine + lines[i];
        if (line.length === 0) {
          controller.terminate();
          break;
        } else {
          controller.enqueue(parseEvent(line));
          currentLine = '';
        }
      }
      currentLine += lines[lines.length - 1];
    },
  });
  return transformer;
};
const parseEvent = (message) => {
  const lines = message.split('\n');
  const event = {
    data: '',
  };
  let data = '';
  for (const line of lines)
    if (line.startsWith('data: ')) data += line.slice(6) + '\n';
    else {
      const [key, value] = line.split(':');
      if (typeof key === 'string' && typeof value === 'string') event[key] = value.trim();
    }
  event.data = data;
  return event;
};
async function* streamAsyncIterator(stream, ctxElm) {
  const reader = stream.getReader();
  try {
    while (true) {
      const { done, value } = await reader.read();
      if (done) return;
      const obj = await _deserializeData(value.data, ctxElm);
      yield obj;
    }
  } finally {
    reader.releaseLock();
  }
}
const Form = ({ action, spaReset, reloadDocument, onSubmit$, ...rest }, key) => {
  _jsxBranch();
  if (action)
    return _jsxSplit(
      'form',
      {
        ...rest,
        action: _wrapSignal(action, 'actionPath'),
        'preventdefault:submit': !reloadDocument,
        ['data-spa-reset']: spaReset ? 'true' : void 0,
        onSubmit$: [!reloadDocument ? action.submit : void 0, onSubmit$],
      },
      {
        method: 'post',
      },
      0,
      key
    );
  else
    return /* @__PURE__ */ _jsxSplit(
      GetForm,
      {
        spaReset,
        reloadDocument,
        onSubmit$,
        ...rest,
      },
      0,
      key
    );
};
const GetForm = /* @__PURE__ */ componentQrl(
  /* @__PURE__ */ inlinedQrl((props) => {
    const rest = _restProps(props, ['action', 'spaReset', 'reloadDocument', 'onSubmit$']);
    const nav = useNavigate();
    return /* @__PURE__ */ _jsxSplit(
      'form',
      {
        ...rest,
        children: /* @__PURE__ */ _jsxSplit(Slot, null, 3, 'BC_0'),
        onSubmit$: /* @__PURE__ */ inlinedQrl(
          async (_, form) => {
            const [nav2] = useLexicalScope();
            const formData = new FormData(form);
            const params = new URLSearchParams();
            formData.forEach((value, key) => {
              if (typeof value === 'string') params.append(key, value);
            });
            nav2('?' + params.toString(), true).then(() => {
              if (form.getAttribute('data-spa-reset') === 'true') form.reset();
              form.dispatchEvent(
                new CustomEvent('submitcompleted', {
                  bubbles: false,
                  cancelable: false,
                  composed: false,
                  detail: {
                    status: 200,
                  },
                })
              );
            });
          },
          'GetForm_component_form_onSubmit_p9MSze0ojs4',
          [nav]
        ),
      },
      {
        action: 'get',
        'preventdefault:submit': _fnSignal(
          (p0) => !p0.reloadDocument,
          [props],
          '!p0.reloadDocument'
        ),
        'data-spa-reset': _fnSignal(
          (p0) => (p0.spaReset ? 'true' : void 0),
          [props],
          'p0.spaReset?"true":undefined'
        ),
      },
      0,
      'BC_1'
    );
  }, 'GetForm_component_Nk9PlpjQm9Y')
);
export {
  Form,
  globalAction$,
  globalActionQrl,
  Link,
  QwikRouterMockProvider,
  QwikRouterProvider as QwikRouterProvider,
  routeAction$,
  routeActionQrl,
  routeLoader$,
  routeLoaderQrl,
  RouterOutlet,
  server$,
  serverQrl,
  ServiceWorkerRegister,
  useContent,
  useDocumentHead,
  useLocation,
  useNavigate,
  validator$,
  validatorQrl,
  z2 as z,
  zod$,
  zodQrl,
};

============================= ../node_modules/@qwik.dev/router/index.qwik.mjs ==

import { _addLoc } from "@qwik.dev/core/internal";
import * as qwikRouterConfig from '@qwik-router-config';
import swRegister from '@qwik-router-sw-register';
import { _deserializeData, _fnSignal, _getContextElement, _jsxBranch, _jsxSplit, _restProps, _serializeData, _weakSerialize, _wrapSignal, componentQrl, createContextId, eventQrl, getLocale, implicit$FirstArg, inlinedQrl, noSerialize, SkipRender, Slot, untrack, useContext, useContextProvider, useLexicalScope, useOnDocument, useServerData, useSignal, useStore, useStylesQrl, useTaskQrl, withLocale } from '@qwik.dev/core';
import { isBrowser, isDev, isServer } from '@qwik.dev/core/build';
import { z, z as z2 } from 'zod';
const RouteStateContext = /* @__PURE__ */ _addLoc(createContextId('qc-s'), "../node_modules/@qwik.dev/router/index.qwik.mjs", 37, 43);
const ContentContext = /* @__PURE__ */ _addLoc(createContextId('qc-c'), "../node_modules/@qwik.dev/router/index.qwik.mjs", 38, 40);
const ContentInternalContext = /* @__PURE__ */ _addLoc(createContextId('qc-ic'), "../node_modules/@qwik.dev/router/index.qwik.mjs", 39, 48);
const DocumentHeadContext = /* @__PURE__ */ _addLoc(createContextId('qc-h'), "../node_modules/@qwik.dev/router/index.qwik.mjs", 40, 45);
const RouteLocationContext = /* @__PURE__ */ _addLoc(createContextId('qc-l'), "../node_modules/@qwik.dev/router/index.qwik.mjs", 41, 46);
const RouteNavigateContext = /* @__PURE__ */ _addLoc(createContextId('qc-n'), "../node_modules/@qwik.dev/router/index.qwik.mjs", 42, 46);
const RouteActionContext = /* @__PURE__ */ _addLoc(createContextId('qc-a'), "../node_modules/@qwik.dev/router/index.qwik.mjs", 43, 44);
const RouterOutlet = /* @__PURE__ */ _addLoc(componentQrl(/* @__PURE__ */ inlinedQrl(()=>{
    _jsxBranch();
    useOnDocument('qinit', eventQrl(/* @__PURE__ */ inlinedQrl(()=>{
        const POPSTATE_FALLBACK_INITIALIZED = _addLoc('_qRouterPopstateFallback', "../node_modules/@qwik.dev/router/index.qwik.mjs", 51, 49);
        const CLIENT_HISTORY_INITIALIZED = _addLoc('_qRouterHistory', "../node_modules/@qwik.dev/router/index.qwik.mjs", 52, 46);
        if (!window[POPSTATE_FALLBACK_INITIALIZED]) {
            window[POPSTATE_FALLBACK_INITIALIZED] = ()=>{
                if (!window[CLIENT_HISTORY_INITIALIZED]) location.reload();
            };
            setTimeout(()=>{
                addEventListener('popstate', window[POPSTATE_FALLBACK_INITIALIZED]);
            }, 0);
        }
    }, 'RouterOutlet_component_useOnDocument_event_KnNE9eL0qfc')));
    const context = _addLoc(useContext(ContentInternalContext), "../node_modules/@qwik.dev/router/index.qwik.mjs", 64, 21);
    if (context.value && context.value.length > 0) {
        const contentsLen = _addLoc(context.value.length, "../node_modules/@qwik.dev/router/index.qwik.mjs", 66, 27);
        let cmp = _addLoc(null, "../node_modules/@qwik.dev/router/index.qwik.mjs", 67, 17);
        for(let i = _addLoc(contentsLen - 1, "../node_modules/@qwik.dev/router/index.qwik.mjs", 68, 20); i >= 0; i--)cmp = _jsxSplit(context.value[i].default, {
            children: cmp
        }, 1, 'k8_0');
        return cmp;
    }
    return SkipRender;
}, 'RouterOutlet_component_AKetNByE5TM')), "../node_modules/@qwik.dev/router/index.qwik.mjs", 44, 38);
const MODULE_CACHE = /* @__PURE__ */ _addLoc(new WeakMap(), "../node_modules/@qwik.dev/router/index.qwik.mjs", 82, 38);
const CLIENT_DATA_CACHE = /* @__PURE__ */ _addLoc(new Map(), "../node_modules/@qwik.dev/router/index.qwik.mjs", 83, 43);
const QACTION_KEY = _addLoc('qaction', "../node_modules/@qwik.dev/router/index.qwik.mjs", 84, 21);
const toPath = _addLoc((url)=>url.pathname + url.search + url.hash, "../node_modules/@qwik.dev/router/index.qwik.mjs", 85, 16);
const toUrl = _addLoc((url, baseUrl)=>new URL(url, baseUrl.href), "../node_modules/@qwik.dev/router/index.qwik.mjs", 86, 15);
const isSameOrigin = _addLoc((a, b)=>a.origin === b.origin, "../node_modules/@qwik.dev/router/index.qwik.mjs", 87, 22);
const isSamePath = _addLoc((a, b)=>a.pathname + a.search === b.pathname + b.search, "../node_modules/@qwik.dev/router/index.qwik.mjs", 88, 20);
const isSamePathname = _addLoc((a, b)=>a.pathname === b.pathname, "../node_modules/@qwik.dev/router/index.qwik.mjs", 89, 24);
const isSameOriginDifferentPathname = _addLoc((a, b)=>isSameOrigin(a, b) && !isSamePath(a, b), "../node_modules/@qwik.dev/router/index.qwik.mjs", 90, 39);
const getClientDataPath = _addLoc((pathname, pageSearch, action)=>{
    let search = _addLoc(pageSearch ?? '', "../node_modules/@qwik.dev/router/index.qwik.mjs", 92, 16);
    if (action) search += (search ? '&' : '?') + QACTION_KEY + '=' + encodeURIComponent(action.id);
    return pathname + (pathname.endsWith('/') ? '' : '/') + 'q-data.json' + search;
}, "../node_modules/@qwik.dev/router/index.qwik.mjs", 91, 27);
const getClientNavPath = _addLoc((props, baseUrl)=>{
    const href = _addLoc(props.href, "../node_modules/@qwik.dev/router/index.qwik.mjs", 97, 16);
    if (typeof href === 'string' && href.trim() !== '' && typeof props.target !== 'string') try {
        const linkUrl = _addLoc(toUrl(href, baseUrl.url), "../node_modules/@qwik.dev/router/index.qwik.mjs", 100, 23);
        const currentUrl = _addLoc(toUrl('', baseUrl.url), "../node_modules/@qwik.dev/router/index.qwik.mjs", 101, 26);
        if (isSameOrigin(linkUrl, currentUrl)) return toPath(linkUrl);
    } catch (e) {
        console.error(e);
    }
    else if (props.reload) return toPath(toUrl('', baseUrl.url));
    return null;
}, "../node_modules/@qwik.dev/router/index.qwik.mjs", 96, 26);
const getPrefetchDataset = _addLoc((props, clientNavPath, currentLoc)=>{
    if (props.prefetch === true && clientNavPath) {
        const prefetchUrl = _addLoc(toUrl(clientNavPath, currentLoc.url), "../node_modules/@qwik.dev/router/index.qwik.mjs", 111, 25);
        if (!isSamePathname(prefetchUrl, toUrl('', currentLoc.url))) return '';
    }
    return null;
}, "../node_modules/@qwik.dev/router/index.qwik.mjs", 109, 28);
const clientNavigate = _addLoc((win, newUrl, routeNavigate)=>{
    const currentUrl = _addLoc(win.location, "../node_modules/@qwik.dev/router/index.qwik.mjs", 117, 22);
    if (isSameOriginDifferentPathname(currentUrl, newUrl)) {
        handleScroll(win, currentUrl, newUrl);
        win.history.pushState('', '', toPath(newUrl));
    }
    if (!win._qRouterHistory) {
        win._qRouterHistory = 1;
        win.addEventListener('popstate', ()=>{
            const currentUrl2 = _addLoc(win.location, "../node_modules/@qwik.dev/router/index.qwik.mjs", 125, 27);
            const previousUrl = _addLoc(toUrl(routeNavigate.value, currentUrl2), "../node_modules/@qwik.dev/router/index.qwik.mjs", 126, 27);
            if (isSameOriginDifferentPathname(currentUrl2, previousUrl)) {
                handleScroll(win, previousUrl, currentUrl2);
                routeNavigate.value = toPath(new URL(currentUrl2.href));
            }
        });
        win.removeEventListener('popstate', win._qRouterPopstateFallback);
    }
}, "../node_modules/@qwik.dev/router/index.qwik.mjs", 116, 24);
const handleScroll = _addLoc(async (win, previousUrl, newUrl)=>{
    const doc = _addLoc(win.document, "../node_modules/@qwik.dev/router/index.qwik.mjs", 136, 15);
    const newHash = _addLoc(newUrl.hash, "../node_modules/@qwik.dev/router/index.qwik.mjs", 137, 19);
    if (isSamePath(previousUrl, newUrl)) {
        if (previousUrl.hash !== newHash) {
            await domWait();
            if (newHash) scrollToHashId(doc, newHash);
            else win.scrollTo(0, 0);
        }
    } else {
        if (newHash) for(let i = _addLoc(0, "../node_modules/@qwik.dev/router/index.qwik.mjs", 146, 20); i < 24; i++){
            await domWait();
            if (scrollToHashId(doc, newHash)) break;
        }
        else {
            await domWait();
            win.scrollTo(0, 0);
        }
    }
}, "../node_modules/@qwik.dev/router/index.qwik.mjs", 135, 22);
const domWait = _addLoc(()=>new Promise((resolve)=>setTimeout(resolve, 12)), "../node_modules/@qwik.dev/router/index.qwik.mjs", 156, 17);
const scrollToHashId = _addLoc((doc, hash)=>{
    const elmId = _addLoc(hash.slice(1), "../node_modules/@qwik.dev/router/index.qwik.mjs", 158, 17);
    const elm = _addLoc(doc.getElementById(elmId), "../node_modules/@qwik.dev/router/index.qwik.mjs", 159, 15);
    if (elm) elm.scrollIntoView();
    return elm;
}, "../node_modules/@qwik.dev/router/index.qwik.mjs", 157, 24);
const dispatchPrefetchEvent = _addLoc((prefetchData)=>{
    if (typeof document !== 'undefined') document.dispatchEvent(new CustomEvent('qprefetch', {
        detail: prefetchData
    }));
}, "../node_modules/@qwik.dev/router/index.qwik.mjs", 163, 31);
const resolveHead = _addLoc((endpoint, routeLocation, contentModules, locale)=>{
    const head = _addLoc(createDocumentHead(), "../node_modules/@qwik.dev/router/index.qwik.mjs", 172, 16);
    const getData = _addLoc((loaderOrAction)=>{
        const id = _addLoc(loaderOrAction.__id, "../node_modules/@qwik.dev/router/index.qwik.mjs", 174, 16);
        if (loaderOrAction.__brand === 'server_loader') {
            if (!(id in endpoint.loaders)) throw new Error('You can not get the returned data of a loader that has not been executed for this request.');
        }
        const data = _addLoc(endpoint.loaders[id], "../node_modules/@qwik.dev/router/index.qwik.mjs", 181, 18);
        if (data instanceof Promise) throw new Error('Loaders returning a function can not be referred to in the head function.');
        return data;
    }, "../node_modules/@qwik.dev/router/index.qwik.mjs", 173, 19);
    const headProps = _addLoc({
        head,
        withLocale: (fn)=>withLocale(locale, fn),
        resolveValue: getData,
        ...routeLocation
    }, "../node_modules/@qwik.dev/router/index.qwik.mjs", 186, 21);
    for(let i = _addLoc(contentModules.length - 1, "../node_modules/@qwik.dev/router/index.qwik.mjs", 192, 16); i >= 0; i--){
        const contentModuleHead = _addLoc(contentModules[i] && contentModules[i].head, "../node_modules/@qwik.dev/router/index.qwik.mjs", 193, 31);
        if (contentModuleHead) {
            if (typeof contentModuleHead === 'function') resolveDocumentHead(head, withLocale(locale, ()=>contentModuleHead(headProps)));
            else if (typeof contentModuleHead === 'object') resolveDocumentHead(head, contentModuleHead);
        }
    }
    return headProps.head;
}, "../node_modules/@qwik.dev/router/index.qwik.mjs", 171, 21);
const resolveDocumentHead = _addLoc((resolvedHead, updatedHead)=>{
    if (typeof updatedHead.title === 'string') resolvedHead.title = updatedHead.title;
    mergeArray(resolvedHead.meta, updatedHead.meta);
    mergeArray(resolvedHead.links, updatedHead.links);
    mergeArray(resolvedHead.styles, updatedHead.styles);
    Object.assign(resolvedHead.frontmatter, updatedHead.frontmatter);
}, "../node_modules/@qwik.dev/router/index.qwik.mjs", 205, 29);
const mergeArray = _addLoc((existingArr, newArr)=>{
    if (Array.isArray(newArr)) for (const newItem of newArr){
        if (typeof newItem.key === 'string') {
            const existingIndex = _addLoc(existingArr.findIndex((i)=>i.key === newItem.key), "../node_modules/@qwik.dev/router/index.qwik.mjs", 216, 31);
            if (existingIndex > -1) {
                existingArr[existingIndex] = newItem;
                continue;
            }
        }
        existingArr.push(newItem);
    }
}, "../node_modules/@qwik.dev/router/index.qwik.mjs", 212, 20);
const createDocumentHead = _addLoc(()=>({
        title: '',
        meta: [],
        links: [],
        styles: [],
        frontmatter: {}
    }), "../node_modules/@qwik.dev/router/index.qwik.mjs", 225, 28);
const loadRoute = _addLoc(async (routes, menus, cacheModules, pathname)=>{
    if (Array.isArray(routes)) for (const route of routes){
        const match = _addLoc(route[0].exec(pathname), "../node_modules/@qwik.dev/router/index.qwik.mjs", 235, 21);
        if (match) {
            const loaders = _addLoc(route[1], "../node_modules/@qwik.dev/router/index.qwik.mjs", 237, 25);
            const params = _addLoc(getPathParams(route[2], match), "../node_modules/@qwik.dev/router/index.qwik.mjs", 238, 24);
            const routeBundleNames = _addLoc(route[4], "../node_modules/@qwik.dev/router/index.qwik.mjs", 239, 34);
            const mods = _addLoc(new Array(loaders.length), "../node_modules/@qwik.dev/router/index.qwik.mjs", 240, 22);
            const pendingLoads = _addLoc([], "../node_modules/@qwik.dev/router/index.qwik.mjs", 241, 30);
            const menuLoader = _addLoc(getMenuLoader(menus, pathname), "../node_modules/@qwik.dev/router/index.qwik.mjs", 242, 28);
            let menu = _addLoc(void 0, "../node_modules/@qwik.dev/router/index.qwik.mjs", 243, 20);
            loaders.forEach((moduleLoader, i)=>{
                loadModule(moduleLoader, pendingLoads, (routeModule)=>mods[i] = routeModule, cacheModules);
            });
            loadModule(menuLoader, pendingLoads, (menuModule)=>menu = menuModule?.default, cacheModules);
            if (pendingLoads.length > 0) await Promise.all(pendingLoads);
            return [
                params,
                mods,
                menu,
                routeBundleNames
            ];
        }
    }
    return null;
}, "../node_modules/@qwik.dev/router/index.qwik.mjs", 232, 19);
const loadModule = _addLoc((moduleLoader, pendingLoads, moduleSetter, cacheModules)=>{
    if (typeof moduleLoader === 'function') {
        const loadedModule = _addLoc(MODULE_CACHE.get(moduleLoader), "../node_modules/@qwik.dev/router/index.qwik.mjs", 266, 26);
        if (loadedModule) moduleSetter(loadedModule);
        else {
            const l = _addLoc(moduleLoader(), "../node_modules/@qwik.dev/router/index.qwik.mjs", 269, 17);
            if (typeof l.then === 'function') pendingLoads.push(l.then((loadedModule2)=>{
                if (cacheModules !== false) MODULE_CACHE.set(moduleLoader, loadedModule2);
                moduleSetter(loadedModule2);
            }));
            else if (l) moduleSetter(l);
        }
    }
}, "../node_modules/@qwik.dev/router/index.qwik.mjs", 264, 20);
const getMenuLoader = _addLoc((menus, pathname)=>{
    if (menus) {
        pathname = pathname.endsWith('/') ? pathname : pathname + '/';
        const menu = _addLoc(menus.find((m)=>m[0] === pathname || pathname.startsWith(m[0] + (pathname.endsWith('/') ? '' : '/'))), "../node_modules/@qwik.dev/router/index.qwik.mjs", 284, 18);
        if (menu) return menu[1];
    }
}, "../node_modules/@qwik.dev/router/index.qwik.mjs", 281, 23);
const getPathParams = _addLoc((paramNames, match)=>{
    const params = _addLoc({}, "../node_modules/@qwik.dev/router/index.qwik.mjs", 291, 18);
    if (paramNames) for(let i = _addLoc(0, "../node_modules/@qwik.dev/router/index.qwik.mjs", 293, 18); i < paramNames.length; i++){
        const param = _addLoc(match?.[i + 1] ?? '', "../node_modules/@qwik.dev/router/index.qwik.mjs", 294, 21);
        const v = _addLoc(param.endsWith('/') ? param.slice(0, -1) : param, "../node_modules/@qwik.dev/router/index.qwik.mjs", 295, 17);
        params[paramNames[i]] = decodeURIComponent(v);
    }
    return params;
}, "../node_modules/@qwik.dev/router/index.qwik.mjs", 290, 23);
const loadClientData = _addLoc(async (url, element, clearCache, action)=>{
    const pagePathname = _addLoc(url.pathname, "../node_modules/@qwik.dev/router/index.qwik.mjs", 301, 24);
    const pageSearch = _addLoc(url.search, "../node_modules/@qwik.dev/router/index.qwik.mjs", 302, 22);
    const clientDataPath = _addLoc(getClientDataPath(pagePathname, pageSearch, action), "../node_modules/@qwik.dev/router/index.qwik.mjs", 303, 26);
    let qData = _addLoc(void 0, "../node_modules/@qwik.dev/router/index.qwik.mjs", 304, 15);
    if (!action) qData = CLIENT_DATA_CACHE.get(clientDataPath);
    dispatchPrefetchEvent({
        links: [
            pagePathname
        ]
    });
    if (!qData) {
        const options = _addLoc(getFetchOptions(action), "../node_modules/@qwik.dev/router/index.qwik.mjs", 310, 21);
        if (action) action.data = void 0;
        qData = fetch(clientDataPath, options).then((rsp)=>{
            const redirectedURL = _addLoc(new URL(rsp.url), "../node_modules/@qwik.dev/router/index.qwik.mjs", 313, 29);
            if (redirectedURL.origin !== location.origin || !isQDataJson(redirectedURL.pathname)) {
                location.href = redirectedURL.href;
                return;
            }
            if ((rsp.headers.get('content-type') || '').includes('json')) return rsp.text().then((text)=>{
                const clientData = _addLoc(_deserializeData(text, element), "../node_modules/@qwik.dev/router/index.qwik.mjs", 320, 30);
                if (!clientData) {
                    location.href = url.href;
                    return;
                }
                if (clearCache) CLIENT_DATA_CACHE.delete(clientDataPath);
                if (clientData.redirect) location.href = clientData.redirect;
                else if (action) {
                    const actionData = _addLoc(clientData.loaders[action.id], "../node_modules/@qwik.dev/router/index.qwik.mjs", 328, 32);
                    action.resolve({
                        status: rsp.status,
                        result: actionData
                    });
                }
                return clientData;
            });
            else {
                location.href = url.href;
                return void 0;
            }
        });
        if (!action) CLIENT_DATA_CACHE.set(clientDataPath, qData);
    }
    return qData.then((v)=>{
        if (!v) CLIENT_DATA_CACHE.delete(clientDataPath);
        return v;
    });
}, "../node_modules/@qwik.dev/router/index.qwik.mjs", 300, 24);
const getFetchOptions = _addLoc((action)=>{
    const actionData = _addLoc(action?.data, "../node_modules/@qwik.dev/router/index.qwik.mjs", 349, 22);
    if (!actionData) return void 0;
    if (actionData instanceof FormData) return {
        method: 'POST',
        body: actionData
    };
    else return {
        method: 'POST',
        body: JSON.stringify(actionData),
        headers: {
            'Content-Type': 'application/json, charset=UTF-8'
        }
    };
}, "../node_modules/@qwik.dev/router/index.qwik.mjs", 348, 25);
const isQDataJson = _addLoc((pathname)=>{
    return pathname.endsWith(QDATA_JSON);
}, "../node_modules/@qwik.dev/router/index.qwik.mjs", 365, 21);
const QDATA_JSON = _addLoc('/q-data.json', "../node_modules/@qwik.dev/router/index.qwik.mjs", 368, 20);
const useContent = _addLoc(()=>useContext(ContentContext), "../node_modules/@qwik.dev/router/index.qwik.mjs", 369, 20);
const useDocumentHead = _addLoc(()=>useContext(DocumentHeadContext), "../node_modules/@qwik.dev/router/index.qwik.mjs", 370, 25);
const useLocation = _addLoc(()=>useContext(RouteLocationContext), "../node_modules/@qwik.dev/router/index.qwik.mjs", 371, 21);
const useNavigate = _addLoc(()=>useContext(RouteNavigateContext), "../node_modules/@qwik.dev/router/index.qwik.mjs", 372, 21);
const useAction = _addLoc(()=>useContext(RouteActionContext), "../node_modules/@qwik.dev/router/index.qwik.mjs", 373, 19);
const useQwikRouterEnv = _addLoc(()=>noSerialize(useServerData('qwikrouter')), "../node_modules/@qwik.dev/router/index.qwik.mjs", 374, 26);
const QwikRouterProvider = /* @__PURE__ */ _addLoc(componentQrl(/* @__PURE__ */ inlinedQrl((props)=>{
    useStylesQrl(/* @__PURE__ */ inlinedQrl(`:root{view-transition-name: none}`, 'QwikRouterProvider_component_useStyles_RPDJAz33WLA'));
    const env = _addLoc(useQwikRouterEnv(), "../node_modules/@qwik.dev/router/index.qwik.mjs", 383, 17);
    if (!env?.params) throw new Error(`Missing Qwik Router Env Data`);
    const urlEnv = _addLoc(useServerData('url'), "../node_modules/@qwik.dev/router/index.qwik.mjs", 385, 20);
    if (!urlEnv) throw new Error(`Missing Qwik URL Env Data`);
    const url = _addLoc(new URL(urlEnv), "../node_modules/@qwik.dev/router/index.qwik.mjs", 387, 17);
    const routeLocation = _addLoc(useStore({
        url,
        params: env.params,
        isNavigating: false
    }, {
        deep: false
    }), "../node_modules/@qwik.dev/router/index.qwik.mjs", 388, 27);
    const loaderState = _addLoc(_weakSerialize(useStore(env.response.loaders, {
        deep: false
    })), "../node_modules/@qwik.dev/router/index.qwik.mjs", 398, 25);
    const navPath = _addLoc(useSignal(toPath(url)), "../node_modules/@qwik.dev/router/index.qwik.mjs", 403, 21);
    const documentHead = _addLoc(useStore(createDocumentHead), "../node_modules/@qwik.dev/router/index.qwik.mjs", 404, 26);
    const content = _addLoc(useStore({
        headings: void 0,
        menu: void 0
    }), "../node_modules/@qwik.dev/router/index.qwik.mjs", 405, 21);
    const contentInternal = _addLoc(useSignal(), "../node_modules/@qwik.dev/router/index.qwik.mjs", 409, 29);
    const currentActionId = _addLoc(env.response.action, "../node_modules/@qwik.dev/router/index.qwik.mjs", 410, 29);
    const currentAction = _addLoc(currentActionId ? env.response.loaders[currentActionId] : void 0, "../node_modules/@qwik.dev/router/index.qwik.mjs", 411, 27);
    const actionState = _addLoc(useSignal(currentAction ? {
        id: currentActionId,
        data: env.response.formData,
        output: {
            result: currentAction,
            status: env.response.status
        }
    } : void 0), "../node_modules/@qwik.dev/router/index.qwik.mjs", 412, 25);
    const goto = _addLoc(eventQrl(/* @__PURE__ */ inlinedQrl(async (path, forceReload)=>{
        const [actionState2, navPath2, routeLocation2] = useLexicalScope();
        if (path === void 0) {
            path = navPath2.value;
            navPath2.value = '';
        } else if (forceReload) navPath2.value = '';
        const resolvedURL = _addLoc(new URL(path, routeLocation2.url), "../node_modules/@qwik.dev/router/index.qwik.mjs", 432, 31);
        path = toPath(resolvedURL);
        if (!forceReload && navPath2.value === path) return;
        navPath2.value = path;
        if (isBrowser) {
            loadClientData(resolvedURL, _getContextElement());
            loadRoute(qwikRouterConfig.routes, qwikRouterConfig.menus, qwikRouterConfig.cacheModules, resolvedURL.pathname);
        }
        actionState2.value = void 0;
        routeLocation2.isNavigating = true;
    }, 'QwikRouterProvider_component_goto_event_cBcjROynRVg', [
        actionState,
        navPath,
        routeLocation
    ])), "../node_modules/@qwik.dev/router/index.qwik.mjs", 424, 18);
    useContextProvider(ContentContext, content);
    useContextProvider(ContentInternalContext, contentInternal);
    useContextProvider(DocumentHeadContext, documentHead);
    useContextProvider(RouteLocationContext, routeLocation);
    useContextProvider(RouteNavigateContext, goto);
    useContextProvider(RouteStateContext, loaderState);
    useContextProvider(RouteActionContext, actionState);
    useTaskQrl(/* @__PURE__ */ inlinedQrl(({ track })=>{
        const [actionState2, content2, contentInternal2, documentHead2, env2, loaderState2, navPath2, props2, routeLocation2, url2] = useLexicalScope();
        async function run() {
            const [path, action] = track(()=>[
                    navPath2.value,
                    actionState2.value
                ]);
            const locale = _addLoc(getLocale(''), "../node_modules/@qwik.dev/router/index.qwik.mjs", 476, 28);
            let trackUrl;
            let clientPageData;
            let loadedRoute = _addLoc(null, "../node_modules/@qwik.dev/router/index.qwik.mjs", 479, 31);
            if (isServer) {
                trackUrl = new URL(path, routeLocation2.url);
                loadedRoute = env2.loadedRoute;
                clientPageData = env2.response;
            } else {
                trackUrl = new URL(path, location);
                if (trackUrl.pathname.endsWith('/')) {
                    if (!qwikRouterConfig.trailingSlash) trackUrl.pathname = trackUrl.pathname.slice(0, -1);
                } else if (qwikRouterConfig.trailingSlash) trackUrl.pathname += '/';
                let loadRoutePromise = _addLoc(loadRoute(qwikRouterConfig.routes, qwikRouterConfig.menus, qwikRouterConfig.cacheModules, trackUrl.pathname), "../node_modules/@qwik.dev/router/index.qwik.mjs", 490, 38);
                const element = _addLoc(_getContextElement(), "../node_modules/@qwik.dev/router/index.qwik.mjs", 496, 31);
                const pageData = _addLoc(clientPageData = await loadClientData(trackUrl, element, true, action), "../node_modules/@qwik.dev/router/index.qwik.mjs", 497, 32);
                if (!pageData) {
                    navPath2.untrackedValue = toPath(trackUrl);
                    return;
                }
                const newHref = _addLoc(pageData.href, "../node_modules/@qwik.dev/router/index.qwik.mjs", 507, 31);
                const newURL = _addLoc(new URL(newHref, trackUrl.href), "../node_modules/@qwik.dev/router/index.qwik.mjs", 508, 30);
                if (newURL.pathname !== trackUrl.pathname) {
                    trackUrl = newURL;
                    loadRoutePromise = loadRoute(qwikRouterConfig.routes, qwikRouterConfig.menus, qwikRouterConfig.cacheModules, trackUrl.pathname);
                }
                loadedRoute = await loadRoutePromise;
            }
            if (loadedRoute) {
                const [params, mods, menu] = loadedRoute;
                const contentModules = _addLoc(mods, "../node_modules/@qwik.dev/router/index.qwik.mjs", 522, 38);
                const pageModule = _addLoc(contentModules[contentModules.length - 1], "../node_modules/@qwik.dev/router/index.qwik.mjs", 523, 34);
                routeLocation2.url = trackUrl;
                routeLocation2.params = {
                    ...params
                };
                navPath2.untrackedValue = toPath(trackUrl);
                const resolvedHead = _addLoc(resolveHead(clientPageData, routeLocation2, contentModules, locale), "../node_modules/@qwik.dev/router/index.qwik.mjs", 529, 36);
                content2.headings = pageModule.headings;
                content2.menu = menu;
                contentInternal2.value = noSerialize(contentModules);
                documentHead2.links = resolvedHead.links;
                documentHead2.meta = resolvedHead.meta;
                documentHead2.styles = resolvedHead.styles;
                documentHead2.title = resolvedHead.title;
                documentHead2.frontmatter = resolvedHead.frontmatter;
                if (isBrowser) {
                    if ((props2.viewTransition ?? true) && isSameOriginDifferentPathname(window.location, url2)) document.__q_view_transition__ = true;
                    const loaders = _addLoc(clientPageData?.loaders, "../node_modules/@qwik.dev/router/index.qwik.mjs", 549, 33);
                    if (loaders) Object.assign(loaderState2, loaders);
                    CLIENT_DATA_CACHE.clear();
                    clientNavigate(window, trackUrl, navPath2);
                    routeLocation2.isNavigating = false;
                }
            }
        }
        const promise = _addLoc(run(), "../node_modules/@qwik.dev/router/index.qwik.mjs", 557, 27);
        if (isServer) return promise;
        else return;
    }, 'QwikRouterProvider_component_useTask_02wMImzEAbk', [
        actionState,
        content,
        contentInternal,
        documentHead,
        env,
        loaderState,
        navPath,
        props,
        routeLocation,
        url
    ]));
    return /* @__PURE__ */ _jsxSplit(Slot, null, 3, 'qY_0');
}, 'QwikRouterProvider_component_TxCFOy819ag')), "../node_modules/@qwik.dev/router/index.qwik.mjs", 375, 44);
const QwikRouterMockProvider = /* @__PURE__ */ _addLoc(componentQrl(/* @__PURE__ */ inlinedQrl((props)=>{
    const urlEnv = _addLoc(props.url ?? 'http://localhost/', "../node_modules/@qwik.dev/router/index.qwik.mjs", 581, 20);
    const url = _addLoc(new URL(urlEnv), "../node_modules/@qwik.dev/router/index.qwik.mjs", 582, 17);
    const routeLocation = _addLoc(useStore({
        url,
        params: props.params ?? {},
        isNavigating: false
    }, {
        deep: false
    }), "../node_modules/@qwik.dev/router/index.qwik.mjs", 583, 27);
    const loaderState = _addLoc(useSignal({}), "../node_modules/@qwik.dev/router/index.qwik.mjs", 593, 25);
    const goto = /* @__PURE__ */ _addLoc(inlinedQrl(async (path)=>{
        throw new Error('Not implemented');
    }, 'QwikRouterMockProvider_component_goto_BUbtvTyvVRE'), "../node_modules/@qwik.dev/router/index.qwik.mjs", 594, 34);
    const documentHead = _addLoc(useStore(createDocumentHead, {
        deep: false
    }), "../node_modules/@qwik.dev/router/index.qwik.mjs", 597, 26);
    const content = _addLoc(useStore({
        headings: void 0,
        menu: void 0
    }, {
        deep: false
    }), "../node_modules/@qwik.dev/router/index.qwik.mjs", 600, 21);
    const contentInternal = _addLoc(useSignal(), "../node_modules/@qwik.dev/router/index.qwik.mjs", 609, 29);
    useContextProvider(ContentContext, content);
    useContextProvider(ContentInternalContext, contentInternal);
    useContextProvider(DocumentHeadContext, documentHead);
    useContextProvider(RouteLocationContext, routeLocation);
    useContextProvider(RouteNavigateContext, goto);
    useContextProvider(RouteStateContext, loaderState);
    return /* @__PURE__ */ _jsxSplit(Slot, null, 3, 'qY_1');
}, 'QwikRouterMockProvider_component_WmYC5H00wtI')), "../node_modules/@qwik.dev/router/index.qwik.mjs", 579, 48);
const Link = /* @__PURE__ */ _addLoc(componentQrl(/* @__PURE__ */ inlinedQrl((props)=>{
    const nav = _addLoc(useNavigate(), "../node_modules/@qwik.dev/router/index.qwik.mjs", 621, 17);
    const loc = _addLoc(useLocation(), "../node_modules/@qwik.dev/router/index.qwik.mjs", 622, 17);
    const linkProps = _addLoc({
        ...props
    }, "../node_modules/@qwik.dev/router/index.qwik.mjs", 623, 23);
    const clientNavPath = _addLoc(untrack(()=>getClientNavPath(linkProps, loc)), "../node_modules/@qwik.dev/router/index.qwik.mjs", 626, 27);
    const prefetchDataset = _addLoc(untrack(()=>getPrefetchDataset(props, clientNavPath, loc)), "../node_modules/@qwik.dev/router/index.qwik.mjs", 627, 29);
    const reload = _addLoc(!!linkProps.reload, "../node_modules/@qwik.dev/router/index.qwik.mjs", 628, 20);
    linkProps['preventdefault:click'] = !!clientNavPath;
    linkProps.href = clientNavPath || props.href;
    const event = _addLoc(eventQrl(/* @__PURE__ */ inlinedQrl((ev, elm)=>prefetchLinkResources(elm, ev.type === 'qvisible'), 'Link_component_event_event_5g4B0Gd1Wck')), "../node_modules/@qwik.dev/router/index.qwik.mjs", 631, 19);
    return /* @__PURE__ */ _jsxSplit('a', {
        ...linkProps,
        'data-prefetch': prefetchDataset,
        children: /* @__PURE__ */ _jsxSplit(Slot, null, null, 3, 'AD_0'),
        onClick$: /* @__PURE__ */ inlinedQrl((_, elm)=>{
            const [nav2, reload2] = useLexicalScope();
            if (elm.href) nav2(elm.href, reload2);
        }, 'Link_component_a_onClick_kzjavhDI3L0', [
            nav,
            reload
        ]),
        onMouseOver$: event,
        onFocus$: event,
        onQVisible$: event
    }, null, 0, 'AD_1');
}, 'Link_component_8gdLBszqbaM')), "../node_modules/@qwik.dev/router/index.qwik.mjs", 619, 30);
const prefetchLinkResources = _addLoc((elm, isOnVisible)=>{
    if (elm && elm.href && elm.hasAttribute('data-prefetch')) {
        if (!windowInnerWidth) windowInnerWidth = innerWidth;
        if (!isOnVisible || isOnVisible && windowInnerWidth < 520) loadClientData(new URL(elm.href), elm);
    }
}, "../node_modules/@qwik.dev/router/index.qwik.mjs", 661, 31);
let windowInnerWidth = _addLoc(0, "../node_modules/@qwik.dev/router/index.qwik.mjs", 668, 24);
const ServiceWorkerRegister = _addLoc((props)=>_jsxSplit('script', null, {
        nonce: _wrapSignal(props, 'nonce'),
        dangerouslySetInnerHTML: swRegister
    }, 3, '1Z_0'), "../node_modules/@qwik.dev/router/index.qwik.mjs", 669, 31);
const routeActionQrl = _addLoc((actionQrl, ...rest)=>{
    const { id, validators } = getValidators(rest, actionQrl);
    function action() {
        const loc = _addLoc(useLocation(), "../node_modules/@qwik.dev/router/index.qwik.mjs", 683, 17);
        const currentAction = _addLoc(useAction(), "../node_modules/@qwik.dev/router/index.qwik.mjs", 684, 27);
        const initialState = _addLoc({
            actionPath: `?${QACTION_KEY}=${id}`,
            isRunning: false,
            status: void 0,
            value: void 0,
            formData: void 0
        }, "../node_modules/@qwik.dev/router/index.qwik.mjs", 685, 26);
        const state = _addLoc(useStore(()=>{
            const value = _addLoc(currentAction.value, "../node_modules/@qwik.dev/router/index.qwik.mjs", 693, 21);
            if (value && value?.id === id) {
                const data = _addLoc(value.data, "../node_modules/@qwik.dev/router/index.qwik.mjs", 695, 22);
                if (data instanceof FormData) initialState.formData = data;
                if (value.output) {
                    const { status, result } = value.output;
                    initialState.status = status;
                    initialState.value = result;
                }
            }
            return initialState;
        }), "../node_modules/@qwik.dev/router/index.qwik.mjs", 692, 19);
        const submit = /* @__PURE__ */ _addLoc(inlinedQrl((input = {})=>{
            const [currentAction2, id2, loc2, state2] = useLexicalScope();
            if (isServer) throw new Error(`Actions can not be invoked within the server during SSR.
Action.run() can only be called on the browser, for example when a user clicks a button, or submits a form.`);
            let data;
            let form;
            if (input instanceof SubmitEvent) {
                form = input.target;
                data = new FormData(form);
                if ((input.submitter instanceof HTMLInputElement || input.submitter instanceof HTMLButtonElement) && input.submitter.name) {
                    if (input.submitter.name) data.append(input.submitter.name, input.submitter.value);
                }
            } else data = input;
            return new Promise((resolve)=>{
                if (data instanceof FormData) state2.formData = data;
                state2.isRunning = true;
                loc2.isNavigating = true;
                currentAction2.value = {
                    data,
                    id: id2,
                    resolve: noSerialize(resolve)
                };
            }).then(({ result, status })=>{
                state2.isRunning = false;
                state2.status = status;
                state2.value = result;
                if (form) {
                    if (form.getAttribute('data-spa-reset') === 'true') form.reset();
                    const detail = _addLoc({
                        status,
                        value: result
                    }, "../node_modules/@qwik.dev/router/index.qwik.mjs", 739, 28);
                    form.dispatchEvent(new CustomEvent('submitcompleted', {
                        bubbles: false,
                        cancelable: false,
                        composed: false,
                        detail
                    }));
                }
                return {
                    status,
                    value: result
                };
            });
        }, 'routeActionQrl_action_submit_A5bZC7WO00A', [
            currentAction,
            id,
            loc,
            state
        ]), "../node_modules/@qwik.dev/router/index.qwik.mjs", 705, 36);
        initialState.submit = submit;
        return state;
    }
    action.__brand = 'server_action';
    action.__validators = validators;
    action.__qrl = actionQrl;
    action.__id = id;
    Object.freeze(action);
    return action;
}, "../node_modules/@qwik.dev/router/index.qwik.mjs", 680, 24);
const globalActionQrl = _addLoc((actionQrl, ...rest)=>{
    const action = _addLoc(routeActionQrl(actionQrl, ...rest), "../node_modules/@qwik.dev/router/index.qwik.mjs", 772, 18);
    if (isServer) {
        if (typeof globalThis._qwikActionsMap === 'undefined') globalThis._qwikActionsMap = /* @__PURE__ */ new Map();
        globalThis._qwikActionsMap.set(action.__id, action);
    }
    return action;
}, "../node_modules/@qwik.dev/router/index.qwik.mjs", 771, 25);
const routeAction$ = /* @__PURE__ */ _addLoc(implicit$FirstArg(routeActionQrl), "../node_modules/@qwik.dev/router/index.qwik.mjs", 780, 38);
const globalAction$ = /* @__PURE__ */ _addLoc(implicit$FirstArg(globalActionQrl), "../node_modules/@qwik.dev/router/index.qwik.mjs", 781, 39);
const routeLoaderQrl = _addLoc((loaderQrl, ...rest)=>{
    const { id, validators } = getValidators(rest, loaderQrl);
    function loader() {
        return useContext(RouteStateContext, (state)=>{
            if (!(id in state)) throw new Error(`Loader (${id}) was used in a path where the 'loader$' was not declared.
    This is likely because the used loader was not exported in a layout.tsx or index.tsx file of the existing route.
    For more information check: https://qwik.dev/docs/route-loader/`);
            return _wrapSignal(state, id);
        });
    }
    loader.__brand = 'server_loader';
    loader.__qrl = loaderQrl;
    loader.__validators = validators;
    loader.__id = id;
    Object.freeze(loader);
    return loader;
}, "../node_modules/@qwik.dev/router/index.qwik.mjs", 782, 24);
const routeLoader$ = /* @__PURE__ */ _addLoc(implicit$FirstArg(routeLoaderQrl), "../node_modules/@qwik.dev/router/index.qwik.mjs", 800, 38);
const validatorQrl = _addLoc((validator)=>{
    if (isServer) return {
        validate: validator
    };
    return void 0;
}, "../node_modules/@qwik.dev/router/index.qwik.mjs", 801, 22);
const validator$ = /* @__PURE__ */ _addLoc(implicit$FirstArg(validatorQrl), "../node_modules/@qwik.dev/router/index.qwik.mjs", 808, 36);
const zodQrl = _addLoc((qrl)=>{
    if (isServer) {
        const schema = _addLoc(qrl.resolve().then((obj)=>{
            if (typeof obj === 'function') obj = obj(z);
            if (obj instanceof z.Schema) return obj;
            else return z.object(obj);
        }), "../node_modules/@qwik.dev/router/index.qwik.mjs", 811, 20);
        return {
            async validate (ev, inputData) {
                const data = _addLoc(inputData ?? await ev.parseBody(), "../node_modules/@qwik.dev/router/index.qwik.mjs", 818, 22);
                const result = _addLoc(await (await schema).safeParseAsync(data), "../node_modules/@qwik.dev/router/index.qwik.mjs", 819, 24);
                if (result.success) return result;
                else {
                    if (isDev) console.error('\nVALIDATION ERROR\naction$() zod validated failed', '\n  - Issues:', result.error.issues);
                    return {
                        success: false,
                        status: 400,
                        error: result.error.flatten()
                    };
                }
            }
        };
    }
    return void 0;
}, "../node_modules/@qwik.dev/router/index.qwik.mjs", 809, 16);
const zod$ = /* @__PURE__ */ _addLoc(implicit$FirstArg(zodQrl), "../node_modules/@qwik.dev/router/index.qwik.mjs", 839, 30);
const serverQrl = _addLoc((qrl)=>{
    if (isServer) {
        const captured = _addLoc(qrl.getCaptured(), "../node_modules/@qwik.dev/router/index.qwik.mjs", 842, 22);
        if (captured && captured.length > 0 && !_getContextElement()) throw new Error('For security reasons, we cannot serialize QRLs that capture lexical scope.');
    }
    function stuff() {
        return /* @__PURE__ */ inlinedQrl(async (...args)=>{
            const [qrl2] = useLexicalScope();
            if (isServer) {
                const requestEvent = _addLoc(useQwikRouterEnv()?.ev, "../node_modules/@qwik.dev/router/index.qwik.mjs", 851, 32);
                return qrl2.apply(requestEvent, args);
            } else {
                const ctxElm = _addLoc(_getContextElement(), "../node_modules/@qwik.dev/router/index.qwik.mjs", 854, 26);
                const filtered = _addLoc(args.map((arg)=>{
                    if (arg instanceof SubmitEvent && arg.target instanceof HTMLFormElement) return new FormData(arg.target);
                    else if (arg instanceof Event) return null;
                    else if (arg instanceof Node) return null;
                    return arg;
                }), "../node_modules/@qwik.dev/router/index.qwik.mjs", 855, 28);
                const hash = _addLoc(qrl2.getHash(), "../node_modules/@qwik.dev/router/index.qwik.mjs", 862, 24);
                const path = _addLoc(`?qfunc=${qrl2.getHash()}`, "../node_modules/@qwik.dev/router/index.qwik.mjs", 863, 24);
                const body = _addLoc(await _serializeData([
                    qrl2,
                    ...filtered
                ], false), "../node_modules/@qwik.dev/router/index.qwik.mjs", 864, 24);
                const res = _addLoc(await fetch(path, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/qwik-json',
                        'X-QRL': hash
                    },
                    body
                }), "../node_modules/@qwik.dev/router/index.qwik.mjs", 865, 23);
                const contentType = _addLoc(res.headers.get('Content-Type'), "../node_modules/@qwik.dev/router/index.qwik.mjs", 873, 31);
                if (res.ok && contentType === 'text/event-stream') {
                    const { writable, readable } = getSSETransformer();
                    res.body?.pipeTo(writable);
                    return streamAsyncIterator(readable, ctxElm ?? document.documentElement);
                } else if (contentType === 'application/qwik-json') {
                    const str = _addLoc(await res.text(), "../node_modules/@qwik.dev/router/index.qwik.mjs", 879, 25);
                    const obj = _addLoc(await _deserializeData(str, ctxElm ?? document.documentElement), "../node_modules/@qwik.dev/router/index.qwik.mjs", 880, 25);
                    if (res.status === 500) throw obj;
                    return obj;
                }
            }
        }, 'serverQrl_stuff_wOIPfiQ04l4', [
            qrl
        ]);
    }
    return stuff();
}, "../node_modules/@qwik.dev/router/index.qwik.mjs", 840, 19);
const server$ = /* @__PURE__ */ _addLoc(implicit$FirstArg(serverQrl), "../node_modules/@qwik.dev/router/index.qwik.mjs", 892, 33);
const getValidators = _addLoc((rest, qrl)=>{
    let id;
    const validators = _addLoc([], "../node_modules/@qwik.dev/router/index.qwik.mjs", 895, 22);
    if (rest.length === 1) {
        const options = _addLoc(rest[0], "../node_modules/@qwik.dev/router/index.qwik.mjs", 897, 21);
        if (options && typeof options === 'object') {
            if ('validate' in options) validators.push(options);
            else {
                id = options.id;
                if (options.validation) validators.push(...options.validation);
            }
        }
    } else if (rest.length > 1) validators.push(...rest.filter((v)=>!!v));
    if (typeof id === 'string') {
        if (isDev) {
            if (!/^[\w/.-]+$/.test(id)) throw new Error(`Invalid id: ${id}, id can only contain [a-zA-Z0-9_.-]`);
        }
        id = `id_${id}`;
    } else id = qrl.getHash();
    return {
        validators: validators.reverse(),
        id
    };
}, "../node_modules/@qwik.dev/router/index.qwik.mjs", 893, 23);
const getSSETransformer = _addLoc(()=>{
    let currentLine = _addLoc('', "../node_modules/@qwik.dev/router/index.qwik.mjs", 919, 21);
    const encoder = _addLoc(new TextDecoder(), "../node_modules/@qwik.dev/router/index.qwik.mjs", 920, 19);
    const transformer = _addLoc(new TransformStream({
        transform (chunk, controller) {
            const lines = _addLoc(encoder.decode(chunk).split('\n\n'), "../node_modules/@qwik.dev/router/index.qwik.mjs", 923, 21);
            for(let i = _addLoc(0, "../node_modules/@qwik.dev/router/index.qwik.mjs", 924, 20); i < lines.length - 1; i++){
                const line = _addLoc(currentLine + lines[i], "../node_modules/@qwik.dev/router/index.qwik.mjs", 925, 22);
                if (line.length === 0) {
                    controller.terminate();
                    break;
                } else {
                    controller.enqueue(parseEvent(line));
                    currentLine = '';
                }
            }
            currentLine += lines[lines.length - 1];
        }
    }), "../node_modules/@qwik.dev/router/index.qwik.mjs", 921, 23);
    return transformer;
}, "../node_modules/@qwik.dev/router/index.qwik.mjs", 918, 27);
const parseEvent = _addLoc((message)=>{
    const lines = _addLoc(message.split('\n'), "../node_modules/@qwik.dev/router/index.qwik.mjs", 940, 17);
    const event = _addLoc({
        data: ''
    }, "../node_modules/@qwik.dev/router/index.qwik.mjs", 941, 17);
    let data = _addLoc('', "../node_modules/@qwik.dev/router/index.qwik.mjs", 944, 14);
    for (const line of lines)if (line.startsWith('data: ')) data += line.slice(6) + '\n';
    else {
        const [key, value] = line.split(':');
        if (typeof key === 'string' && typeof value === 'string') event[key] = value.trim();
    }
    event.data = data;
    return event;
}, "../node_modules/@qwik.dev/router/index.qwik.mjs", 939, 20);
async function* streamAsyncIterator(stream, ctxElm) {
    const reader = _addLoc(stream.getReader(), "../node_modules/@qwik.dev/router/index.qwik.mjs", 955, 18);
    try {
        while(true){
            const { done, value } = await reader.read();
            if (done) return;
            const obj = _addLoc(await _deserializeData(value.data, ctxElm), "../node_modules/@qwik.dev/router/index.qwik.mjs", 960, 19);
            yield obj;
        }
    } finally{
        reader.releaseLock();
    }
}
const Form = _addLoc(({ action, spaReset, reloadDocument, onSubmit$, ...rest }, key)=>{
    _jsxBranch();
    if (action) return _jsxSplit('form', {
        ...rest,
        action: _wrapSignal(action, 'actionPath'),
        'preventdefault:submit': !reloadDocument,
        ['data-spa-reset']: spaReset ? 'true' : void 0,
        onSubmit$: [
            !reloadDocument ? action.submit : void 0,
            onSubmit$
        ]
    }, {
        method: 'post'
    }, 0, key);
    else return /* @__PURE__ */ _jsxSplit(GetForm, {
        spaReset,
        reloadDocument,
        onSubmit$,
        ...rest
    }, 0, key);
}, "../node_modules/@qwik.dev/router/index.qwik.mjs", 967, 14);
const GetForm = /* @__PURE__ */ _addLoc(componentQrl(/* @__PURE__ */ inlinedQrl((props)=>{
    const rest = _addLoc(_restProps(props, [
        'action',
        'spaReset',
        'reloadDocument',
        'onSubmit$'
    ]), "../node_modules/@qwik.dev/router/index.qwik.mjs", 1000, 18);
    const nav = _addLoc(useNavigate(), "../node_modules/@qwik.dev/router/index.qwik.mjs", 1001, 17);
    return /* @__PURE__ */ _jsxSplit('form', {
        ...rest,
        children: /* @__PURE__ */ _jsxSplit(Slot, null, 3, 'BC_0'),
        onSubmit$: /* @__PURE__ */ inlinedQrl(async (_, form)=>{
            const [nav2] = useLexicalScope();
            const formData = _addLoc(new FormData(form), "../node_modules/@qwik.dev/router/index.qwik.mjs", 1010, 30);
            const params = _addLoc(new URLSearchParams(), "../node_modules/@qwik.dev/router/index.qwik.mjs", 1011, 28);
            formData.forEach((value, key)=>{
                if (typeof value === 'string') params.append(key, value);
            });
            nav2('?' + params.toString(), true).then(()=>{
                if (form.getAttribute('data-spa-reset') === 'true') form.reset();
                form.dispatchEvent(new CustomEvent('submitcompleted', {
                    bubbles: false,
                    cancelable: false,
                    composed: false,
                    detail: {
                        status: 200
                    }
                }));
            });
        }, 'GetForm_component_form_onSubmit_p9MSze0ojs4', [
            nav
        ])
    }, {
        action: 'get',
        'preventdefault:submit': _fnSignal((p0)=>!p0.reloadDocument, [
            props
        ], '!p0.reloadDocument'),
        'data-spa-reset': _fnSignal((p0)=>p0.spaReset ? 'true' : void 0, [
            props
        ], 'p0.spaReset?"true":undefined')
    }, 0, 'BC_1');
}, 'GetForm_component_Nk9PlpjQm9Y')), "../node_modules/@qwik.dev/router/index.qwik.mjs", 998, 33);
export { Form, globalAction$, globalActionQrl, Link, QwikRouterMockProvider, QwikRouterProvider as QwikRouterProvider, routeAction$, routeActionQrl, routeLoader$, routeLoaderQrl, RouterOutlet, server$, serverQrl, ServiceWorkerRegister, useContent, useDocumentHead, useLocation, useNavigate, validator$, validatorQrl, z2 as z, zod$, zodQrl };


Some("{\"version\":3,\"sources\":[\"/user/qwik/node_modules/@qwik.dev/router/index.qwik.mjs\"],\"names\":[],\"mappings\":\"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\"}")
== DIAGNOSTICS ==

[]
