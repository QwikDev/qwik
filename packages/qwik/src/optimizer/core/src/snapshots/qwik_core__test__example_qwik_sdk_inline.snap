---
source: packages/qwik/src/optimizer/core/src/test.rs
assertion_line: 3212
expression: output
---
==INPUT==

import {
  createContextId,
  componentQrl,
  inlinedQrl,
  _jsxBranch,
  useOnDocument,
  eventQrl,
  useContext,
  _jsxC,
  SkipRender,
  withLocale,
  _deserializeData,
  noSerialize,
  useServerData,
  useStylesQrl,
  useStore,
  _weakSerialize,
  useSignal,
  useLexicalScope,
  _getContextElement,
  useContextProvider,
  useTaskQrl,
  Slot,
  getLocale,
  untrack,
  _jsxS,
  _jsxQ,
  _wrapSignal,
  implicit$FirstArg,
  _serializeData,
  _restProps,
  _fnSignal,
} from '@builder.io/qwik';
import { isBrowser, isServer, isDev } from '@builder.io/qwik/build';
import * as qwikCity from '@qwik-city-plan';
import swRegister from '@qwik-city-sw-register';
import { z } from 'zod';
import { z as z2 } from 'zod';
const RouteStateContext = /* @__PURE__ */ createContextId('qc-s');
const ContentContext = /* @__PURE__ */ createContextId('qc-c');
const ContentInternalContext = /* @__PURE__ */ createContextId('qc-ic');
const DocumentHeadContext = /* @__PURE__ */ createContextId('qc-h');
const RouteLocationContext = /* @__PURE__ */ createContextId('qc-l');
const RouteNavigateContext = /* @__PURE__ */ createContextId('qc-n');
const RouteActionContext = /* @__PURE__ */ createContextId('qc-a');
const RouterOutlet = /* @__PURE__ */ componentQrl(
  /* @__PURE__ */ inlinedQrl(() => {
    _jsxBranch();
    useOnDocument(
      'qinit',
      eventQrl(
        /* @__PURE__ */ inlinedQrl(() => {
          const POPSTATE_FALLBACK_INITIALIZED = '_qCityPopstateFallback';
          const CLIENT_HISTORY_INITIALIZED = '_qCityHistory';
          if (!window[POPSTATE_FALLBACK_INITIALIZED]) {
            window[POPSTATE_FALLBACK_INITIALIZED] = () => {
              if (!window[CLIENT_HISTORY_INITIALIZED]) location.reload();
            };
            setTimeout(() => {
              addEventListener('popstate', window[POPSTATE_FALLBACK_INITIALIZED]);
            }, 0);
          }
        }, 'RouterOutlet_component_useOnDocument_event_KnNE9eL0qfc')
      )
    );
    const context = useContext(ContentInternalContext);
    if (context.value && context.value.length > 0) {
      const contentsLen = context.value.length;
      let cmp = null;
      for (let i = contentsLen - 1; i >= 0; i--)
        cmp = _jsxC(
          context.value[i].default,
          {
            children: cmp,
          },
          1,
          'k8_0'
        );
      return cmp;
    }
    return SkipRender;
  }, 'RouterOutlet_component_AKetNByE5TM')
);
const MODULE_CACHE = /* @__PURE__ */ new WeakMap();
const CLIENT_DATA_CACHE = /* @__PURE__ */ new Map();
const QACTION_KEY = 'qaction';
const toPath = (url) => url.pathname + url.search + url.hash;
const toUrl = (url, baseUrl) => new URL(url, baseUrl.href);
const isSameOrigin = (a, b) => a.origin === b.origin;
const isSamePath = (a, b) => a.pathname + a.search === b.pathname + b.search;
const isSamePathname = (a, b) => a.pathname === b.pathname;
const isSameOriginDifferentPathname = (a, b) => isSameOrigin(a, b) && !isSamePath(a, b);
const getClientDataPath = (pathname, pageSearch, action) => {
  let search = pageSearch ?? '';
  if (action) search += (search ? '&' : '?') + QACTION_KEY + '=' + encodeURIComponent(action.id);
  return pathname + (pathname.endsWith('/') ? '' : '/') + 'q-data.json' + search;
};
const getClientNavPath = (props, baseUrl) => {
  const href = props.href;
  if (typeof href === 'string' && href.trim() !== '' && typeof props.target !== 'string')
    try {
      const linkUrl = toUrl(href, baseUrl.url);
      const currentUrl = toUrl('', baseUrl.url);
      if (isSameOrigin(linkUrl, currentUrl)) return toPath(linkUrl);
    } catch (e) {
      console.error(e);
    }
  else if (props.reload) return toPath(toUrl('', baseUrl.url));
  return null;
};
const getPrefetchDataset = (props, clientNavPath, currentLoc) => {
  if (props.prefetch === true && clientNavPath) {
    const prefetchUrl = toUrl(clientNavPath, currentLoc.url);
    if (!isSamePathname(prefetchUrl, toUrl('', currentLoc.url))) return '';
  }
  return null;
};
const clientNavigate = (win, newUrl, routeNavigate) => {
  const currentUrl = win.location;
  if (isSameOriginDifferentPathname(currentUrl, newUrl)) {
    handleScroll(win, currentUrl, newUrl);
    win.history.pushState('', '', toPath(newUrl));
  }
  if (!win._qCityHistory) {
    win._qCityHistory = 1;
    win.addEventListener('popstate', () => {
      const currentUrl2 = win.location;
      const previousUrl = toUrl(routeNavigate.value, currentUrl2);
      if (isSameOriginDifferentPathname(currentUrl2, previousUrl)) {
        handleScroll(win, previousUrl, currentUrl2);
        routeNavigate.value = toPath(new URL(currentUrl2.href));
      }
    });
    win.removeEventListener('popstate', win._qCityPopstateFallback);
  }
};
const handleScroll = async (win, previousUrl, newUrl) => {
  const doc = win.document;
  const newHash = newUrl.hash;
  if (isSamePath(previousUrl, newUrl)) {
    if (previousUrl.hash !== newHash) {
      await domWait();
      if (newHash) scrollToHashId(doc, newHash);
      else win.scrollTo(0, 0);
    }
  } else {
    if (newHash)
      for (let i = 0; i < 24; i++) {
        await domWait();
        if (scrollToHashId(doc, newHash)) break;
      }
    else {
      await domWait();
      win.scrollTo(0, 0);
    }
  }
};
const domWait = () => new Promise((resolve) => setTimeout(resolve, 12));
const scrollToHashId = (doc, hash) => {
  const elmId = hash.slice(1);
  const elm = doc.getElementById(elmId);
  if (elm) elm.scrollIntoView();
  return elm;
};
const dispatchPrefetchEvent = (prefetchData) => {
  if (typeof document !== 'undefined')
    document.dispatchEvent(
      new CustomEvent('qprefetch', {
        detail: prefetchData,
      })
    );
};
const resolveHead = (endpoint, routeLocation, contentModules, locale) => {
  const head = createDocumentHead();
  const getData = (loaderOrAction) => {
    const id = loaderOrAction.__id;
    if (loaderOrAction.__brand === 'server_loader') {
      if (!(id in endpoint.loaders))
        throw new Error(
          'You can not get the returned data of a loader that has not been executed for this request.'
        );
    }
    const data = endpoint.loaders[id];
    if (data instanceof Promise)
      throw new Error('Loaders returning a function can not be referred to in the head function.');
    return data;
  };
  const headProps = {
    head,
    withLocale: (fn) => withLocale(locale, fn),
    resolveValue: getData,
    ...routeLocation,
  };
  for (let i = contentModules.length - 1; i >= 0; i--) {
    const contentModuleHead = contentModules[i] && contentModules[i].head;
    if (contentModuleHead) {
      if (typeof contentModuleHead === 'function')
        resolveDocumentHead(
          head,
          withLocale(locale, () => contentModuleHead(headProps))
        );
      else if (typeof contentModuleHead === 'object') resolveDocumentHead(head, contentModuleHead);
    }
  }
  return headProps.head;
};
const resolveDocumentHead = (resolvedHead, updatedHead) => {
  if (typeof updatedHead.title === 'string') resolvedHead.title = updatedHead.title;
  mergeArray(resolvedHead.meta, updatedHead.meta);
  mergeArray(resolvedHead.links, updatedHead.links);
  mergeArray(resolvedHead.styles, updatedHead.styles);
  Object.assign(resolvedHead.frontmatter, updatedHead.frontmatter);
};
const mergeArray = (existingArr, newArr) => {
  if (Array.isArray(newArr))
    for (const newItem of newArr) {
      if (typeof newItem.key === 'string') {
        const existingIndex = existingArr.findIndex((i) => i.key === newItem.key);
        if (existingIndex > -1) {
          existingArr[existingIndex] = newItem;
          continue;
        }
      }
      existingArr.push(newItem);
    }
};
const createDocumentHead = () => ({
  title: '',
  meta: [],
  links: [],
  styles: [],
  frontmatter: {},
});
const loadRoute = async (routes, menus, cacheModules, pathname) => {
  if (Array.isArray(routes))
    for (const route of routes) {
      const match = route[0].exec(pathname);
      if (match) {
        const loaders = route[1];
        const params = getPathParams(route[2], match);
        const routeBundleNames = route[4];
        const mods = new Array(loaders.length);
        const pendingLoads = [];
        const menuLoader = getMenuLoader(menus, pathname);
        let menu = void 0;
        loaders.forEach((moduleLoader, i) => {
          loadModule(
            moduleLoader,
            pendingLoads,
            (routeModule) => (mods[i] = routeModule),
            cacheModules
          );
        });
        loadModule(
          menuLoader,
          pendingLoads,
          (menuModule) => (menu = menuModule?.default),
          cacheModules
        );
        if (pendingLoads.length > 0) await Promise.all(pendingLoads);
        return [params, mods, menu, routeBundleNames];
      }
    }
  return null;
};
const loadModule = (moduleLoader, pendingLoads, moduleSetter, cacheModules) => {
  if (typeof moduleLoader === 'function') {
    const loadedModule = MODULE_CACHE.get(moduleLoader);
    if (loadedModule) moduleSetter(loadedModule);
    else {
      const l = moduleLoader();
      if (typeof l.then === 'function')
        pendingLoads.push(
          l.then((loadedModule2) => {
            if (cacheModules !== false) MODULE_CACHE.set(moduleLoader, loadedModule2);
            moduleSetter(loadedModule2);
          })
        );
      else if (l) moduleSetter(l);
    }
  }
};
const getMenuLoader = (menus, pathname) => {
  if (menus) {
    pathname = pathname.endsWith('/') ? pathname : pathname + '/';
    const menu = menus.find(
      (m) => m[0] === pathname || pathname.startsWith(m[0] + (pathname.endsWith('/') ? '' : '/'))
    );
    if (menu) return menu[1];
  }
};
const getPathParams = (paramNames, match) => {
  const params = {};
  if (paramNames)
    for (let i = 0; i < paramNames.length; i++) {
      const param = match?.[i + 1] ?? '';
      const v = param.endsWith('/') ? param.slice(0, -1) : param;
      params[paramNames[i]] = decodeURIComponent(v);
    }
  return params;
};
const loadClientData = async (url, element, clearCache, action) => {
  const pagePathname = url.pathname;
  const pageSearch = url.search;
  const clientDataPath = getClientDataPath(pagePathname, pageSearch, action);
  let qData = void 0;
  if (!action) qData = CLIENT_DATA_CACHE.get(clientDataPath);
  dispatchPrefetchEvent({
    links: [pagePathname],
  });
  if (!qData) {
    const options = getFetchOptions(action);
    if (action) action.data = void 0;
    qData = fetch(clientDataPath, options).then((rsp) => {
      const redirectedURL = new URL(rsp.url);
      if (redirectedURL.origin !== location.origin || !isQDataJson(redirectedURL.pathname)) {
        location.href = redirectedURL.href;
        return;
      }
      if ((rsp.headers.get('content-type') || '').includes('json'))
        return rsp.text().then((text) => {
          const clientData = _deserializeData(text, element);
          if (!clientData) {
            location.href = url.href;
            return;
          }
          if (clearCache) CLIENT_DATA_CACHE.delete(clientDataPath);
          if (clientData.redirect) location.href = clientData.redirect;
          else if (action) {
            const actionData = clientData.loaders[action.id];
            action.resolve({
              status: rsp.status,
              result: actionData,
            });
          }
          return clientData;
        });
      else {
        location.href = url.href;
        return void 0;
      }
    });
    if (!action) CLIENT_DATA_CACHE.set(clientDataPath, qData);
  }
  return qData.then((v) => {
    if (!v) CLIENT_DATA_CACHE.delete(clientDataPath);
    return v;
  });
};
const getFetchOptions = (action) => {
  const actionData = action?.data;
  if (!actionData) return void 0;
  if (actionData instanceof FormData)
    return {
      method: 'POST',
      body: actionData,
    };
  else
    return {
      method: 'POST',
      body: JSON.stringify(actionData),
      headers: {
        'Content-Type': 'application/json, charset=UTF-8',
      },
    };
};
const isQDataJson = (pathname) => {
  return pathname.endsWith(QDATA_JSON);
};
const QDATA_JSON = '/q-data.json';
const useContent = () => useContext(ContentContext);
const useDocumentHead = () => useContext(DocumentHeadContext);
const useLocation = () => useContext(RouteLocationContext);
const useNavigate = () => useContext(RouteNavigateContext);
const useAction = () => useContext(RouteActionContext);
const useQwikCityEnv = () => noSerialize(useServerData('qwikcity'));
const QwikCityProvider = /* @__PURE__ */ componentQrl(
  /* @__PURE__ */ inlinedQrl((props) => {
    useStylesQrl(
      /* @__PURE__ */ inlinedQrl(
        `:root{view-transition-name: none}`,
        'QwikCityProvider_component_useStyles_RPDJAz33WLA'
      )
    );
    const env = useQwikCityEnv();
    if (!env?.params) throw new Error(`Missing Qwik City Env Data`);
    const urlEnv = useServerData('url');
    if (!urlEnv) throw new Error(`Missing Qwik URL Env Data`);
    const url = new URL(urlEnv);
    const routeLocation = useStore(
      {
        url,
        params: env.params,
        isNavigating: false,
      },
      {
        deep: false,
      }
    );
    const loaderState = _weakSerialize(
      useStore(env.response.loaders, {
        deep: false,
      })
    );
    const navPath = useSignal(toPath(url));
    const documentHead = useStore(createDocumentHead);
    const content = useStore({
      headings: void 0,
      menu: void 0,
    });
    const contentInternal = useSignal();
    const currentActionId = env.response.action;
    const currentAction = currentActionId ? env.response.loaders[currentActionId] : void 0;
    const actionState = useSignal(
      currentAction
        ? {
            id: currentActionId,
            data: env.response.formData,
            output: {
              result: currentAction,
              status: env.response.status,
            },
          }
        : void 0
    );
    const goto = eventQrl(
      /* @__PURE__ */ inlinedQrl(
        async (path, forceReload) => {
          const [actionState2, navPath2, routeLocation2] = useLexicalScope();
          if (path === void 0) {
            path = navPath2.value;
            navPath2.value = '';
          } else if (forceReload) navPath2.value = '';
          const resolvedURL = new URL(path, routeLocation2.url);
          path = toPath(resolvedURL);
          if (!forceReload && navPath2.value === path) return;
          navPath2.value = path;
          if (isBrowser) {
            loadClientData(resolvedURL, _getContextElement());
            loadRoute(qwikCity.routes, qwikCity.menus, qwikCity.cacheModules, resolvedURL.pathname);
          }
          actionState2.value = void 0;
          routeLocation2.isNavigating = true;
        },
        'QwikCityProvider_component_goto_event_cBcjROynRVg',
        [actionState, navPath, routeLocation]
      )
    );
    useContextProvider(ContentContext, content);
    useContextProvider(ContentInternalContext, contentInternal);
    useContextProvider(DocumentHeadContext, documentHead);
    useContextProvider(RouteLocationContext, routeLocation);
    useContextProvider(RouteNavigateContext, goto);
    useContextProvider(RouteStateContext, loaderState);
    useContextProvider(RouteActionContext, actionState);
    useTaskQrl(
      /* @__PURE__ */ inlinedQrl(
        ({ track }) => {
          const [
            actionState2,
            content2,
            contentInternal2,
            documentHead2,
            env2,
            loaderState2,
            navPath2,
            props2,
            routeLocation2,
            url2,
          ] = useLexicalScope();
          async function run() {
            const [path, action] = track(() => [navPath2.value, actionState2.value]);
            const locale = getLocale('');
            let trackUrl;
            let clientPageData;
            let loadedRoute = null;
            if (isServer) {
              trackUrl = new URL(path, routeLocation2.url);
              loadedRoute = env2.loadedRoute;
              clientPageData = env2.response;
            } else {
              trackUrl = new URL(path, location);
              if (trackUrl.pathname.endsWith('/')) {
                if (!qwikCity.trailingSlash) trackUrl.pathname = trackUrl.pathname.slice(0, -1);
              } else if (qwikCity.trailingSlash) trackUrl.pathname += '/';
              let loadRoutePromise = loadRoute(
                qwikCity.routes,
                qwikCity.menus,
                qwikCity.cacheModules,
                trackUrl.pathname
              );
              const element = _getContextElement();
              const pageData = (clientPageData = await loadClientData(
                trackUrl,
                element,
                true,
                action
              ));
              if (!pageData) {
                navPath2.untrackedValue = toPath(trackUrl);
                return;
              }
              const newHref = pageData.href;
              const newURL = new URL(newHref, trackUrl.href);
              if (newURL.pathname !== trackUrl.pathname) {
                trackUrl = newURL;
                loadRoutePromise = loadRoute(
                  qwikCity.routes,
                  qwikCity.menus,
                  qwikCity.cacheModules,
                  trackUrl.pathname
                );
              }
              loadedRoute = await loadRoutePromise;
            }
            if (loadedRoute) {
              const [params, mods, menu] = loadedRoute;
              const contentModules = mods;
              const pageModule = contentModules[contentModules.length - 1];
              routeLocation2.url = trackUrl;
              routeLocation2.params = {
                ...params,
              };
              navPath2.untrackedValue = toPath(trackUrl);
              const resolvedHead = resolveHead(
                clientPageData,
                routeLocation2,
                contentModules,
                locale
              );
              content2.headings = pageModule.headings;
              content2.menu = menu;
              contentInternal2.value = noSerialize(contentModules);
              documentHead2.links = resolvedHead.links;
              documentHead2.meta = resolvedHead.meta;
              documentHead2.styles = resolvedHead.styles;
              documentHead2.title = resolvedHead.title;
              documentHead2.frontmatter = resolvedHead.frontmatter;
              if (isBrowser) {
                if (
                  (props2.viewTransition ?? true) &&
                  isSameOriginDifferentPathname(window.location, url2)
                )
                  document.__q_view_transition__ = true;
                const loaders = clientPageData?.loaders;
                if (loaders) Object.assign(loaderState2, loaders);
                CLIENT_DATA_CACHE.clear();
                clientNavigate(window, trackUrl, navPath2);
                routeLocation2.isNavigating = false;
              }
            }
          }
          const promise = run();
          if (isServer) return promise;
          else return;
        },
        'QwikCityProvider_component_useTask_02wMImzEAbk',
        [
          actionState,
          content,
          contentInternal,
          documentHead,
          env,
          loaderState,
          navPath,
          props,
          routeLocation,
          url,
        ]
      )
    );
    return /* @__PURE__ */ _jsxC(Slot, null, 3, 'qY_0');
  }, 'QwikCityProvider_component_TxCFOy819ag')
);
const QwikCityMockProvider = /* @__PURE__ */ componentQrl(
  /* @__PURE__ */ inlinedQrl((props) => {
    const urlEnv = props.url ?? 'http://localhost/';
    const url = new URL(urlEnv);
    const routeLocation = useStore(
      {
        url,
        params: props.params ?? {},
        isNavigating: false,
      },
      {
        deep: false,
      }
    );
    const loaderState = useSignal({});
    const goto = /* @__PURE__ */ inlinedQrl(async (path) => {
      throw new Error('Not implemented');
    }, 'QwikCityMockProvider_component_goto_BUbtvTyvVRE');
    const documentHead = useStore(createDocumentHead, {
      deep: false,
    });
    const content = useStore(
      {
        headings: void 0,
        menu: void 0,
      },
      {
        deep: false,
      }
    );
    const contentInternal = useSignal();
    useContextProvider(ContentContext, content);
    useContextProvider(ContentInternalContext, contentInternal);
    useContextProvider(DocumentHeadContext, documentHead);
    useContextProvider(RouteLocationContext, routeLocation);
    useContextProvider(RouteNavigateContext, goto);
    useContextProvider(RouteStateContext, loaderState);
    return /* @__PURE__ */ _jsxC(Slot, null, 3, 'qY_1');
  }, 'QwikCityMockProvider_component_WmYC5H00wtI')
);
const Link = /* @__PURE__ */ componentQrl(
  /* @__PURE__ */ inlinedQrl((props) => {
    const nav = useNavigate();
    const loc = useLocation();
    const linkProps = {
      ...props,
    };
    const clientNavPath = untrack(() => getClientNavPath(linkProps, loc));
    const prefetchDataset = untrack(() => getPrefetchDataset(props, clientNavPath, loc));
    const reload = !!linkProps.reload;
    linkProps['preventdefault:click'] = !!clientNavPath;
    linkProps.href = clientNavPath || props.href;
    const event = eventQrl(
      /* @__PURE__ */ inlinedQrl(
        (ev, elm) => prefetchLinkResources(elm, ev.type === 'qvisible'),
        'Link_component_event_event_5g4B0Gd1Wck'
      )
    );
    return /* @__PURE__ */ _jsxS(
      'a',
      {
        ...linkProps,
        'data-prefetch': prefetchDataset,
        children: /* @__PURE__ */ _jsxC(Slot, null, 3, 'AD_0'),
        onClick$: /* @__PURE__ */ inlinedQrl(
          (_, elm) => {
            const [nav2, reload2] = useLexicalScope();
            if (elm.href) nav2(elm.href, reload2);
          },
          'Link_component_a_onClick_kzjavhDI3L0',
          [nav, reload]
        ),
        onMouseOver$: event,
        onFocus$: event,
        onQVisible$: event,
      },
      null,
      0,
      'AD_1'
    );
  }, 'Link_component_8gdLBszqbaM')
);
const prefetchLinkResources = (elm, isOnVisible) => {
  if (elm && elm.href && elm.hasAttribute('data-prefetch')) {
    if (!windowInnerWidth) windowInnerWidth = innerWidth;
    if (!isOnVisible || (isOnVisible && windowInnerWidth < 520))
      loadClientData(new URL(elm.href), elm);
  }
};
let windowInnerWidth = 0;
const ServiceWorkerRegister = (props) =>
  _jsxQ(
    'script',
    {
      nonce: _wrapSignal(props, 'nonce'),
    },
    {
      dangerouslySetInnerHTML: swRegister,
    },
    null,
    3,
    '1Z_0'
  );
const routeActionQrl = (actionQrl, ...rest) => {
  const { id, validators } = getValidators(rest, actionQrl);
  function action() {
    const loc = useLocation();
    const currentAction = useAction();
    const initialState = {
      actionPath: `?${QACTION_KEY}=${id}`,
      isRunning: false,
      status: void 0,
      value: void 0,
      formData: void 0,
    };
    const state = useStore(() => {
      const value = currentAction.value;
      if (value && value?.id === id) {
        const data = value.data;
        if (data instanceof FormData) initialState.formData = data;
        if (value.output) {
          const { status, result } = value.output;
          initialState.status = status;
          initialState.value = result;
        }
      }
      return initialState;
    });
    const submit = /* @__PURE__ */ inlinedQrl(
      (input = {}) => {
        const [currentAction2, id2, loc2, state2] = useLexicalScope();
        if (isServer)
          throw new Error(`Actions can not be invoked within the server during SSR.
Action.run() can only be called on the browser, for example when a user clicks a button, or submits a form.`);
        let data;
        let form;
        if (input instanceof SubmitEvent) {
          form = input.target;
          data = new FormData(form);
          if (
            (input.submitter instanceof HTMLInputElement ||
              input.submitter instanceof HTMLButtonElement) &&
            input.submitter.name
          ) {
            if (input.submitter.name) data.append(input.submitter.name, input.submitter.value);
          }
        } else data = input;
        return new Promise((resolve) => {
          if (data instanceof FormData) state2.formData = data;
          state2.isRunning = true;
          loc2.isNavigating = true;
          currentAction2.value = {
            data,
            id: id2,
            resolve: noSerialize(resolve),
          };
        }).then(({ result, status }) => {
          state2.isRunning = false;
          state2.status = status;
          state2.value = result;
          if (form) {
            if (form.getAttribute('data-spa-reset') === 'true') form.reset();
            const detail = {
              status,
              value: result,
            };
            form.dispatchEvent(
              new CustomEvent('submitcompleted', {
                bubbles: false,
                cancelable: false,
                composed: false,
                detail,
              })
            );
          }
          return {
            status,
            value: result,
          };
        });
      },
      'routeActionQrl_action_submit_A5bZC7WO00A',
      [currentAction, id, loc, state]
    );
    initialState.submit = submit;
    return state;
  }
  action.__brand = 'server_action';
  action.__validators = validators;
  action.__qrl = actionQrl;
  action.__id = id;
  Object.freeze(action);
  return action;
};
const globalActionQrl = (actionQrl, ...rest) => {
  const action = routeActionQrl(actionQrl, ...rest);
  if (isServer) {
    if (typeof globalThis._qwikActionsMap === 'undefined')
      globalThis._qwikActionsMap = /* @__PURE__ */ new Map();
    globalThis._qwikActionsMap.set(action.__id, action);
  }
  return action;
};
const routeAction$ = /* @__PURE__ */ implicit$FirstArg(routeActionQrl);
const globalAction$ = /* @__PURE__ */ implicit$FirstArg(globalActionQrl);
const routeLoaderQrl = (loaderQrl, ...rest) => {
  const { id, validators } = getValidators(rest, loaderQrl);
  function loader() {
    return useContext(RouteStateContext, (state) => {
      if (!(id in state))
        throw new Error(`Loader (${id}) was used in a path where the 'loader$' was not declared.
    This is likely because the used loader was not exported in a layout.tsx or index.tsx file of the existing route.
    For more information check: https://qwik.dev/qwikcity/route-loader/`);
      return _wrapSignal(state, id);
    });
  }
  loader.__brand = 'server_loader';
  loader.__qrl = loaderQrl;
  loader.__validators = validators;
  loader.__id = id;
  Object.freeze(loader);
  return loader;
};
const routeLoader$ = /* @__PURE__ */ implicit$FirstArg(routeLoaderQrl);
const validatorQrl = (validator) => {
  if (isServer)
    return {
      validate: validator,
    };
  return void 0;
};
const validator$ = /* @__PURE__ */ implicit$FirstArg(validatorQrl);
const zodQrl = (qrl) => {
  if (isServer) {
    const schema = qrl.resolve().then((obj) => {
      if (typeof obj === 'function') obj = obj(z);
      if (obj instanceof z.Schema) return obj;
      else return z.object(obj);
    });
    return {
      async validate(ev, inputData) {
        const data = inputData ?? (await ev.parseBody());
        const result = await (await schema).safeParseAsync(data);
        if (result.success) return result;
        else {
          if (isDev)
            console.error(
              '\nVALIDATION ERROR\naction$() zod validated failed',
              '\n  - Issues:',
              result.error.issues
            );
          return {
            success: false,
            status: 400,
            error: result.error.flatten(),
          };
        }
      },
    };
  }
  return void 0;
};
const zod$ = /* @__PURE__ */ implicit$FirstArg(zodQrl);
const serverQrl = (qrl) => {
  if (isServer) {
    const captured = qrl.getCaptured();
    if (captured && captured.length > 0 && !_getContextElement())
      throw new Error('For security reasons, we cannot serialize QRLs that capture lexical scope.');
  }
  function stuff() {
    return /* @__PURE__ */ inlinedQrl(
      async (...args) => {
        const [qrl2] = useLexicalScope();
        if (isServer) {
          const requestEvent = useQwikCityEnv()?.ev;
          return qrl2.apply(requestEvent, args);
        } else {
          const ctxElm = _getContextElement();
          const filtered = args.map((arg) => {
            if (arg instanceof SubmitEvent && arg.target instanceof HTMLFormElement)
              return new FormData(arg.target);
            else if (arg instanceof Event) return null;
            else if (arg instanceof Node) return null;
            return arg;
          });
          const hash = qrl2.getHash();
          const path = `?qfunc=${qrl2.getHash()}`;
          const body = await _serializeData([qrl2, ...filtered], false);
          const res = await fetch(path, {
            method: 'POST',
            headers: {
              'Content-Type': 'application/qwik-json',
              'X-QRL': hash,
            },
            body,
          });
          const contentType = res.headers.get('Content-Type');
          if (res.ok && contentType === 'text/event-stream') {
            const { writable, readable } = getSSETransformer();
            res.body?.pipeTo(writable);
            return streamAsyncIterator(readable, ctxElm ?? document.documentElement);
          } else if (contentType === 'application/qwik-json') {
            const str = await res.text();
            const obj = await _deserializeData(str, ctxElm ?? document.documentElement);
            if (res.status === 500) throw obj;
            return obj;
          }
        }
      },
      'serverQrl_stuff_wOIPfiQ04l4',
      [qrl]
    );
  }
  return stuff();
};
const server$ = /* @__PURE__ */ implicit$FirstArg(serverQrl);
const getValidators = (rest, qrl) => {
  let id;
  const validators = [];
  if (rest.length === 1) {
    const options = rest[0];
    if (options && typeof options === 'object') {
      if ('validate' in options) validators.push(options);
      else {
        id = options.id;
        if (options.validation) validators.push(...options.validation);
      }
    }
  } else if (rest.length > 1) validators.push(...rest.filter((v) => !!v));
  if (typeof id === 'string') {
    if (isDev) {
      if (!/^[\w/.-]+$/.test(id))
        throw new Error(`Invalid id: ${id}, id can only contain [a-zA-Z0-9_.-]`);
    }
    id = `id_${id}`;
  } else id = qrl.getHash();
  return {
    validators: validators.reverse(),
    id,
  };
};
const getSSETransformer = () => {
  let currentLine = '';
  const encoder = new TextDecoder();
  const transformer = new TransformStream({
    transform(chunk, controller) {
      const lines = encoder.decode(chunk).split('\n\n');
      for (let i = 0; i < lines.length - 1; i++) {
        const line = currentLine + lines[i];
        if (line.length === 0) {
          controller.terminate();
          break;
        } else {
          controller.enqueue(parseEvent(line));
          currentLine = '';
        }
      }
      currentLine += lines[lines.length - 1];
    },
  });
  return transformer;
};
const parseEvent = (message) => {
  const lines = message.split('\n');
  const event = {
    data: '',
  };
  let data = '';
  for (const line of lines)
    if (line.startsWith('data: ')) data += line.slice(6) + '\n';
    else {
      const [key, value] = line.split(':');
      if (typeof key === 'string' && typeof value === 'string') event[key] = value.trim();
    }
  event.data = data;
  return event;
};
async function* streamAsyncIterator(stream, ctxElm) {
  const reader = stream.getReader();
  try {
    while (true) {
      const { done, value } = await reader.read();
      if (done) return;
      const obj = await _deserializeData(value.data, ctxElm);
      yield obj;
    }
  } finally {
    reader.releaseLock();
  }
}
const Form = ({ action, spaReset, reloadDocument, onSubmit$, ...rest }, key) => {
  _jsxBranch();
  if (action)
    return _jsxS(
      'form',
      {
        ...rest,
        action: _wrapSignal(action, 'actionPath'),
        'preventdefault:submit': !reloadDocument,
        ['data-spa-reset']: spaReset ? 'true' : void 0,
        onSubmit$: [!reloadDocument ? action.submit : void 0, onSubmit$],
      },
      {
        method: 'post',
      },
      0,
      key
    );
  else
    return /* @__PURE__ */ _jsxC(
      GetForm,
      {
        spaReset,
        reloadDocument,
        onSubmit$,
        ...rest,
      },
      0,
      key
    );
};
const GetForm = /* @__PURE__ */ componentQrl(
  /* @__PURE__ */ inlinedQrl((props) => {
    const rest = _restProps(props, ['action', 'spaReset', 'reloadDocument', 'onSubmit$']);
    const nav = useNavigate();
    return /* @__PURE__ */ _jsxS(
      'form',
      {
        ...rest,
        children: /* @__PURE__ */ _jsxC(Slot, null, 3, 'BC_0'),
        onSubmit$: /* @__PURE__ */ inlinedQrl(
          async (_, form) => {
            const [nav2] = useLexicalScope();
            const formData = new FormData(form);
            const params = new URLSearchParams();
            formData.forEach((value, key) => {
              if (typeof value === 'string') params.append(key, value);
            });
            nav2('?' + params.toString(), true).then(() => {
              if (form.getAttribute('data-spa-reset') === 'true') form.reset();
              form.dispatchEvent(
                new CustomEvent('submitcompleted', {
                  bubbles: false,
                  cancelable: false,
                  composed: false,
                  detail: {
                    status: 200,
                  },
                })
              );
            });
          },
          'GetForm_component_form_onSubmit_p9MSze0ojs4',
          [nav]
        ),
      },
      {
        action: 'get',
        'preventdefault:submit': _fnSignal(
          (p0) => !p0.reloadDocument,
          [props],
          '!p0.reloadDocument'
        ),
        'data-spa-reset': _fnSignal(
          (p0) => (p0.spaReset ? 'true' : void 0),
          [props],
          'p0.spaReset?"true":undefined'
        ),
      },
      0,
      'BC_1'
    );
  }, 'GetForm_component_Nk9PlpjQm9Y')
);
export {
  Form,
  Link,
  QwikCityMockProvider,
  QwikCityProvider,
  RouterOutlet,
  ServiceWorkerRegister,
  globalAction$,
  globalActionQrl,
  routeAction$,
  routeActionQrl,
  routeLoader$,
  routeLoaderQrl,
  server$,
  serverQrl,
  useContent,
  useDocumentHead,
  useLocation,
  useNavigate,
  validator$,
  validatorQrl,
  z2 as z,
  zod$,
  zodQrl,
};

============================= ../node_modules/@builder.io/qwik-city/s_knne9el0qfc.mjs (ENTRY POINT)==

export const s_KnNE9eL0qfc = ()=>{
    const POPSTATE_FALLBACK_INITIALIZED = '_qCityPopstateFallback';
    const CLIENT_HISTORY_INITIALIZED = '_qCityHistory';
    if (!window[POPSTATE_FALLBACK_INITIALIZED]) {
        window[POPSTATE_FALLBACK_INITIALIZED] = ()=>{
            if (!window[CLIENT_HISTORY_INITIALIZED]) location.reload();
        };
        setTimeout(()=>{
            addEventListener('popstate', window[POPSTATE_FALLBACK_INITIALIZED]);
        }, 0);
    }
};


Some("{\"version\":3,\"sources\":[\"/user/qwik/node_modules/@builder.io/qwik-city/index.qwik.mjs\"],\"names\":[],\"mappings\":\"6BAmDmC,IAAM;IAC/B,MAAM,gCAAgC;IACtC,MAAM,6BAA6B;IACnC,IAAI,CAAC,MAAM,CAAC,8BAA8B,EAAE;QAC1C,MAAM,CAAC,8BAA8B,GAAG,IAAM;YAC5C,IAAI,CAAC,MAAM,CAAC,2BAA2B,EAAE,SAAS,MAAM;QAC1D;QACA,WAAW,IAAM;YACf,iBAAiB,YAAY,MAAM,CAAC,8BAA8B;QACpE,GAAG;IACL,CAAC;AACH\"}")
/*
{
  "origin": "../node_modules/@builder.io/qwik-city/index.qwik.mjs",
  "name": "s_KnNE9eL0qfc",
  "entry": null,
  "displayName": "RouterOutlet_component_useOnDocument_event",
  "hash": "KnNE9eL0qfc",
  "canonicalFilename": "s_knne9el0qfc",
  "path": "../node_modules/@builder.io/qwik-city",
  "extension": "mjs",
  "parent": "s_AKetNByE5TM",
  "ctxKind": "function",
  "ctxName": "event$",
  "captures": false,
  "loc": [
    1390,
    1893
  ]
}
*/
============================= ../node_modules/@builder.io/qwik-city/s_aketnbye5tm.mjs ==

import { _auto_ContentInternalContext as ContentInternalContext } from "./index.qwik.mjs";
import { SkipRender } from "@builder.io/qwik";
import { _jsxBranch } from "@builder.io/qwik";
import { _jsxC } from "@builder.io/qwik";
import { eventQrl } from "@builder.io/qwik";
import { qrl } from "@builder.io/qwik";
import { useContext } from "@builder.io/qwik";
import { useOnDocument } from "@builder.io/qwik";
export const s_AKetNByE5TM = ()=>{
    _jsxBranch();
    useOnDocument('qinit', eventQrl(/*#__PURE__*/ qrl(()=>import("./s_knne9el0qfc.mjs"), "s_KnNE9eL0qfc")));
    const context = useContext(ContentInternalContext);
    if (context.value && context.value.length > 0) {
        const contentsLen = context.value.length;
        let cmp = null;
        for(let i = contentsLen - 1; i >= 0; i--)cmp = _jsxC(context.value[i].default, {
            children: cmp
        }, 1, 'k8_0');
        return cmp;
    }
    return SkipRender;
};


Some("{\"version\":3,\"sources\":[\"/user/qwik/node_modules/@builder.io/qwik-city/index.qwik.mjs\"],\"names\":[],\"mappings\":\";;;;;;;;6BA8C6B,IAAM;IAC/B;IACA,cACE,SACA;IAeF,MAAM,UAAU,WAAW;IAC3B,IAAI,QAAQ,KAAK,IAAI,QAAQ,KAAK,CAAC,MAAM,GAAG,GAAG;QAC7C,MAAM,cAAc,QAAQ,KAAK,CAAC,MAAM;QACxC,IAAI,MAAM,IAAI;QACd,IAAK,IAAI,IAAI,cAAc,GAAG,KAAK,GAAG,IACpC,MAAM,MACJ,QAAQ,KAAK,CAAC,EAAE,CAAC,OAAO,EACxB;YACE,UAAU;QACZ,GACA,GACA;QAEJ,OAAO;IACT,CAAC;IACD,OAAO;AACT\"}")
/*
{
  "origin": "../node_modules/@builder.io/qwik-city/index.qwik.mjs",
  "name": "s_AKetNByE5TM",
  "entry": "../node_modules/@builder.io/qwik-city/index.qwik.mjs_entry_RouterOutlet",
  "displayName": "RouterOutlet_component",
  "hash": "AKetNByE5TM",
  "canonicalFilename": "s_aketnbye5tm",
  "path": "../node_modules/@builder.io/qwik-city",
  "extension": "mjs",
  "parent": null,
  "ctxKind": "function",
  "ctxName": "component$",
  "captures": false,
  "loc": [
    1279,
    2396
  ]
}
*/
============================= ../node_modules/@builder.io/qwik-city/s_rpdjaz33wla.mjs ==

export const s_RPDJAz33WLA = `:root{view-transition-name: none}`;


Some("{\"version\":3,\"sources\":[\"/user/qwik/node_modules/@builder.io/qwik-city/index.qwik.mjs\"],\"names\":[],\"mappings\":\"6BA4XQ,CAAC,iCAAiC,CAAC\"}")
/*
{
  "origin": "../node_modules/@builder.io/qwik-city/index.qwik.mjs",
  "name": "s_RPDJAz33WLA",
  "entry": "../node_modules/@builder.io/qwik-city/index.qwik.mjs_entry_QwikCityProvider",
  "displayName": "QwikCityProvider_component_useStyles",
  "hash": "RPDJAz33WLA",
  "canonicalFilename": "s_rpdjaz33wla",
  "path": "../node_modules/@builder.io/qwik-city",
  "extension": "mjs",
  "parent": "s_TxCFOy819ag",
  "ctxKind": "function",
  "ctxName": "useStyles$",
  "captures": false,
  "loc": [
    12723,
    12758
  ]
}
*/
============================= ../node_modules/@builder.io/qwik-city/s_cbcjroynrvg.mjs ==

import { _getContextElement } from "@builder.io/qwik";
import { isBrowser } from "@builder.io/qwik/build";
import { _auto_loadClientData as loadClientData } from "./index.qwik.mjs";
import { _auto_loadRoute as loadRoute } from "./index.qwik.mjs";
import * as qwikCity from "@qwik-city-plan";
import { _auto_toPath as toPath } from "./index.qwik.mjs";
import { useLexicalScope } from "@builder.io/qwik";
export const s_cBcjROynRVg = async (path, forceReload)=>{
    const [actionState2, navPath2, routeLocation2] = useLexicalScope();
    if (path === void 0) {
        path = navPath2.value;
        navPath2.value = '';
    } else if (forceReload) navPath2.value = '';
    const resolvedURL = new URL(path, routeLocation2.url);
    path = toPath(resolvedURL);
    if (!forceReload && navPath2.value === path) return;
    navPath2.value = path;
    if (isBrowser) {
        loadClientData(resolvedURL, _getContextElement());
        loadRoute(qwikCity.routes, qwikCity.menus, qwikCity.cacheModules, resolvedURL.pathname);
    }
    actionState2.value = void 0;
    routeLocation2.isNavigating = true;
};


Some("{\"version\":3,\"sources\":[\"/user/qwik/node_modules/@builder.io/qwik-city/index.qwik.mjs\"],\"names\":[],\"mappings\":\";;;;;;;6BA2aQ,OAAO,MAAM,cAAgB;IAC3B,MAAM,CAAC,cAAc,UAAU,eAAe,GAAG;IACjD,IAAI,SAAS,KAAK,GAAG;QACnB,OAAO,SAAS,KAAK;QACrB,SAAS,KAAK,GAAG;IACnB,OAAO,IAAI,aAAa,SAAS,KAAK,GAAG;IACzC,MAAM,cAAc,IAAI,IAAI,MAAM,eAAe,GAAG;IACpD,OAAO,OAAO;IACd,IAAI,CAAC,eAAe,SAAS,KAAK,KAAK,MAAM;IAC7C,SAAS,KAAK,GAAG;IACjB,IAAI,WAAW;QACb,eAAe,aAAa;QAC5B,UAAU,SAAS,MAAM,EAAE,SAAS,KAAK,EAAE,SAAS,YAAY,EAAE,YAAY,QAAQ;IACxF,CAAC;IACD,aAAa,KAAK,GAAG,KAAK;IAC1B,eAAe,YAAY,GAAG,IAAI;AACpC\"}")
/*
{
  "origin": "../node_modules/@builder.io/qwik-city/index.qwik.mjs",
  "name": "s_cBcjROynRVg",
  "entry": "../node_modules/@builder.io/qwik-city/index.qwik.mjs_entry_QwikCityProvider",
  "displayName": "QwikCityProvider_component_goto_event",
  "hash": "cBcjROynRVg",
  "canonicalFilename": "s_cbcjroynrvg",
  "path": "../node_modules/@builder.io/qwik-city",
  "extension": "mjs",
  "parent": "s_TxCFOy819ag",
  "ctxKind": "function",
  "ctxName": "event$",
  "captures": true,
  "loc": [
    14084,
    14845
  ]
}
*/
============================= ../node_modules/@builder.io/qwik-city/s_02wmimzeabk.mjs ==

import { _auto_CLIENT_DATA_CACHE as CLIENT_DATA_CACHE } from "./index.qwik.mjs";
import { _getContextElement } from "@builder.io/qwik";
import { _auto_clientNavigate as clientNavigate } from "./index.qwik.mjs";
import { getLocale } from "@builder.io/qwik";
import { isBrowser } from "@builder.io/qwik/build";
import { _auto_isSameOriginDifferentPathname as isSameOriginDifferentPathname } from "./index.qwik.mjs";
import { isServer } from "@builder.io/qwik/build";
import { _auto_loadClientData as loadClientData } from "./index.qwik.mjs";
import { _auto_loadRoute as loadRoute } from "./index.qwik.mjs";
import { noSerialize } from "@builder.io/qwik";
import * as qwikCity from "@qwik-city-plan";
import { _auto_resolveHead as resolveHead } from "./index.qwik.mjs";
import { _auto_toPath as toPath } from "./index.qwik.mjs";
import { useLexicalScope } from "@builder.io/qwik";
export const s_02wMImzEAbk = ({ track  })=>{
    const [actionState2, content2, contentInternal2, documentHead2, env2, loaderState2, navPath2, props2, routeLocation2, url2] = useLexicalScope();
    async function run() {
        const [path, action] = track(()=>[
                navPath2.value,
                actionState2.value
            ]);
        const locale = getLocale('');
        let trackUrl;
        let clientPageData;
        let loadedRoute = null;
        if (isServer) {
            trackUrl = new URL(path, routeLocation2.url);
            loadedRoute = env2.loadedRoute;
            clientPageData = env2.response;
        } else {
            trackUrl = new URL(path, location);
            if (trackUrl.pathname.endsWith('/')) {
                if (!qwikCity.trailingSlash) trackUrl.pathname = trackUrl.pathname.slice(0, -1);
            } else if (qwikCity.trailingSlash) trackUrl.pathname += '/';
            let loadRoutePromise = loadRoute(qwikCity.routes, qwikCity.menus, qwikCity.cacheModules, trackUrl.pathname);
            const element = _getContextElement();
            const pageData = clientPageData = await loadClientData(trackUrl, element, true, action);
            if (!pageData) {
                navPath2.untrackedValue = toPath(trackUrl);
                return;
            }
            const newHref = pageData.href;
            const newURL = new URL(newHref, trackUrl.href);
            if (newURL.pathname !== trackUrl.pathname) {
                trackUrl = newURL;
                loadRoutePromise = loadRoute(qwikCity.routes, qwikCity.menus, qwikCity.cacheModules, trackUrl.pathname);
            }
            loadedRoute = await loadRoutePromise;
        }
        if (loadedRoute) {
            const [params, mods, menu] = loadedRoute;
            const contentModules = mods;
            const pageModule = contentModules[contentModules.length - 1];
            routeLocation2.url = trackUrl;
            routeLocation2.params = {
                ...params
            };
            navPath2.untrackedValue = toPath(trackUrl);
            const resolvedHead = resolveHead(clientPageData, routeLocation2, contentModules, locale);
            content2.headings = pageModule.headings;
            content2.menu = menu;
            contentInternal2.value = noSerialize(contentModules);
            documentHead2.links = resolvedHead.links;
            documentHead2.meta = resolvedHead.meta;
            documentHead2.styles = resolvedHead.styles;
            documentHead2.title = resolvedHead.title;
            documentHead2.frontmatter = resolvedHead.frontmatter;
            if (isBrowser) {
                if ((props2.viewTransition ?? true) && isSameOriginDifferentPathname(window.location, url2)) document.__q_view_transition__ = true;
                const loaders = clientPageData?.loaders;
                if (loaders) Object.assign(loaderState2, loaders);
                CLIENT_DATA_CACHE.clear();
                clientNavigate(window, trackUrl, navPath2);
                routeLocation2.isNavigating = false;
            }
        }
    }
    const promise = run();
    if (isServer) return promise;
    else return;
};


Some("{\"version\":3,\"sources\":[\"/user/qwik/node_modules/@builder.io/qwik-city/index.qwik.mjs\"],\"names\":[],\"mappings\":\";;;;;;;;;;;;;;6BAycQ,CAAC,EAAE,MAAK,EAAE,GAAK;IACb,MAAM,CACJ,cACA,UACA,kBACA,eACA,MACA,cACA,UACA,QACA,gBACA,KACD,GAAG;IACJ,eAAe,MAAM;QACnB,MAAM,CAAC,MAAM,OAAO,GAAG,MAAM,IAAM;gBAAC,SAAS,KAAK;gBAAE,aAAa,KAAK;aAAC;QACvE,MAAM,SAAS,UAAU;QACzB,IAAI;QACJ,IAAI;QACJ,IAAI,cAAc,IAAI;QACtB,IAAI,UAAU;YACZ,WAAW,IAAI,IAAI,MAAM,eAAe,GAAG;YAC3C,cAAc,KAAK,WAAW;YAC9B,iBAAiB,KAAK,QAAQ;QAChC,OAAO;YACL,WAAW,IAAI,IAAI,MAAM;YACzB,IAAI,SAAS,QAAQ,CAAC,QAAQ,CAAC,MAC7B;gBAAA,IAAI,CAAC,SAAS,aAAa,EAAE,SAAS,QAAQ,GAAG,SAAS,QAAQ,CAAC,KAAK,CAAC,GAAG;YAAG,OAC1E,IAAI,SAAS,aAAa,EAAE,SAAS,QAAQ,IAAI;YACxD,IAAI,mBAAmB,UACrB,SAAS,MAAM,EACf,SAAS,KAAK,EACd,SAAS,YAAY,EACrB,SAAS,QAAQ;YAEnB,MAAM,UAAU;YAChB,MAAM,WAAY,iBAAiB,MAAM,eACvC,UACA,SACA,IAAI,EACJ;YAEF,IAAI,CAAC,UAAU;gBACb,SAAS,cAAc,GAAG,OAAO;gBACjC;YACF,CAAC;YACD,MAAM,UAAU,SAAS,IAAI;YAC7B,MAAM,SAAS,IAAI,IAAI,SAAS,SAAS,IAAI;YAC7C,IAAI,OAAO,QAAQ,KAAK,SAAS,QAAQ,EAAE;gBACzC,WAAW;gBACX,mBAAmB,UACjB,SAAS,MAAM,EACf,SAAS,KAAK,EACd,SAAS,YAAY,EACrB,SAAS,QAAQ;YAErB,CAAC;YACD,cAAc,MAAM;QACtB,CAAC;QACD,IAAI,aAAa;YACf,MAAM,CAAC,QAAQ,MAAM,KAAK,GAAG;YAC7B,MAAM,iBAAiB;YACvB,MAAM,aAAa,cAAc,CAAC,eAAe,MAAM,GAAG,EAAE;YAC5D,eAAe,GAAG,GAAG;YACrB,eAAe,MAAM,GAAG;gBACtB,GAAG,MAAM;YACX;YACA,SAAS,cAAc,GAAG,OAAO;YACjC,MAAM,eAAe,YACnB,gBACA,gBACA,gBACA;YAEF,SAAS,QAAQ,GAAG,WAAW,QAAQ;YACvC,SAAS,IAAI,GAAG;YAChB,iBAAiB,KAAK,GAAG,YAAY;YACrC,cAAc,KAAK,GAAG,aAAa,KAAK;YACxC,cAAc,IAAI,GAAG,aAAa,IAAI;YACtC,cAAc,MAAM,GAAG,aAAa,MAAM;YAC1C,cAAc,KAAK,GAAG,aAAa,KAAK;YACxC,cAAc,WAAW,GAAG,aAAa,WAAW;YACpD,IAAI,WAAW;gBACb,IACE,AAAC,CAAA,OAAO,cAAc,IAAI,IAAI,AAAD,KAC7B,8BAA8B,OAAO,QAAQ,EAAE,OAE/C,SAAS,qBAAqB,GAAG,IAAI;gBACvC,MAAM,UAAU,gBAAgB;gBAChC,IAAI,SAAS,OAAO,MAAM,CAAC,cAAc;gBACzC,kBAAkB,KAAK;gBACvB,eAAe,QAAQ,UAAU;gBACjC,eAAe,YAAY,GAAG,KAAK;YACrC,CAAC;QACH,CAAC;IACH;IACA,MAAM,UAAU;IAChB,IAAI,UAAU,OAAO;SAChB;AACP\"}")
/*
{
  "origin": "../node_modules/@builder.io/qwik-city/index.qwik.mjs",
  "name": "s_02wMImzEAbk",
  "entry": "../node_modules/@builder.io/qwik-city/index.qwik.mjs_entry_QwikCityProvider",
  "displayName": "QwikCityProvider_component_useTask",
  "hash": "02wMImzEAbk",
  "canonicalFilename": "s_02wmimzeabk",
  "path": "../node_modules/@builder.io/qwik-city",
  "extension": "mjs",
  "parent": "s_TxCFOy819ag",
  "ctxKind": "function",
  "ctxName": "useTask$",
  "captures": true,
  "loc": [
    15426,
    19233
  ]
}
*/
============================= ../node_modules/@builder.io/qwik-city/s_txcfoy819ag.mjs ==

import { _auto_ContentContext as ContentContext } from "./index.qwik.mjs";
import { _auto_ContentInternalContext as ContentInternalContext } from "./index.qwik.mjs";
import { _auto_DocumentHeadContext as DocumentHeadContext } from "./index.qwik.mjs";
import { _auto_RouteActionContext as RouteActionContext } from "./index.qwik.mjs";
import { _auto_RouteLocationContext as RouteLocationContext } from "./index.qwik.mjs";
import { _auto_RouteNavigateContext as RouteNavigateContext } from "./index.qwik.mjs";
import { _auto_RouteStateContext as RouteStateContext } from "./index.qwik.mjs";
import { Slot } from "@builder.io/qwik";
import { _jsxC } from "@builder.io/qwik";
import { _weakSerialize } from "@builder.io/qwik";
import { _auto_createDocumentHead as createDocumentHead } from "./index.qwik.mjs";
import { eventQrl } from "@builder.io/qwik";
import { qrl } from "@builder.io/qwik";
import { _auto_toPath as toPath } from "./index.qwik.mjs";
import { useContextProvider } from "@builder.io/qwik";
import { _auto_useQwikCityEnv as useQwikCityEnv } from "./index.qwik.mjs";
import { useServerData } from "@builder.io/qwik";
import { useSignal } from "@builder.io/qwik";
import { useStore } from "@builder.io/qwik";
import { useStylesQrl } from "@builder.io/qwik";
import { useTaskQrl } from "@builder.io/qwik";
export const s_TxCFOy819ag = (props)=>{
    useStylesQrl(/*#__PURE__*/ qrl(()=>import("../../../node_modules/@builder.io/qwik-city/index.qwik.mjs_entry_QwikCityProvider.mjs"), "s_RPDJAz33WLA"));
    const env = useQwikCityEnv();
    if (!env?.params) throw new Error(`Missing Qwik City Env Data`);
    const urlEnv = useServerData('url');
    if (!urlEnv) throw new Error(`Missing Qwik URL Env Data`);
    const url = new URL(urlEnv);
    const routeLocation = useStore({
        url,
        params: env.params,
        isNavigating: false
    }, {
        deep: false
    });
    const loaderState = _weakSerialize(useStore(env.response.loaders, {
        deep: false
    }));
    const navPath = useSignal(toPath(url));
    const documentHead = useStore(createDocumentHead);
    const content = useStore({
        headings: void 0,
        menu: void 0
    });
    const contentInternal = useSignal();
    const currentActionId = env.response.action;
    const currentAction = currentActionId ? env.response.loaders[currentActionId] : void 0;
    const actionState = useSignal(currentAction ? {
        id: currentActionId,
        data: env.response.formData,
        output: {
            result: currentAction,
            status: env.response.status
        }
    } : void 0);
    const goto = eventQrl(/*#__PURE__*/ qrl(()=>import("../../../node_modules/@builder.io/qwik-city/index.qwik.mjs_entry_QwikCityProvider.mjs"), "s_cBcjROynRVg", [
        actionState,
        navPath,
        routeLocation
    ]));
    useContextProvider(ContentContext, content);
    useContextProvider(ContentInternalContext, contentInternal);
    useContextProvider(DocumentHeadContext, documentHead);
    useContextProvider(RouteLocationContext, routeLocation);
    useContextProvider(RouteNavigateContext, goto);
    useContextProvider(RouteStateContext, loaderState);
    useContextProvider(RouteActionContext, actionState);
    useTaskQrl(/*#__PURE__*/ qrl(()=>import("../../../node_modules/@builder.io/qwik-city/index.qwik.mjs_entry_QwikCityProvider.mjs"), "s_02wMImzEAbk", [
        actionState,
        content,
        contentInternal,
        documentHead,
        env,
        loaderState,
        navPath,
        props,
        routeLocation,
        url
    ]));
    return /* @__PURE__ */ _jsxC(Slot, null, 3, 'qY_0');
};


Some("{\"version\":3,\"sources\":[\"/user/qwik/node_modules/@builder.io/qwik-city/index.qwik.mjs\"],\"names\":[],\"mappings\":\";;;;;;;;;;;;;;;;;;;;;6BAyX6B,CAAC,QAAU;IACpC;IAMA,MAAM,MAAM;IACZ,IAAI,CAAC,KAAK,QAAQ,MAAM,IAAI,MAAM,CAAC,0BAA0B,CAAC,EAAE;IAChE,MAAM,SAAS,cAAc;IAC7B,IAAI,CAAC,QAAQ,MAAM,IAAI,MAAM,CAAC,yBAAyB,CAAC,EAAE;IAC1D,MAAM,MAAM,IAAI,IAAI;IACpB,MAAM,gBAAgB,SACpB;QACE;QACA,QAAQ,IAAI,MAAM;QAClB,cAAc,KAAK;IACrB,GACA;QACE,MAAM,KAAK;IACb;IAEF,MAAM,cAAc,eAClB,SAAS,IAAI,QAAQ,CAAC,OAAO,EAAE;QAC7B,MAAM,KAAK;IACb;IAEF,MAAM,UAAU,UAAU,OAAO;IACjC,MAAM,eAAe,SAAS;IAC9B,MAAM,UAAU,SAAS;QACvB,UAAU,KAAK;QACf,MAAM,KAAK;IACb;IACA,MAAM,kBAAkB;IACxB,MAAM,kBAAkB,IAAI,QAAQ,CAAC,MAAM;IAC3C,MAAM,gBAAgB,kBAAkB,IAAI,QAAQ,CAAC,OAAO,CAAC,gBAAgB,GAAG,KAAK,CAAC;IACtF,MAAM,cAAc,UAClB,gBACI;QACE,IAAI;QACJ,MAAM,IAAI,QAAQ,CAAC,QAAQ;QAC3B,QAAQ;YACN,QAAQ;YACR,QAAQ,IAAI,QAAQ,CAAC,MAAM;QAC7B;IACF,IACA,KAAK,CAAC;IAEZ,MAAM,OAAO;;;;;IAuBb,mBAAmB,gBAAgB;IACnC,mBAAmB,wBAAwB;IAC3C,mBAAmB,qBAAqB;IACxC,mBAAmB,sBAAsB;IACzC,mBAAmB,sBAAsB;IACzC,mBAAmB,mBAAmB;IACtC,mBAAmB,oBAAoB;IACvC;;;;;;;;;;;;IAoHA,OAAO,aAAa,GAAG,MAAM,MAAM,IAAI,EAAE,GAAG;AAC9C\"}")
/*
{
  "origin": "../node_modules/@builder.io/qwik-city/index.qwik.mjs",
  "name": "s_TxCFOy819ag",
  "entry": "../node_modules/@builder.io/qwik-city/index.qwik.mjs_entry_QwikCityProvider",
  "displayName": "QwikCityProvider_component",
  "hash": "TxCFOy819ag",
  "canonicalFilename": "s_txcfoy819ag",
  "path": "../node_modules/@builder.io/qwik-city",
  "extension": "mjs",
  "parent": null,
  "ctxKind": "function",
  "ctxName": "component$",
  "captures": false,
  "loc": [
    12650,
    19595
  ]
}
*/
============================= ../node_modules/@builder.io/qwik-city/s_bubtvtyvvre.mjs ==

export const s_BUbtvTyvVRE = async (path)=>{
    throw new Error('Not implemented');
};


Some("{\"version\":3,\"sources\":[\"/user/qwik/node_modules/@builder.io/qwik-city/index.qwik.mjs\"],\"names\":[],\"mappings\":\"6BA6kB4C,OAAO,OAAS;IACtD,MAAM,IAAI,MAAM,mBAAmB;AACrC\"}")
/*
{
  "origin": "../node_modules/@builder.io/qwik-city/index.qwik.mjs",
  "name": "s_BUbtvTyvVRE",
  "entry": "../node_modules/@builder.io/qwik-city/index.qwik.mjs_entry_QwikCityMockProvider",
  "displayName": "QwikCityMockProvider_component_goto",
  "hash": "BUbtvTyvVRE",
  "canonicalFilename": "s_bubtvtyvvre",
  "path": "../node_modules/@builder.io/qwik-city",
  "extension": "mjs",
  "parent": "s_WmYC5H00wtI",
  "ctxKind": "function",
  "ctxName": "goto",
  "captures": false,
  "loc": [
    20087,
    20152
  ]
}
*/
============================= ../node_modules/@builder.io/qwik-city/s_wmyc5h00wti.mjs ==

import { _auto_ContentContext as ContentContext } from "./index.qwik.mjs";
import { _auto_ContentInternalContext as ContentInternalContext } from "./index.qwik.mjs";
import { _auto_DocumentHeadContext as DocumentHeadContext } from "./index.qwik.mjs";
import { _auto_RouteLocationContext as RouteLocationContext } from "./index.qwik.mjs";
import { _auto_RouteNavigateContext as RouteNavigateContext } from "./index.qwik.mjs";
import { _auto_RouteStateContext as RouteStateContext } from "./index.qwik.mjs";
import { Slot } from "@builder.io/qwik";
import { _jsxC } from "@builder.io/qwik";
import { _auto_createDocumentHead as createDocumentHead } from "./index.qwik.mjs";
import { qrl } from "@builder.io/qwik";
import { useContextProvider } from "@builder.io/qwik";
import { useSignal } from "@builder.io/qwik";
import { useStore } from "@builder.io/qwik";
export const s_WmYC5H00wtI = (props)=>{
    const urlEnv = props.url ?? 'http://localhost/';
    const url = new URL(urlEnv);
    const routeLocation = useStore({
        url,
        params: props.params ?? {},
        isNavigating: false
    }, {
        deep: false
    });
    const loaderState = useSignal({});
    const goto = /*#__PURE__*/ qrl(()=>import("../../../node_modules/@builder.io/qwik-city/index.qwik.mjs_entry_QwikCityMockProvider.mjs"), "s_BUbtvTyvVRE");
    const documentHead = useStore(createDocumentHead, {
        deep: false
    });
    const content = useStore({
        headings: void 0,
        menu: void 0
    }, {
        deep: false
    });
    const contentInternal = useSignal();
    useContextProvider(ContentContext, content);
    useContextProvider(ContentInternalContext, contentInternal);
    useContextProvider(DocumentHeadContext, documentHead);
    useContextProvider(RouteLocationContext, routeLocation);
    useContextProvider(RouteNavigateContext, goto);
    useContextProvider(RouteStateContext, loaderState);
    return /* @__PURE__ */ _jsxC(Slot, null, 3, 'qY_1');
};


Some("{\"version\":3,\"sources\":[\"/user/qwik/node_modules/@builder.io/qwik-city/index.qwik.mjs\"],\"names\":[],\"mappings\":\";;;;;;;;;;;;;6BA+jB6B,CAAC,QAAU;IACpC,MAAM,SAAS,MAAM,GAAG,IAAI;IAC5B,MAAM,MAAM,IAAI,IAAI;IACpB,MAAM,gBAAgB,SACpB;QACE;QACA,QAAQ,MAAM,MAAM,IAAI,CAAC;QACzB,cAAc,KAAK;IACrB,GACA;QACE,MAAM,KAAK;IACb;IAEF,MAAM,cAAc,UAAU,CAAC;IAC/B,MAAM;IAGN,MAAM,eAAe,SAAS,oBAAoB;QAChD,MAAM,KAAK;IACb;IACA,MAAM,UAAU,SACd;QACE,UAAU,KAAK;QACf,MAAM,KAAK;IACb,GACA;QACE,MAAM,KAAK;IACb;IAEF,MAAM,kBAAkB;IACxB,mBAAmB,gBAAgB;IACnC,mBAAmB,wBAAwB;IAC3C,mBAAmB,qBAAqB;IACxC,mBAAmB,sBAAsB;IACzC,mBAAmB,sBAAsB;IACzC,mBAAmB,mBAAmB;IACtC,OAAO,aAAa,GAAG,MAAM,MAAM,IAAI,EAAE,GAAG;AAC9C\"}")
/*
{
  "origin": "../node_modules/@builder.io/qwik-city/index.qwik.mjs",
  "name": "s_WmYC5H00wtI",
  "entry": "../node_modules/@builder.io/qwik-city/index.qwik.mjs_entry_QwikCityMockProvider",
  "displayName": "QwikCityMockProvider_component",
  "hash": "WmYC5H00wtI",
  "canonicalFilename": "s_wmyc5h00wti",
  "path": "../node_modules/@builder.io/qwik-city",
  "extension": "mjs",
  "parent": null,
  "ctxKind": "function",
  "ctxName": "component$",
  "captures": false,
  "loc": [
    19730,
    20871
  ]
}
*/
============================= ../node_modules/@builder.io/qwik-city/s_5g4b0gd1wck.mjs (ENTRY POINT)==

import { _auto_prefetchLinkResources as prefetchLinkResources } from "./index.qwik.mjs";
export const s_5g4B0Gd1Wck = (ev, elm)=>prefetchLinkResources(elm, ev.type === 'qvisible');


Some("{\"version\":3,\"sources\":[\"/user/qwik/node_modules/@builder.io/qwik-city/index.qwik.mjs\"],\"names\":[],\"mappings\":\";6BAonBQ,CAAC,IAAI,MAAQ,sBAAsB,KAAK,GAAG,IAAI,KAAK\"}")
/*
{
  "origin": "../node_modules/@builder.io/qwik-city/index.qwik.mjs",
  "name": "s_5g4B0Gd1Wck",
  "entry": null,
  "displayName": "Link_component_event_event",
  "hash": "5g4B0Gd1Wck",
  "canonicalFilename": "s_5g4b0gd1wck",
  "path": "../node_modules/@builder.io/qwik-city",
  "extension": "mjs",
  "parent": "s_8gdLBszqbaM",
  "ctxKind": "function",
  "ctxName": "event$",
  "captures": false,
  "loc": [
    21497,
    21560
  ]
}
*/
============================= ../node_modules/@builder.io/qwik-city/s_kzjavhdi3l0.mjs ==

import { useLexicalScope } from "@builder.io/qwik";
export const s_kzjavhDI3L0 = (_, elm)=>{
    const [nav2, reload2] = useLexicalScope();
    if (elm.href) nav2(elm.href, reload2);
};


Some("{\"version\":3,\"sources\":[\"/user/qwik/node_modules/@builder.io/qwik-city/index.qwik.mjs\"],\"names\":[],\"mappings\":\";6BA+nBU,CAAC,GAAG,MAAQ;IACV,MAAM,CAAC,MAAM,QAAQ,GAAG;IACxB,IAAI,IAAI,IAAI,EAAE,KAAK,IAAI,IAAI,EAAE;AAC/B\"}")
/*
{
  "origin": "../node_modules/@builder.io/qwik-city/index.qwik.mjs",
  "name": "s_kzjavhDI3L0",
  "entry": "../node_modules/@builder.io/qwik-city/index.qwik.mjs_entry_Link",
  "displayName": "Link_component_a_onClick",
  "hash": "kzjavhDI3L0",
  "canonicalFilename": "s_kzjavhdi3l0",
  "path": "../node_modules/@builder.io/qwik-city",
  "extension": "mjs",
  "parent": "s_8gdLBszqbaM",
  "ctxKind": "function",
  "ctxName": "_jsxS",
  "captures": true,
  "loc": [
    21863,
    21994
  ]
}
*/
============================= ../node_modules/@builder.io/qwik-city/s_8gdlbszqbam.mjs ==

import { Slot } from "@builder.io/qwik";
import { _jsxC } from "@builder.io/qwik";
import { _jsxS } from "@builder.io/qwik";
import { eventQrl } from "@builder.io/qwik";
import { _auto_getClientNavPath as getClientNavPath } from "./index.qwik.mjs";
import { _auto_getPrefetchDataset as getPrefetchDataset } from "./index.qwik.mjs";
import { qrl } from "@builder.io/qwik";
import { untrack } from "@builder.io/qwik";
import { useLocation } from "./index.qwik.mjs";
import { useNavigate } from "./index.qwik.mjs";
export const s_8gdLBszqbaM = (props)=>{
    const nav = useNavigate();
    const loc = useLocation();
    const linkProps = {
        ...props
    };
    const clientNavPath = untrack(()=>getClientNavPath(linkProps, loc));
    const prefetchDataset = untrack(()=>getPrefetchDataset(props, clientNavPath, loc));
    const reload = !!linkProps.reload;
    linkProps['preventdefault:click'] = !!clientNavPath;
    linkProps.href = clientNavPath || props.href;
    const event = eventQrl(/*#__PURE__*/ qrl(()=>import("./s_5g4b0gd1wck.mjs"), "s_5g4B0Gd1Wck"));
    return /* @__PURE__ */ _jsxS('a', {
        ...linkProps,
        'data-prefetch': prefetchDataset,
        children: /* @__PURE__ */ _jsxC(Slot, null, 3, 'AD_0'),
        onClick$: /*#__PURE__*/ qrl(()=>import("../../../node_modules/@builder.io/qwik-city/index.qwik.mjs_entry_Link.mjs"), "s_kzjavhDI3L0", [
            nav,
            reload
        ]),
        onMouseOver$: event,
        onFocus$: event,
        onQVisible$: event
    }, null, 0, 'AD_1');
};


Some("{\"version\":3,\"sources\":[\"/user/qwik/node_modules/@builder.io/qwik-city/index.qwik.mjs\"],\"names\":[],\"mappings\":\";;;;;;;;;;6BAumB6B,CAAC,QAAU;IACpC,MAAM,MAAM;IACZ,MAAM,MAAM;IACZ,MAAM,YAAY;QAChB,GAAG,KAAK;IACV;IACA,MAAM,gBAAgB,QAAQ,IAAM,iBAAiB,WAAW;IAChE,MAAM,kBAAkB,QAAQ,IAAM,mBAAmB,OAAO,eAAe;IAC/E,MAAM,SAAS,CAAC,CAAC,UAAU,MAAM;IACjC,SAAS,CAAC,uBAAuB,GAAG,CAAC,CAAC;IACtC,UAAU,IAAI,GAAG,iBAAiB,MAAM,IAAI;IAC5C,MAAM,QAAQ;IAMd,OAAO,aAAa,GAAG,MACrB,KACA;QACE,GAAG,SAAS;QACZ,iBAAiB;QACjB,UAAU,aAAa,GAAG,MAAM,MAAM,IAAI,EAAE,GAAG;QAC/C,QAAQ;;;;QAQR,cAAc;QACd,UAAU;QACV,aAAa;IACf,GACA,IAAI,EACJ,GACA;AAEJ\"}")
/*
{
  "origin": "../node_modules/@builder.io/qwik-city/index.qwik.mjs",
  "name": "s_8gdLBszqbaM",
  "entry": "../node_modules/@builder.io/qwik-city/index.qwik.mjs_entry_Link",
  "displayName": "Link_component",
  "hash": "8gdLBszqbaM",
  "canonicalFilename": "s_8gdlbszqbam",
  "path": "../node_modules/@builder.io/qwik-city",
  "extension": "mjs",
  "parent": null,
  "ctxKind": "function",
  "ctxName": "component$",
  "captures": false,
  "loc": [
    20994,
    22216
  ]
}
*/
============================= ../node_modules/@builder.io/qwik-city/s_a5bzc7wo00a.mjs ==

import { isServer } from "@builder.io/qwik/build";
import { noSerialize } from "@builder.io/qwik";
import { useLexicalScope } from "@builder.io/qwik";
export const s_A5bZC7WO00A = (input = {})=>{
    const [currentAction2, id2, loc2, state2] = useLexicalScope();
    if (isServer) throw new Error(`Actions can not be invoked within the server during SSR.
Action.run() can only be called on the browser, for example when a user clicks a button, or submits a form.`);
    let data;
    let form;
    if (input instanceof SubmitEvent) {
        form = input.target;
        data = new FormData(form);
        if ((input.submitter instanceof HTMLInputElement || input.submitter instanceof HTMLButtonElement) && input.submitter.name) {
            if (input.submitter.name) data.append(input.submitter.name, input.submitter.value);
        }
    } else data = input;
    return new Promise((resolve)=>{
        if (data instanceof FormData) state2.formData = data;
        state2.isRunning = true;
        loc2.isNavigating = true;
        currentAction2.value = {
            data,
            id: id2,
            resolve: noSerialize(resolve)
        };
    }).then(({ result , status  })=>{
        state2.isRunning = false;
        state2.status = status;
        state2.value = result;
        if (form) {
            if (form.getAttribute('data-spa-reset') === 'true') form.reset();
            const detail = {
                status,
                value: result
            };
            form.dispatchEvent(new CustomEvent('submitcompleted', {
                bubbles: false,
                cancelable: false,
                composed: false,
                detail
            }));
        }
        return {
            status,
            value: result
        };
    });
};


Some("{\"version\":3,\"sources\":[\"/user/qwik/node_modules/@builder.io/qwik-city/index.qwik.mjs\"],\"names\":[],\"mappings\":\";;;6BA+rBM,CAAC,QAAQ,CAAC,CAAC,GAAK;IACd,MAAM,CAAC,gBAAgB,KAAK,MAAM,OAAO,GAAG;IAC5C,IAAI,UACF,MAAM,IAAI,MAAM,CAAC;2GACgF,CAAC,EAAE;IACtG,IAAI;IACJ,IAAI;IACJ,IAAI,iBAAiB,aAAa;QAChC,OAAO,MAAM,MAAM;QACnB,OAAO,IAAI,SAAS;QACpB,IACE,AAAC,CAAA,MAAM,SAAS,YAAY,oBAC1B,MAAM,SAAS,YAAY,iBAAgB,KAC7C,MAAM,SAAS,CAAC,IAAI,EAEpB;YAAA,IAAI,MAAM,SAAS,CAAC,IAAI,EAAE,KAAK,MAAM,CAAC,MAAM,SAAS,CAAC,IAAI,EAAE,MAAM,SAAS,CAAC,KAAK;QAAC,CACnF;IACH,OAAO,OAAO;IACd,OAAO,IAAI,QAAQ,CAAC,UAAY;QAC9B,IAAI,gBAAgB,UAAU,OAAO,QAAQ,GAAG;QAChD,OAAO,SAAS,GAAG,IAAI;QACvB,KAAK,YAAY,GAAG,IAAI;QACxB,eAAe,KAAK,GAAG;YACrB;YACA,IAAI;YACJ,SAAS,YAAY;QACvB;IACF,GAAG,IAAI,CAAC,CAAC,EAAE,OAAM,EAAE,OAAM,EAAE,GAAK;QAC9B,OAAO,SAAS,GAAG,KAAK;QACxB,OAAO,MAAM,GAAG;QAChB,OAAO,KAAK,GAAG;QACf,IAAI,MAAM;YACR,IAAI,KAAK,YAAY,CAAC,sBAAsB,QAAQ,KAAK,KAAK;YAC9D,MAAM,SAAS;gBACb;gBACA,OAAO;YACT;YACA,KAAK,aAAa,CAChB,IAAI,YAAY,mBAAmB;gBACjC,SAAS,KAAK;gBACd,YAAY,KAAK;gBACjB,UAAU,KAAK;gBACf;YACF;QAEJ,CAAC;QACD,OAAO;YACL;YACA,OAAO;QACT;IACF;AACF\"}")
/*
{
  "origin": "../node_modules/@builder.io/qwik-city/index.qwik.mjs",
  "name": "s_A5bZC7WO00A",
  "entry": "../node_modules/@builder.io/qwik-city/index.qwik.mjs_entry_routeActionQrl",
  "displayName": "routeActionQrl_action_submit",
  "hash": "A5bZC7WO00A",
  "canonicalFilename": "s_a5bzc7wo00a",
  "path": "../node_modules/@builder.io/qwik-city",
  "extension": "mjs",
  "parent": null,
  "ctxKind": "function",
  "ctxName": "submit",
  "captures": true,
  "loc": [
    23627,
    25399
  ]
}
*/
============================= ../node_modules/@builder.io/qwik-city/s_woipfiq04l4.mjs ==

import { _deserializeData } from "@builder.io/qwik";
import { _getContextElement } from "@builder.io/qwik";
import { _serializeData } from "@builder.io/qwik";
import { _auto_getSSETransformer as getSSETransformer } from "./index.qwik.mjs";
import { isServer } from "@builder.io/qwik/build";
import { _auto_streamAsyncIterator as streamAsyncIterator } from "./index.qwik.mjs";
import { useLexicalScope } from "@builder.io/qwik";
import { _auto_useQwikCityEnv as useQwikCityEnv } from "./index.qwik.mjs";
export const s_wOIPfiQ04l4 = async (...args)=>{
    const [qrl2] = useLexicalScope();
    if (isServer) {
        const requestEvent = useQwikCityEnv()?.ev;
        return qrl2.apply(requestEvent, args);
    } else {
        const ctxElm = _getContextElement();
        const filtered = args.map((arg)=>{
            if (arg instanceof SubmitEvent && arg.target instanceof HTMLFormElement) return new FormData(arg.target);
            else if (arg instanceof Event) return null;
            else if (arg instanceof Node) return null;
            return arg;
        });
        const hash = qrl2.getHash();
        const path = `?qfunc=${qrl2.getHash()}`;
        const body = await _serializeData([
            qrl2,
            ...filtered
        ], false);
        const res = await fetch(path, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/qwik-json',
                'X-QRL': hash
            },
            body
        });
        const contentType = res.headers.get('Content-Type');
        if (res.ok && contentType === 'text/event-stream') {
            const { writable , readable  } = getSSETransformer();
            res.body?.pipeTo(writable);
            return streamAsyncIterator(readable, ctxElm ?? document.documentElement);
        } else if (contentType === 'application/qwik-json') {
            const str = await res.text();
            const obj = await _deserializeData(str, ctxElm ?? document.documentElement);
            if (res.status === 500) throw obj;
            return obj;
        }
    }
};


Some("{\"version\":3,\"sources\":[\"/user/qwik/node_modules/@builder.io/qwik-city/index.qwik.mjs\"],\"names\":[],\"mappings\":\";;;;;;;;6BA60BM,OAAO,GAAG,OAAS;IACjB,MAAM,CAAC,KAAK,GAAG;IACf,IAAI,UAAU;QACZ,MAAM,eAAe,kBAAkB;QACvC,OAAO,KAAK,KAAK,CAAC,cAAc;IAClC,OAAO;QACL,MAAM,SAAS;QACf,MAAM,WAAW,KAAK,GAAG,CAAC,CAAC,MAAQ;YACjC,IAAI,eAAe,eAAe,IAAI,MAAM,YAAY,iBACtD,OAAO,IAAI,SAAS,IAAI,MAAM;iBAC3B,IAAI,eAAe,OAAO,OAAO,IAAI;iBACrC,IAAI,eAAe,MAAM,OAAO,IAAI;YACzC,OAAO;QACT;QACA,MAAM,OAAO,KAAK,OAAO;QACzB,MAAM,OAAO,CAAC,OAAO,EAAE,KAAK,OAAO,GAAG,CAAC;QACvC,MAAM,OAAO,MAAM,eAAe;YAAC;eAAS;SAAS,EAAE,KAAK;QAC5D,MAAM,MAAM,MAAM,MAAM,MAAM;YAC5B,QAAQ;YACR,SAAS;gBACP,gBAAgB;gBAChB,SAAS;YACX;YACA;QACF;QACA,MAAM,cAAc,IAAI,OAAO,CAAC,GAAG,CAAC;QACpC,IAAI,IAAI,EAAE,IAAI,gBAAgB,qBAAqB;YACjD,MAAM,EAAE,SAAQ,EAAE,SAAQ,EAAE,GAAG;YAC/B,IAAI,IAAI,EAAE,OAAO;YACjB,OAAO,oBAAoB,UAAU,UAAU,SAAS,eAAe;QACzE,OAAO,IAAI,gBAAgB,yBAAyB;YAClD,MAAM,MAAM,MAAM,IAAI,IAAI;YAC1B,MAAM,MAAM,MAAM,iBAAiB,KAAK,UAAU,SAAS,eAAe;YAC1E,IAAI,IAAI,MAAM,KAAK,KAAK,MAAM,IAAI;YAClC,OAAO;QACT,CAAC;IACH,CAAC;AACH\"}")
/*
{
  "origin": "../node_modules/@builder.io/qwik-city/index.qwik.mjs",
  "name": "s_wOIPfiQ04l4",
  "entry": "../node_modules/@builder.io/qwik-city/index.qwik.mjs_entry_serverQrl",
  "displayName": "serverQrl_stuff",
  "hash": "wOIPfiQ04l4",
  "canonicalFilename": "s_woipfiq04l4",
  "path": "../node_modules/@builder.io/qwik-city",
  "extension": "mjs",
  "parent": null,
  "ctxKind": "function",
  "ctxName": "stuff",
  "captures": true,
  "loc": [
    28381,
    29960
  ]
}
*/
============================= ../node_modules/@builder.io/qwik-city/s_p9msze0ojs4.mjs ==

import { useLexicalScope } from "@builder.io/qwik";
export const s_p9MSze0ojs4 = async (_, form)=>{
    const [nav2] = useLexicalScope();
    const formData = new FormData(form);
    const params = new URLSearchParams();
    formData.forEach((value, key)=>{
        if (typeof value === 'string') params.append(key, value);
    });
    nav2('?' + params.toString(), true).then(()=>{
        if (form.getAttribute('data-spa-reset') === 'true') form.reset();
        form.dispatchEvent(new CustomEvent('submitcompleted', {
            bubbles: false,
            cancelable: false,
            composed: false,
            detail: {
                status: 200
            }
        }));
    });
};


Some("{\"version\":3,\"sources\":[\"/user/qwik/node_modules/@builder.io/qwik-city/index.qwik.mjs\"],\"names\":[],\"mappings\":\";6BA6+BU,OAAO,GAAG,OAAS;IACjB,MAAM,CAAC,KAAK,GAAG;IACf,MAAM,WAAW,IAAI,SAAS;IAC9B,MAAM,SAAS,IAAI;IACnB,SAAS,OAAO,CAAC,CAAC,OAAO,MAAQ;QAC/B,IAAI,OAAO,UAAU,UAAU,OAAO,MAAM,CAAC,KAAK;IACpD;IACA,KAAK,MAAM,OAAO,QAAQ,IAAI,IAAI,EAAE,IAAI,CAAC,IAAM;QAC7C,IAAI,KAAK,YAAY,CAAC,sBAAsB,QAAQ,KAAK,KAAK;QAC9D,KAAK,aAAa,CAChB,IAAI,YAAY,mBAAmB;YACjC,SAAS,KAAK;YACd,YAAY,KAAK;YACjB,UAAU,KAAK;YACf,QAAQ;gBACN,QAAQ;YACV;QACF;IAEJ;AACF\"}")
/*
{
  "origin": "../node_modules/@builder.io/qwik-city/index.qwik.mjs",
  "name": "s_p9MSze0ojs4",
  "entry": "../node_modules/@builder.io/qwik-city/index.qwik.mjs_entry_GetForm",
  "displayName": "GetForm_component_form_onSubmit",
  "hash": "p9MSze0ojs4",
  "canonicalFilename": "s_p9msze0ojs4",
  "path": "../node_modules/@builder.io/qwik-city",
  "extension": "mjs",
  "parent": "s_Nk9PlpjQm9Y",
  "ctxKind": "function",
  "ctxName": "_jsxS",
  "captures": true,
  "loc": [
    33229,
    34009
  ]
}
*/
============================= ../node_modules/@builder.io/qwik-city/s_nk9plpjqm9y.mjs ==

import { Slot } from "@builder.io/qwik";
import { _fnSignal } from "@builder.io/qwik";
import { _jsxC } from "@builder.io/qwik";
import { _jsxS } from "@builder.io/qwik";
import { _restProps } from "@builder.io/qwik";
import { qrl } from "@builder.io/qwik";
import { useNavigate } from "./index.qwik.mjs";
export const s_Nk9PlpjQm9Y = (props)=>{
    const rest = _restProps(props, [
        'action',
        'spaReset',
        'reloadDocument',
        'onSubmit$'
    ]);
    const nav = useNavigate();
    return /* @__PURE__ */ _jsxS('form', {
        ...rest,
        children: /* @__PURE__ */ _jsxC(Slot, null, 3, 'BC_0'),
        onSubmit$: /*#__PURE__*/ qrl(()=>import("../../../node_modules/@builder.io/qwik-city/index.qwik.mjs_entry_GetForm.mjs"), "s_p9MSze0ojs4", [
            nav
        ])
    }, {
        action: 'get',
        'preventdefault:submit': _fnSignal((p0)=>!p0.reloadDocument, [
            props
        ], '!p0.reloadDocument'),
        'data-spa-reset': _fnSignal((p0)=>p0.spaReset ? 'true' : void 0, [
            props
        ], 'p0.spaReset?"true":undefined')
    }, 0, 'BC_1');
};


Some("{\"version\":3,\"sources\":[\"/user/qwik/node_modules/@builder.io/qwik-city/index.qwik.mjs\"],\"names\":[],\"mappings\":\";;;;;;;6BAo+B6B,CAAC,QAAU;IACpC,MAAM,OAAO,WAAW,OAAO;QAAC;QAAU;QAAY;QAAkB;KAAY;IACpF,MAAM,MAAM;IACZ,OAAO,aAAa,GAAG,MACrB,QACA;QACE,GAAG,IAAI;QACP,UAAU,aAAa,GAAG,MAAM,MAAM,IAAI,EAAE,GAAG;QAC/C,SAAS;;;IAyBX,GACA;QACE,QAAQ;QACR,yBAAyB,UACvB,CAAC,KAAO,CAAC,GAAG,cAAc,EAC1B;YAAC;SAAM,EACP;QAEF,kBAAkB,UAChB,CAAC,KAAQ,GAAG,QAAQ,GAAG,SAAS,KAAK,CAAC,EACtC;YAAC;SAAM,EACP;IAEJ,GACA,GACA;AAEJ\"}")
/*
{
  "origin": "../node_modules/@builder.io/qwik-city/index.qwik.mjs",
  "name": "s_Nk9PlpjQm9Y",
  "entry": "../node_modules/@builder.io/qwik-city/index.qwik.mjs_entry_GetForm",
  "displayName": "GetForm_component",
  "hash": "Nk9PlpjQm9Y",
  "canonicalFilename": "s_nk9plpjqm9y",
  "path": "../node_modules/@builder.io/qwik-city",
  "extension": "mjs",
  "parent": null,
  "ctxKind": "function",
  "ctxName": "component$",
  "captures": false,
  "loc": [
    32900,
    34478
  ]
}
*/
============================= ../node_modules/@builder.io/qwik-city/index.qwik.mjs ==

import { qrl } from "@builder.io/qwik";
import { createContextId, componentQrl, _jsxBranch, useContext, _jsxC, withLocale, _deserializeData, noSerialize, useServerData, useStore, _getContextElement, _jsxS, _jsxQ, _wrapSignal, implicit$FirstArg } from '@builder.io/qwik';
import { isServer, isDev } from '@builder.io/qwik/build';
import swRegister from '@qwik-city-sw-register';
import { z } from 'zod';
import { z as z2 } from 'zod';
const RouteStateContext = /* @__PURE__ */ createContextId('qc-s');
const ContentContext = /* @__PURE__ */ createContextId('qc-c');
const ContentInternalContext = /* @__PURE__ */ createContextId('qc-ic');
const DocumentHeadContext = /* @__PURE__ */ createContextId('qc-h');
const RouteLocationContext = /* @__PURE__ */ createContextId('qc-l');
const RouteNavigateContext = /* @__PURE__ */ createContextId('qc-n');
const RouteActionContext = /* @__PURE__ */ createContextId('qc-a');
const RouterOutlet = /* @__PURE__ */ componentQrl(/*#__PURE__*/ qrl(()=>import("../../../node_modules/@builder.io/qwik-city/index.qwik.mjs_entry_RouterOutlet.mjs"), "s_AKetNByE5TM"));
const MODULE_CACHE = /* @__PURE__ */ new WeakMap();
const CLIENT_DATA_CACHE = /* @__PURE__ */ new Map();
const QACTION_KEY = 'qaction';
const toPath = (url)=>url.pathname + url.search + url.hash;
const toUrl = (url, baseUrl)=>new URL(url, baseUrl.href);
const isSameOrigin = (a, b)=>a.origin === b.origin;
const isSamePath = (a, b)=>a.pathname + a.search === b.pathname + b.search;
const isSamePathname = (a, b)=>a.pathname === b.pathname;
const isSameOriginDifferentPathname = (a, b)=>isSameOrigin(a, b) && !isSamePath(a, b);
const getClientDataPath = (pathname, pageSearch, action)=>{
    let search = pageSearch ?? '';
    if (action) search += (search ? '&' : '?') + QACTION_KEY + '=' + encodeURIComponent(action.id);
    return pathname + (pathname.endsWith('/') ? '' : '/') + 'q-data.json' + search;
};
const getClientNavPath = (props, baseUrl)=>{
    const href = props.href;
    if (typeof href === 'string' && href.trim() !== '' && typeof props.target !== 'string') try {
        const linkUrl = toUrl(href, baseUrl.url);
        const currentUrl = toUrl('', baseUrl.url);
        if (isSameOrigin(linkUrl, currentUrl)) return toPath(linkUrl);
    } catch (e) {
        console.error(e);
    }
    else if (props.reload) return toPath(toUrl('', baseUrl.url));
    return null;
};
const getPrefetchDataset = (props, clientNavPath, currentLoc)=>{
    if (props.prefetch === true && clientNavPath) {
        const prefetchUrl = toUrl(clientNavPath, currentLoc.url);
        if (!isSamePathname(prefetchUrl, toUrl('', currentLoc.url))) return '';
    }
    return null;
};
const clientNavigate = (win, newUrl, routeNavigate)=>{
    const currentUrl = win.location;
    if (isSameOriginDifferentPathname(currentUrl, newUrl)) {
        handleScroll(win, currentUrl, newUrl);
        win.history.pushState('', '', toPath(newUrl));
    }
    if (!win._qCityHistory) {
        win._qCityHistory = 1;
        win.addEventListener('popstate', ()=>{
            const currentUrl2 = win.location;
            const previousUrl = toUrl(routeNavigate.value, currentUrl2);
            if (isSameOriginDifferentPathname(currentUrl2, previousUrl)) {
                handleScroll(win, previousUrl, currentUrl2);
                routeNavigate.value = toPath(new URL(currentUrl2.href));
            }
        });
        win.removeEventListener('popstate', win._qCityPopstateFallback);
    }
};
const handleScroll = async (win, previousUrl, newUrl)=>{
    const doc = win.document;
    const newHash = newUrl.hash;
    if (isSamePath(previousUrl, newUrl)) {
        if (previousUrl.hash !== newHash) {
            await domWait();
            if (newHash) scrollToHashId(doc, newHash);
            else win.scrollTo(0, 0);
        }
    } else {
        if (newHash) for(let i = 0; i < 24; i++){
            await domWait();
            if (scrollToHashId(doc, newHash)) break;
        }
        else {
            await domWait();
            win.scrollTo(0, 0);
        }
    }
};
const domWait = ()=>new Promise((resolve)=>setTimeout(resolve, 12));
const scrollToHashId = (doc, hash)=>{
    const elmId = hash.slice(1);
    const elm = doc.getElementById(elmId);
    if (elm) elm.scrollIntoView();
    return elm;
};
const dispatchPrefetchEvent = (prefetchData)=>{
    if (typeof document !== 'undefined') document.dispatchEvent(new CustomEvent('qprefetch', {
        detail: prefetchData
    }));
};
const resolveHead = (endpoint, routeLocation, contentModules, locale)=>{
    const head = createDocumentHead();
    const getData = (loaderOrAction)=>{
        const id = loaderOrAction.__id;
        if (loaderOrAction.__brand === 'server_loader') {
            if (!(id in endpoint.loaders)) throw new Error('You can not get the returned data of a loader that has not been executed for this request.');
        }
        const data = endpoint.loaders[id];
        if (data instanceof Promise) throw new Error('Loaders returning a function can not be referred to in the head function.');
        return data;
    };
    const headProps = {
        head,
        withLocale: (fn)=>withLocale(locale, fn),
        resolveValue: getData,
        ...routeLocation
    };
    for(let i = contentModules.length - 1; i >= 0; i--){
        const contentModuleHead = contentModules[i] && contentModules[i].head;
        if (contentModuleHead) {
            if (typeof contentModuleHead === 'function') resolveDocumentHead(head, withLocale(locale, ()=>contentModuleHead(headProps)));
            else if (typeof contentModuleHead === 'object') resolveDocumentHead(head, contentModuleHead);
        }
    }
    return headProps.head;
};
const resolveDocumentHead = (resolvedHead, updatedHead)=>{
    if (typeof updatedHead.title === 'string') resolvedHead.title = updatedHead.title;
    mergeArray(resolvedHead.meta, updatedHead.meta);
    mergeArray(resolvedHead.links, updatedHead.links);
    mergeArray(resolvedHead.styles, updatedHead.styles);
    Object.assign(resolvedHead.frontmatter, updatedHead.frontmatter);
};
const mergeArray = (existingArr, newArr)=>{
    if (Array.isArray(newArr)) for (const newItem of newArr){
        if (typeof newItem.key === 'string') {
            const existingIndex = existingArr.findIndex((i)=>i.key === newItem.key);
            if (existingIndex > -1) {
                existingArr[existingIndex] = newItem;
                continue;
            }
        }
        existingArr.push(newItem);
    }
};
const createDocumentHead = ()=>({
        title: '',
        meta: [],
        links: [],
        styles: [],
        frontmatter: {}
    });
const loadRoute = async (routes, menus, cacheModules, pathname)=>{
    if (Array.isArray(routes)) for (const route of routes){
        const match = route[0].exec(pathname);
        if (match) {
            const loaders = route[1];
            const params = getPathParams(route[2], match);
            const routeBundleNames = route[4];
            const mods = new Array(loaders.length);
            const pendingLoads = [];
            const menuLoader = getMenuLoader(menus, pathname);
            let menu = void 0;
            loaders.forEach((moduleLoader, i)=>{
                loadModule(moduleLoader, pendingLoads, (routeModule)=>mods[i] = routeModule, cacheModules);
            });
            loadModule(menuLoader, pendingLoads, (menuModule)=>menu = menuModule?.default, cacheModules);
            if (pendingLoads.length > 0) await Promise.all(pendingLoads);
            return [
                params,
                mods,
                menu,
                routeBundleNames
            ];
        }
    }
    return null;
};
const loadModule = (moduleLoader, pendingLoads, moduleSetter, cacheModules)=>{
    if (typeof moduleLoader === 'function') {
        const loadedModule = MODULE_CACHE.get(moduleLoader);
        if (loadedModule) moduleSetter(loadedModule);
        else {
            const l = moduleLoader();
            if (typeof l.then === 'function') pendingLoads.push(l.then((loadedModule2)=>{
                if (cacheModules !== false) MODULE_CACHE.set(moduleLoader, loadedModule2);
                moduleSetter(loadedModule2);
            }));
            else if (l) moduleSetter(l);
        }
    }
};
const getMenuLoader = (menus, pathname)=>{
    if (menus) {
        pathname = pathname.endsWith('/') ? pathname : pathname + '/';
        const menu = menus.find((m)=>m[0] === pathname || pathname.startsWith(m[0] + (pathname.endsWith('/') ? '' : '/')));
        if (menu) return menu[1];
    }
};
const getPathParams = (paramNames, match)=>{
    const params = {};
    if (paramNames) for(let i = 0; i < paramNames.length; i++){
        const param = match?.[i + 1] ?? '';
        const v = param.endsWith('/') ? param.slice(0, -1) : param;
        params[paramNames[i]] = decodeURIComponent(v);
    }
    return params;
};
const loadClientData = async (url, element, clearCache, action)=>{
    const pagePathname = url.pathname;
    const pageSearch = url.search;
    const clientDataPath = getClientDataPath(pagePathname, pageSearch, action);
    let qData = void 0;
    if (!action) qData = CLIENT_DATA_CACHE.get(clientDataPath);
    dispatchPrefetchEvent({
        links: [
            pagePathname
        ]
    });
    if (!qData) {
        const options = getFetchOptions(action);
        if (action) action.data = void 0;
        qData = fetch(clientDataPath, options).then((rsp)=>{
            const redirectedURL = new URL(rsp.url);
            if (redirectedURL.origin !== location.origin || !isQDataJson(redirectedURL.pathname)) {
                location.href = redirectedURL.href;
                return;
            }
            if ((rsp.headers.get('content-type') || '').includes('json')) return rsp.text().then((text)=>{
                const clientData = _deserializeData(text, element);
                if (!clientData) {
                    location.href = url.href;
                    return;
                }
                if (clearCache) CLIENT_DATA_CACHE.delete(clientDataPath);
                if (clientData.redirect) location.href = clientData.redirect;
                else if (action) {
                    const actionData = clientData.loaders[action.id];
                    action.resolve({
                        status: rsp.status,
                        result: actionData
                    });
                }
                return clientData;
            });
            else {
                location.href = url.href;
                return void 0;
            }
        });
        if (!action) CLIENT_DATA_CACHE.set(clientDataPath, qData);
    }
    return qData.then((v)=>{
        if (!v) CLIENT_DATA_CACHE.delete(clientDataPath);
        return v;
    });
};
const getFetchOptions = (action)=>{
    const actionData = action?.data;
    if (!actionData) return void 0;
    if (actionData instanceof FormData) return {
        method: 'POST',
        body: actionData
    };
    else return {
        method: 'POST',
        body: JSON.stringify(actionData),
        headers: {
            'Content-Type': 'application/json, charset=UTF-8'
        }
    };
};
const isQDataJson = (pathname)=>{
    return pathname.endsWith(QDATA_JSON);
};
const QDATA_JSON = '/q-data.json';
const useContent = ()=>useContext(ContentContext);
const useDocumentHead = ()=>useContext(DocumentHeadContext);
const useLocation = ()=>useContext(RouteLocationContext);
const useNavigate = ()=>useContext(RouteNavigateContext);
const useAction = ()=>useContext(RouteActionContext);
const useQwikCityEnv = ()=>noSerialize(useServerData('qwikcity'));
const QwikCityProvider = /* @__PURE__ */ componentQrl(/*#__PURE__*/ qrl(()=>import("../../../node_modules/@builder.io/qwik-city/index.qwik.mjs_entry_QwikCityProvider.mjs"), "s_TxCFOy819ag"));
const QwikCityMockProvider = /* @__PURE__ */ componentQrl(/*#__PURE__*/ qrl(()=>import("../../../node_modules/@builder.io/qwik-city/index.qwik.mjs_entry_QwikCityMockProvider.mjs"), "s_WmYC5H00wtI"));
const Link = /* @__PURE__ */ componentQrl(/*#__PURE__*/ qrl(()=>import("../../../node_modules/@builder.io/qwik-city/index.qwik.mjs_entry_Link.mjs"), "s_8gdLBszqbaM"));
const prefetchLinkResources = (elm, isOnVisible)=>{
    if (elm && elm.href && elm.hasAttribute('data-prefetch')) {
        if (!windowInnerWidth) windowInnerWidth = innerWidth;
        if (!isOnVisible || isOnVisible && windowInnerWidth < 520) loadClientData(new URL(elm.href), elm);
    }
};
let windowInnerWidth = 0;
const ServiceWorkerRegister = (props)=>_jsxQ('script', {
        nonce: _wrapSignal(props, 'nonce')
    }, {
        dangerouslySetInnerHTML: swRegister
    }, null, 3, '1Z_0');
const routeActionQrl = (actionQrl, ...rest)=>{
    const { id , validators  } = getValidators(rest, actionQrl);
    function action() {
        const loc = useLocation();
        const currentAction = useAction();
        const initialState = {
            actionPath: `?${QACTION_KEY}=${id}`,
            isRunning: false,
            status: void 0,
            value: void 0,
            formData: void 0
        };
        const state = useStore(()=>{
            const value = currentAction.value;
            if (value && value?.id === id) {
                const data = value.data;
                if (data instanceof FormData) initialState.formData = data;
                if (value.output) {
                    const { status , result  } = value.output;
                    initialState.status = status;
                    initialState.value = result;
                }
            }
            return initialState;
        });
        const submit = /*#__PURE__*/ qrl(()=>import("../../../node_modules/@builder.io/qwik-city/index.qwik.mjs_entry_routeActionQrl.mjs"), "s_A5bZC7WO00A", [
            currentAction,
            id,
            loc,
            state
        ]);
        initialState.submit = submit;
        return state;
    }
    action.__brand = 'server_action';
    action.__validators = validators;
    action.__qrl = actionQrl;
    action.__id = id;
    Object.freeze(action);
    return action;
};
const globalActionQrl = (actionQrl, ...rest)=>{
    const action = routeActionQrl(actionQrl, ...rest);
    if (isServer) {
        if (typeof globalThis._qwikActionsMap === 'undefined') globalThis._qwikActionsMap = /* @__PURE__ */ new Map();
        globalThis._qwikActionsMap.set(action.__id, action);
    }
    return action;
};
const routeAction$ = /* @__PURE__ */ implicit$FirstArg(routeActionQrl);
const globalAction$ = /* @__PURE__ */ implicit$FirstArg(globalActionQrl);
const routeLoaderQrl = (loaderQrl, ...rest)=>{
    const { id , validators  } = getValidators(rest, loaderQrl);
    function loader() {
        return useContext(RouteStateContext, (state)=>{
            if (!(id in state)) throw new Error(`Loader (${id}) was used in a path where the 'loader$' was not declared.
    This is likely because the used loader was not exported in a layout.tsx or index.tsx file of the existing route.
    For more information check: https://qwik.dev/qwikcity/route-loader/`);
            return _wrapSignal(state, id);
        });
    }
    loader.__brand = 'server_loader';
    loader.__qrl = loaderQrl;
    loader.__validators = validators;
    loader.__id = id;
    Object.freeze(loader);
    return loader;
};
const routeLoader$ = /* @__PURE__ */ implicit$FirstArg(routeLoaderQrl);
const validatorQrl = (validator)=>{
    if (isServer) return {
        validate: validator
    };
    return void 0;
};
const validator$ = /* @__PURE__ */ implicit$FirstArg(validatorQrl);
const zodQrl = (qrl)=>{
    if (isServer) {
        const schema = qrl.resolve().then((obj)=>{
            if (typeof obj === 'function') obj = obj(z);
            if (obj instanceof z.Schema) return obj;
            else return z.object(obj);
        });
        return {
            async validate (ev, inputData) {
                const data = inputData ?? await ev.parseBody();
                const result = await (await schema).safeParseAsync(data);
                if (result.success) return result;
                else {
                    if (isDev) console.error('\nVALIDATION ERROR\naction$() zod validated failed', '\n  - Issues:', result.error.issues);
                    return {
                        success: false,
                        status: 400,
                        error: result.error.flatten()
                    };
                }
            }
        };
    }
    return void 0;
};
const zod$ = /* @__PURE__ */ implicit$FirstArg(zodQrl);
const serverQrl = (qrl1)=>{
    if (isServer) {
        const captured = qrl1.getCaptured();
        if (captured && captured.length > 0 && !_getContextElement()) throw new Error('For security reasons, we cannot serialize QRLs that capture lexical scope.');
    }
    function stuff() {
        return /*#__PURE__*/ qrl(()=>import("../../../node_modules/@builder.io/qwik-city/index.qwik.mjs_entry_serverQrl.mjs"), "s_wOIPfiQ04l4", [
            qrl1
        ]);
    }
    return stuff();
};
const server$ = /* @__PURE__ */ implicit$FirstArg(serverQrl);
const getValidators = (rest, qrl)=>{
    let id;
    const validators = [];
    if (rest.length === 1) {
        const options = rest[0];
        if (options && typeof options === 'object') {
            if ('validate' in options) validators.push(options);
            else {
                id = options.id;
                if (options.validation) validators.push(...options.validation);
            }
        }
    } else if (rest.length > 1) validators.push(...rest.filter((v)=>!!v));
    if (typeof id === 'string') {
        if (isDev) {
            if (!/^[\w/.-]+$/.test(id)) throw new Error(`Invalid id: ${id}, id can only contain [a-zA-Z0-9_.-]`);
        }
        id = `id_${id}`;
    } else id = qrl.getHash();
    return {
        validators: validators.reverse(),
        id
    };
};
const getSSETransformer = ()=>{
    let currentLine = '';
    const encoder = new TextDecoder();
    const transformer = new TransformStream({
        transform (chunk, controller) {
            const lines = encoder.decode(chunk).split('\n\n');
            for(let i = 0; i < lines.length - 1; i++){
                const line = currentLine + lines[i];
                if (line.length === 0) {
                    controller.terminate();
                    break;
                } else {
                    controller.enqueue(parseEvent(line));
                    currentLine = '';
                }
            }
            currentLine += lines[lines.length - 1];
        }
    });
    return transformer;
};
const parseEvent = (message)=>{
    const lines = message.split('\n');
    const event = {
        data: ''
    };
    let data = '';
    for (const line of lines)if (line.startsWith('data: ')) data += line.slice(6) + '\n';
    else {
        const [key, value] = line.split(':');
        if (typeof key === 'string' && typeof value === 'string') event[key] = value.trim();
    }
    event.data = data;
    return event;
};
async function* streamAsyncIterator(stream, ctxElm) {
    const reader = stream.getReader();
    try {
        while(true){
            const { done , value  } = await reader.read();
            if (done) return;
            const obj = await _deserializeData(value.data, ctxElm);
            yield obj;
        }
    } finally{
        reader.releaseLock();
    }
}
const Form = ({ action , spaReset , reloadDocument , onSubmit$ , ...rest }, key)=>{
    _jsxBranch();
    if (action) return _jsxS('form', {
        ...rest,
        action: _wrapSignal(action, 'actionPath'),
        'preventdefault:submit': !reloadDocument,
        ['data-spa-reset']: spaReset ? 'true' : void 0,
        onSubmit$: [
            !reloadDocument ? action.submit : void 0,
            onSubmit$
        ]
    }, {
        method: 'post'
    }, 0, key);
    else return /* @__PURE__ */ _jsxC(GetForm, {
        spaReset,
        reloadDocument,
        onSubmit$,
        ...rest
    }, 0, key);
};
const GetForm = /* @__PURE__ */ componentQrl(/*#__PURE__*/ qrl(()=>import("../../../node_modules/@builder.io/qwik-city/index.qwik.mjs_entry_GetForm.mjs"), "s_Nk9PlpjQm9Y"));
export { Form, Link, QwikCityMockProvider, QwikCityProvider, RouterOutlet, ServiceWorkerRegister, globalAction$, globalActionQrl, routeAction$, routeActionQrl, routeLoader$, routeLoaderQrl, server$, serverQrl, useContent, useDocumentHead, useLocation, useNavigate, validator$, validatorQrl, z2 as z, zod$, zodQrl };
export { CLIENT_DATA_CACHE as _auto_CLIENT_DATA_CACHE };
export { ContentContext as _auto_ContentContext };
export { ContentInternalContext as _auto_ContentInternalContext };
export { DocumentHeadContext as _auto_DocumentHeadContext };
export { RouteActionContext as _auto_RouteActionContext };
export { RouteLocationContext as _auto_RouteLocationContext };
export { RouteNavigateContext as _auto_RouteNavigateContext };
export { RouteStateContext as _auto_RouteStateContext };
export { clientNavigate as _auto_clientNavigate };
export { createDocumentHead as _auto_createDocumentHead };
export { getClientNavPath as _auto_getClientNavPath };
export { getPrefetchDataset as _auto_getPrefetchDataset };
export { getSSETransformer as _auto_getSSETransformer };
export { isSameOriginDifferentPathname as _auto_isSameOriginDifferentPathname };
export { loadClientData as _auto_loadClientData };
export { loadRoute as _auto_loadRoute };
export { prefetchLinkResources as _auto_prefetchLinkResources };
export { resolveHead as _auto_resolveHead };
export { streamAsyncIterator as _auto_streamAsyncIterator };
export { toPath as _auto_toPath };
export { useQwikCityEnv as _auto_useQwikCityEnv };


Some("{\"version\":3,\"sources\":[\"/user/qwik/node_modules/@builder.io/qwik-city/index.qwik.mjs\"],\"names\":[],\"mappings\":\"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\"}")
============================= ../node_modules/@builder.io/qwik-city/index.qwik.mjs_entry_GetForm.js (ENTRY POINT)==

export { s_p9MSze0ojs4 } from "./s_p9msze0ojs4.mjs";
export { s_Nk9PlpjQm9Y } from "./s_nk9plpjqm9y.mjs";


None
============================= ../node_modules/@builder.io/qwik-city/index.qwik.mjs_entry_Link.js (ENTRY POINT)==

export { s_kzjavhDI3L0 } from "./s_kzjavhdi3l0.mjs";
export { s_8gdLBszqbaM } from "./s_8gdlbszqbam.mjs";


None
============================= ../node_modules/@builder.io/qwik-city/index.qwik.mjs_entry_QwikCityMockProvider.js (ENTRY POINT)==

export { s_BUbtvTyvVRE } from "./s_bubtvtyvvre.mjs";
export { s_WmYC5H00wtI } from "./s_wmyc5h00wti.mjs";


None
============================= ../node_modules/@builder.io/qwik-city/index.qwik.mjs_entry_QwikCityProvider.js (ENTRY POINT)==

export { s_RPDJAz33WLA } from "./s_rpdjaz33wla.mjs";
export { s_cBcjROynRVg } from "./s_cbcjroynrvg.mjs";
export { s_02wMImzEAbk } from "./s_02wmimzeabk.mjs";
export { s_TxCFOy819ag } from "./s_txcfoy819ag.mjs";
export { _hW } from "@builder.io/qwik";


None
============================= ../node_modules/@builder.io/qwik-city/index.qwik.mjs_entry_RouterOutlet.js (ENTRY POINT)==

export { s_AKetNByE5TM } from "./s_aketnbye5tm.mjs";


None
============================= ../node_modules/@builder.io/qwik-city/index.qwik.mjs_entry_routeActionQrl.js (ENTRY POINT)==

export { s_A5bZC7WO00A } from "./s_a5bzc7wo00a.mjs";


None
============================= ../node_modules/@builder.io/qwik-city/index.qwik.mjs_entry_serverQrl.js (ENTRY POINT)==

export { s_wOIPfiQ04l4 } from "./s_woipfiq04l4.mjs";


None
== DIAGNOSTICS ==

[]
