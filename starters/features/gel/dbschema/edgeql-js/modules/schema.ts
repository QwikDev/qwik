// GENERATED by @gel/generate v0.6.4

import * as $ from "../reflection";
import * as _ from "../imports";
import type * as _std from "./std";
import type * as _sys from "./sys";
import type * as _cfg from "./cfg";
import type * as _stdnethttp from "./std/net/http";
export type $AccessKind = {
  Select: $.$expr_Literal<$AccessKind>;
  UpdateRead: $.$expr_Literal<$AccessKind>;
  UpdateWrite: $.$expr_Literal<$AccessKind>;
  Delete: $.$expr_Literal<$AccessKind>;
  Insert: $.$expr_Literal<$AccessKind>;
} & $.EnumType<
  "schema::AccessKind",
  ["Select", "UpdateRead", "UpdateWrite", "Delete", "Insert"]
>;
const AccessKind: $AccessKind = $.makeType<$AccessKind>(
  _.spec,
  "998b88fc-083a-584b-85bb-372ade248f66",
  _.syntax.literal,
);

export type $AccessPolicyAction = {
  Allow: $.$expr_Literal<$AccessPolicyAction>;
  Deny: $.$expr_Literal<$AccessPolicyAction>;
} & $.EnumType<"schema::AccessPolicyAction", ["Allow", "Deny"]>;
const AccessPolicyAction: $AccessPolicyAction = $.makeType<$AccessPolicyAction>(
  _.spec,
  "d8c466cc-109e-587c-aff8-42e50705b5b0",
  _.syntax.literal,
);

export type $Cardinality = {
  One: $.$expr_Literal<$Cardinality>;
  Many: $.$expr_Literal<$Cardinality>;
} & $.EnumType<"schema::Cardinality", ["One", "Many"]>;
const Cardinality: $Cardinality = $.makeType<$Cardinality>(
  _.spec,
  "94abc2f6-2e3e-55fc-8e97-b44ba70a3950",
  _.syntax.literal,
);

export type $IndexDeferrability = {
  Prohibited: $.$expr_Literal<$IndexDeferrability>;
  Permitted: $.$expr_Literal<$IndexDeferrability>;
  Required: $.$expr_Literal<$IndexDeferrability>;
} & $.EnumType<
  "schema::IndexDeferrability",
  ["Prohibited", "Permitted", "Required"]
>;
const IndexDeferrability: $IndexDeferrability = $.makeType<$IndexDeferrability>(
  _.spec,
  "b31b2d9a-681c-5709-bec5-321897ea5bd6",
  _.syntax.literal,
);

export type $MigrationGeneratedBy = {
  DevMode: $.$expr_Literal<$MigrationGeneratedBy>;
  DDLStatement: $.$expr_Literal<$MigrationGeneratedBy>;
} & $.EnumType<"schema::MigrationGeneratedBy", ["DevMode", "DDLStatement"]>;
const MigrationGeneratedBy: $MigrationGeneratedBy =
  $.makeType<$MigrationGeneratedBy>(
    _.spec,
    "8fcfde20-139b-5c17-93b9-9a49512b83dc",
    _.syntax.literal,
  );

export type $OperatorKind = {
  Infix: $.$expr_Literal<$OperatorKind>;
  Postfix: $.$expr_Literal<$OperatorKind>;
  Prefix: $.$expr_Literal<$OperatorKind>;
  Ternary: $.$expr_Literal<$OperatorKind>;
} & $.EnumType<
  "schema::OperatorKind",
  ["Infix", "Postfix", "Prefix", "Ternary"]
>;
const OperatorKind: $OperatorKind = $.makeType<$OperatorKind>(
  _.spec,
  "e48403f0-7017-5bf5-ab92-22825d9f1090",
  _.syntax.literal,
);

export type $ParameterKind = {
  VariadicParam: $.$expr_Literal<$ParameterKind>;
  NamedOnlyParam: $.$expr_Literal<$ParameterKind>;
  PositionalParam: $.$expr_Literal<$ParameterKind>;
} & $.EnumType<
  "schema::ParameterKind",
  ["VariadicParam", "NamedOnlyParam", "PositionalParam"]
>;
const ParameterKind: $ParameterKind = $.makeType<$ParameterKind>(
  _.spec,
  "8037d84a-de95-5e63-ab76-727112419261",
  _.syntax.literal,
);

export type $RewriteKind = {
  Update: $.$expr_Literal<$RewriteKind>;
  Insert: $.$expr_Literal<$RewriteKind>;
} & $.EnumType<"schema::RewriteKind", ["Update", "Insert"]>;
const RewriteKind: $RewriteKind = $.makeType<$RewriteKind>(
  _.spec,
  "a06f04aa-88b7-5d9a-b520-b8139fd64d0c",
  _.syntax.literal,
);

export type $SourceDeleteAction = {
  DeleteTarget: $.$expr_Literal<$SourceDeleteAction>;
  Allow: $.$expr_Literal<$SourceDeleteAction>;
  DeleteTargetIfOrphan: $.$expr_Literal<$SourceDeleteAction>;
} & $.EnumType<
  "schema::SourceDeleteAction",
  ["DeleteTarget", "Allow", "DeleteTargetIfOrphan"]
>;
const SourceDeleteAction: $SourceDeleteAction = $.makeType<$SourceDeleteAction>(
  _.spec,
  "1c938388-8739-57a7-8095-cc173226ad8e",
  _.syntax.literal,
);

export type $TargetDeleteAction = {
  Restrict: $.$expr_Literal<$TargetDeleteAction>;
  DeleteSource: $.$expr_Literal<$TargetDeleteAction>;
  Allow: $.$expr_Literal<$TargetDeleteAction>;
  DeferredRestrict: $.$expr_Literal<$TargetDeleteAction>;
} & $.EnumType<
  "schema::TargetDeleteAction",
  ["Restrict", "DeleteSource", "Allow", "DeferredRestrict"]
>;
const TargetDeleteAction: $TargetDeleteAction = $.makeType<$TargetDeleteAction>(
  _.spec,
  "6b925c92-5e48-5e6d-96f2-4125d9119b66",
  _.syntax.literal,
);

export type $TriggerKind = {
  Update: $.$expr_Literal<$TriggerKind>;
  Delete: $.$expr_Literal<$TriggerKind>;
  Insert: $.$expr_Literal<$TriggerKind>;
} & $.EnumType<"schema::TriggerKind", ["Update", "Delete", "Insert"]>;
const TriggerKind: $TriggerKind = $.makeType<$TriggerKind>(
  _.spec,
  "3c6fa29f-8481-59c9-a9bf-ac30ab50be32",
  _.syntax.literal,
);

export type $TriggerScope = {
  All: $.$expr_Literal<$TriggerScope>;
  Each: $.$expr_Literal<$TriggerScope>;
} & $.EnumType<"schema::TriggerScope", ["All", "Each"]>;
const TriggerScope: $TriggerScope = $.makeType<$TriggerScope>(
  _.spec,
  "20998fe7-4392-5673-96b5-5f1cd736b5df",
  _.syntax.literal,
);

export type $TriggerTiming = {
  After: $.$expr_Literal<$TriggerTiming>;
  AfterCommitOf: $.$expr_Literal<$TriggerTiming>;
} & $.EnumType<"schema::TriggerTiming", ["After", "AfterCommitOf"]>;
const TriggerTiming: $TriggerTiming = $.makeType<$TriggerTiming>(
  _.spec,
  "a2c7e6ae-370c-53a7-842c-21e238faf3ee",
  _.syntax.literal,
);

export type $TypeModifier = {
  SetOfType: $.$expr_Literal<$TypeModifier>;
  OptionalType: $.$expr_Literal<$TypeModifier>;
  SingletonType: $.$expr_Literal<$TypeModifier>;
} & $.EnumType<
  "schema::TypeModifier",
  ["SetOfType", "OptionalType", "SingletonType"]
>;
const TypeModifier: $TypeModifier = $.makeType<$TypeModifier>(
  _.spec,
  "67722d75-1145-54b6-af26-94602de09d51",
  _.syntax.literal,
);

export type $Volatility = {
  Immutable: $.$expr_Literal<$Volatility>;
  Stable: $.$expr_Literal<$Volatility>;
  Volatile: $.$expr_Literal<$Volatility>;
  Modifying: $.$expr_Literal<$Volatility>;
} & $.EnumType<
  "schema::Volatility",
  ["Immutable", "Stable", "Volatile", "Modifying"]
>;
const Volatility: $Volatility = $.makeType<$Volatility>(
  _.spec,
  "de5b90f2-6e49-5543-991b-28a156c7867f",
  _.syntax.literal,
);

export type $Object_32faaa35947553cf88fce68ecf1be4d9λShape = $.typeutil.flatten<
  _std.$BaseObjectλShape & {
    name: $.PropertyDesc<
      _std.$str,
      $.Cardinality.One,
      false,
      false,
      false,
      false
    >;
    internal: $.PropertyDesc<
      _std.$bool,
      $.Cardinality.One,
      false,
      false,
      false,
      true
    >;
    builtin: $.PropertyDesc<
      _std.$bool,
      $.Cardinality.One,
      false,
      false,
      false,
      true
    >;
    computed_fields: $.PropertyDesc<
      $.ArrayType<_std.$str>,
      $.Cardinality.AtMostOne,
      false,
      false,
      false,
      false
    >;
  }
>;
type $Object_32faaa35947553cf88fce68ecf1be4d9 = $.ObjectType<
  "schema::Object",
  $Object_32faaa35947553cf88fce68ecf1be4d9λShape,
  null,
  [..._std.$BaseObject["__exclusives__"]],
  | "schema::AccessPolicy"
  | "schema::Alias"
  | "schema::Annotation"
  | "schema::Array"
  | "schema::ArrayExprAlias"
  | "schema::Cast"
  | "schema::Constraint"
  | "schema::Delta"
  | "schema::Extension"
  | "schema::Function"
  | "schema::FutureBehavior"
  | "schema::Global"
  | "schema::Index"
  | "schema::Link"
  | "schema::Migration"
  | "schema::Module"
  | "schema::MultiRange"
  | "schema::MultiRangeExprAlias"
  | "schema::ObjectType"
  | "schema::Operator"
  | "schema::Parameter"
  | "schema::Property"
  | "schema::PseudoType"
  | "schema::Range"
  | "schema::RangeExprAlias"
  | "schema::Rewrite"
  | "schema::ScalarType"
  | "schema::Trigger"
  | "schema::Tuple"
  | "schema::TupleExprAlias"
  | "sys::Branch"
  | "sys::Database"
  | "sys::ExtensionPackage"
  | "sys::ExtensionPackageMigration"
  | "sys::QueryStats"
  | "sys::Role"
>;
const $Object_32faaa35947553cf88fce68ecf1be4d9 =
  $.makeType<$Object_32faaa35947553cf88fce68ecf1be4d9>(
    _.spec,
    "32faaa35-9475-53cf-88fc-e68ecf1be4d9",
    _.syntax.literal,
  );

const Object_32faaa35947553cf88fce68ecf1be4d9: $.$expr_PathNode<
  $.TypeSet<$Object_32faaa35947553cf88fce68ecf1be4d9, $.Cardinality.Many>,
  null
> = _.syntax.$PathNode(
  $.$toSet($Object_32faaa35947553cf88fce68ecf1be4d9, $.Cardinality.Many),
  null,
);

export type $SubclassableObjectλShape = $.typeutil.flatten<
  $Object_32faaa35947553cf88fce68ecf1be4d9λShape & {
    abstract: $.PropertyDesc<
      _std.$bool,
      $.Cardinality.AtMostOne,
      false,
      false,
      false,
      true
    >;
    is_abstract: $.PropertyDesc<
      _std.$bool,
      $.Cardinality.AtMostOne,
      false,
      true,
      false,
      false
    >;
    final: $.PropertyDesc<
      _std.$bool,
      $.Cardinality.One,
      false,
      true,
      false,
      false
    >;
    is_final: $.PropertyDesc<
      _std.$bool,
      $.Cardinality.One,
      false,
      true,
      false,
      false
    >;
  }
>;
type $SubclassableObject = $.ObjectType<
  "schema::SubclassableObject",
  $SubclassableObjectλShape,
  null,
  [...$Object_32faaa35947553cf88fce68ecf1be4d9["__exclusives__"]],
  | "schema::AccessPolicy"
  | "schema::Annotation"
  | "schema::Array"
  | "schema::ArrayExprAlias"
  | "schema::Constraint"
  | "schema::Index"
  | "schema::Link"
  | "schema::MultiRange"
  | "schema::MultiRangeExprAlias"
  | "schema::ObjectType"
  | "schema::Property"
  | "schema::PseudoType"
  | "schema::Range"
  | "schema::RangeExprAlias"
  | "schema::Rewrite"
  | "schema::ScalarType"
  | "schema::Trigger"
  | "schema::Tuple"
  | "schema::TupleExprAlias"
  | "sys::Role"
>;
const $SubclassableObject = $.makeType<$SubclassableObject>(
  _.spec,
  "145b7b6f-8fa4-5b14-bcd3-5d6d10dc25da",
  _.syntax.literal,
);

const SubclassableObject: $.$expr_PathNode<
  $.TypeSet<$SubclassableObject, $.Cardinality.Many>,
  null
> = _.syntax.$PathNode($.$toSet($SubclassableObject, $.Cardinality.Many), null);

export type $InheritingObjectλShape = $.typeutil.flatten<
  $SubclassableObjectλShape & {
    inherited_fields: $.PropertyDesc<
      $.ArrayType<_std.$str>,
      $.Cardinality.AtMostOne,
      false,
      false,
      false,
      false
    >;
    bases: $.LinkDesc<
      $InheritingObject,
      $.Cardinality.Many,
      {
        "@index": $.PropertyDesc<_std.$int64, $.Cardinality.AtMostOne>;
      },
      false,
      false,
      false,
      false
    >;
    ancestors: $.LinkDesc<
      $InheritingObject,
      $.Cardinality.Many,
      {
        "@index": $.PropertyDesc<_std.$int64, $.Cardinality.AtMostOne>;
      },
      false,
      false,
      false,
      false
    >;
    "<bases[is schema::InheritingObject]": $.LinkDesc<
      $InheritingObject,
      $.Cardinality.Many,
      {},
      false,
      false,
      false,
      false
    >;
    "<ancestors[is schema::InheritingObject]": $.LinkDesc<
      $InheritingObject,
      $.Cardinality.Many,
      {},
      false,
      false,
      false,
      false
    >;
    "<ancestors[is sys::Role]": $.LinkDesc<
      _sys.$Role,
      $.Cardinality.Many,
      {},
      false,
      false,
      false,
      false
    >;
    "<bases[is sys::Role]": $.LinkDesc<
      _sys.$Role,
      $.Cardinality.Many,
      {},
      false,
      false,
      false,
      false
    >;
    "<ancestors[is schema::Constraint]": $.LinkDesc<
      $Constraint,
      $.Cardinality.Many,
      {},
      false,
      false,
      false,
      false
    >;
    "<bases[is schema::Constraint]": $.LinkDesc<
      $Constraint,
      $.Cardinality.Many,
      {},
      false,
      false,
      false,
      false
    >;
    "<ancestors[is schema::ConsistencySubject]": $.LinkDesc<
      $ConsistencySubject,
      $.Cardinality.Many,
      {},
      false,
      false,
      false,
      false
    >;
    "<bases[is schema::ConsistencySubject]": $.LinkDesc<
      $ConsistencySubject,
      $.Cardinality.Many,
      {},
      false,
      false,
      false,
      false
    >;
    "<bases[is schema::Rewrite]": $.LinkDesc<
      $Rewrite,
      $.Cardinality.Many,
      {},
      false,
      false,
      false,
      false
    >;
    "<ancestors[is schema::Rewrite]": $.LinkDesc<
      $Rewrite,
      $.Cardinality.Many,
      {},
      false,
      false,
      false,
      false
    >;
    "<bases[is schema::Pointer]": $.LinkDesc<
      $Pointer,
      $.Cardinality.Many,
      {},
      false,
      false,
      false,
      false
    >;
    "<ancestors[is schema::Pointer]": $.LinkDesc<
      $Pointer,
      $.Cardinality.Many,
      {},
      false,
      false,
      false,
      false
    >;
    "<ancestors[is schema::Property]": $.LinkDesc<
      $Property,
      $.Cardinality.Many,
      {},
      false,
      false,
      false,
      false
    >;
    "<bases[is schema::Property]": $.LinkDesc<
      $Property,
      $.Cardinality.Many,
      {},
      false,
      false,
      false,
      false
    >;
    "<ancestors[is schema::ScalarType]": $.LinkDesc<
      $ScalarType,
      $.Cardinality.Many,
      {},
      false,
      false,
      false,
      false
    >;
    "<bases[is schema::ScalarType]": $.LinkDesc<
      $ScalarType,
      $.Cardinality.Many,
      {},
      false,
      false,
      false,
      false
    >;
    "<ancestors[is schema::Index]": $.LinkDesc<
      $Index,
      $.Cardinality.Many,
      {},
      false,
      false,
      false,
      false
    >;
    "<bases[is schema::Index]": $.LinkDesc<
      $Index,
      $.Cardinality.Many,
      {},
      false,
      false,
      false,
      false
    >;
    "<ancestors[is schema::Link]": $.LinkDesc<
      $Link,
      $.Cardinality.Many,
      {},
      false,
      false,
      false,
      false
    >;
    "<bases[is schema::Link]": $.LinkDesc<
      $Link,
      $.Cardinality.Many,
      {},
      false,
      false,
      false,
      false
    >;
    "<bases[is schema::AccessPolicy]": $.LinkDesc<
      $AccessPolicy,
      $.Cardinality.Many,
      {},
      false,
      false,
      false,
      false
    >;
    "<ancestors[is schema::AccessPolicy]": $.LinkDesc<
      $AccessPolicy,
      $.Cardinality.Many,
      {},
      false,
      false,
      false,
      false
    >;
    "<bases[is schema::Trigger]": $.LinkDesc<
      $Trigger,
      $.Cardinality.Many,
      {},
      false,
      false,
      false,
      false
    >;
    "<ancestors[is schema::Trigger]": $.LinkDesc<
      $Trigger,
      $.Cardinality.Many,
      {},
      false,
      false,
      false,
      false
    >;
    "<ancestors[is schema::ObjectType]": $.LinkDesc<
      $ObjectType,
      $.Cardinality.Many,
      {},
      false,
      false,
      false,
      false
    >;
    "<bases[is schema::ObjectType]": $.LinkDesc<
      $ObjectType,
      $.Cardinality.Many,
      {},
      false,
      false,
      false,
      false
    >;
    "<ancestors": $.LinkDesc<
      $.ObjectType,
      $.Cardinality.Many,
      {},
      false,
      false,
      false,
      false
    >;
    "<bases": $.LinkDesc<
      $.ObjectType,
      $.Cardinality.Many,
      {},
      false,
      false,
      false,
      false
    >;
  }
>;
type $InheritingObject = $.ObjectType<
  "schema::InheritingObject",
  $InheritingObjectλShape,
  null,
  [...$SubclassableObject["__exclusives__"]],
  | "schema::AccessPolicy"
  | "schema::Annotation"
  | "schema::Constraint"
  | "schema::Index"
  | "schema::Link"
  | "schema::ObjectType"
  | "schema::Property"
  | "schema::PseudoType"
  | "schema::Rewrite"
  | "schema::ScalarType"
  | "schema::Trigger"
  | "sys::Role"
>;
const $InheritingObject = $.makeType<$InheritingObject>(
  _.spec,
  "825a1378-6b30-5f15-82f1-1c92e57691f2",
  _.syntax.literal,
);

const InheritingObject: $.$expr_PathNode<
  $.TypeSet<$InheritingObject, $.Cardinality.Many>,
  null
> = _.syntax.$PathNode($.$toSet($InheritingObject, $.Cardinality.Many), null);

export type $AnnotationSubjectλShape = $.typeutil.flatten<
  $Object_32faaa35947553cf88fce68ecf1be4d9λShape & {
    annotations: $.LinkDesc<
      $Annotation,
      $.Cardinality.Many,
      {
        "@owned": $.PropertyDesc<_std.$bool, $.Cardinality.AtMostOne>;
        "@is_owned": $.PropertyDesc<_std.$bool, $.Cardinality.AtMostOne>;
        "@value": $.PropertyDesc<_std.$str, $.Cardinality.AtMostOne>;
      },
      false,
      false,
      false,
      false
    >;
  }
>;
type $AnnotationSubject = $.ObjectType<
  "schema::AnnotationSubject",
  $AnnotationSubjectλShape,
  null,
  [...$Object_32faaa35947553cf88fce68ecf1be4d9["__exclusives__"]],
  | "schema::AccessPolicy"
  | "schema::Alias"
  | "schema::Annotation"
  | "schema::Array"
  | "schema::ArrayExprAlias"
  | "schema::Cast"
  | "schema::Constraint"
  | "schema::Extension"
  | "schema::Function"
  | "schema::Global"
  | "schema::Index"
  | "schema::Link"
  | "schema::Migration"
  | "schema::Module"
  | "schema::MultiRange"
  | "schema::MultiRangeExprAlias"
  | "schema::ObjectType"
  | "schema::Operator"
  | "schema::Property"
  | "schema::PseudoType"
  | "schema::Range"
  | "schema::RangeExprAlias"
  | "schema::Rewrite"
  | "schema::ScalarType"
  | "schema::Trigger"
  | "schema::Tuple"
  | "schema::TupleExprAlias"
  | "sys::Branch"
  | "sys::Database"
  | "sys::ExtensionPackage"
  | "sys::ExtensionPackageMigration"
  | "sys::Role"
>;
const $AnnotationSubject = $.makeType<$AnnotationSubject>(
  _.spec,
  "970b2d83-85d8-5a46-a4e8-337d28abc12e",
  _.syntax.literal,
);

const AnnotationSubject: $.$expr_PathNode<
  $.TypeSet<$AnnotationSubject, $.Cardinality.Many>,
  null
> = _.syntax.$PathNode($.$toSet($AnnotationSubject, $.Cardinality.Many), null);

export type $AccessPolicyλShape = $.typeutil.flatten<
  $InheritingObjectλShape &
    $AnnotationSubjectλShape & {
      access_kinds: $.PropertyDesc<
        $AccessKind,
        $.Cardinality.Many,
        false,
        false,
        false,
        false
      >;
      condition: $.PropertyDesc<
        _std.$str,
        $.Cardinality.AtMostOne,
        false,
        false,
        false,
        false
      >;
      action: $.PropertyDesc<
        $AccessPolicyAction,
        $.Cardinality.One,
        false,
        false,
        false,
        false
      >;
      expr: $.PropertyDesc<
        _std.$str,
        $.Cardinality.AtMostOne,
        false,
        false,
        false,
        false
      >;
      errmessage: $.PropertyDesc<
        _std.$str,
        $.Cardinality.AtMostOne,
        false,
        false,
        false,
        false
      >;
      subject: $.LinkDesc<
        $ObjectType,
        $.Cardinality.One,
        {},
        false,
        false,
        false,
        false
      >;
      "<access_policies[is schema::ObjectType]": $.LinkDesc<
        $ObjectType,
        $.Cardinality.AtMostOne,
        {},
        false,
        false,
        false,
        false
      >;
      "<access_policies": $.LinkDesc<
        $.ObjectType,
        $.Cardinality.Many,
        {},
        false,
        false,
        false,
        false
      >;
    }
>;
type $AccessPolicy = $.ObjectType<
  "schema::AccessPolicy",
  $AccessPolicyλShape,
  null,
  [
    ...$InheritingObject["__exclusives__"],
    ...$AnnotationSubject["__exclusives__"],
  ],
  "schema::AccessPolicy"
>;
const $AccessPolicy = $.makeType<$AccessPolicy>(
  _.spec,
  "a8462073-0539-5640-9d9d-2db251c0b350",
  _.syntax.literal,
);

const AccessPolicy: $.$expr_PathNode<
  $.TypeSet<$AccessPolicy, $.Cardinality.Many>,
  null
> = _.syntax.$PathNode($.$toSet($AccessPolicy, $.Cardinality.Many), null);

export type $AliasλShape = $.typeutil.flatten<
  $AnnotationSubjectλShape & {
    expr: $.PropertyDesc<
      _std.$str,
      $.Cardinality.One,
      false,
      false,
      false,
      false
    >;
    type: $.LinkDesc<
      $Type,
      $.Cardinality.AtMostOne,
      {},
      false,
      false,
      false,
      false
    >;
  }
>;
type $Alias = $.ObjectType<
  "schema::Alias",
  $AliasλShape,
  null,
  [...$AnnotationSubject["__exclusives__"]],
  "schema::Alias"
>;
const $Alias = $.makeType<$Alias>(
  _.spec,
  "4388400b-e01d-582c-b1da-8161814835a6",
  _.syntax.literal,
);

const Alias: $.$expr_PathNode<
  $.TypeSet<$Alias, $.Cardinality.Many>,
  null
> = _.syntax.$PathNode($.$toSet($Alias, $.Cardinality.Many), null);

export type $AnnotationλShape = $.typeutil.flatten<
  $InheritingObjectλShape &
    $AnnotationSubjectλShape & {
      inheritable: $.PropertyDesc<
        _std.$bool,
        $.Cardinality.AtMostOne,
        false,
        false,
        false,
        false
      >;
      "<annotations[is schema::AnnotationSubject]": $.LinkDesc<
        $AnnotationSubject,
        $.Cardinality.Many,
        {},
        false,
        false,
        false,
        false
      >;
      "<annotations[is sys::Branch]": $.LinkDesc<
        _sys.$Branch,
        $.Cardinality.Many,
        {},
        false,
        false,
        false,
        false
      >;
      "<annotations[is sys::Database]": $.LinkDesc<
        _sys.$Database,
        $.Cardinality.Many,
        {},
        false,
        false,
        false,
        false
      >;
      "<annotations[is sys::ExtensionPackage]": $.LinkDesc<
        _sys.$ExtensionPackage,
        $.Cardinality.Many,
        {},
        false,
        false,
        false,
        false
      >;
      "<annotations[is sys::ExtensionPackageMigration]": $.LinkDesc<
        _sys.$ExtensionPackageMigration,
        $.Cardinality.Many,
        {},
        false,
        false,
        false,
        false
      >;
      "<annotations[is sys::Role]": $.LinkDesc<
        _sys.$Role,
        $.Cardinality.Many,
        {},
        false,
        false,
        false,
        false
      >;
      "<annotations[is schema::Annotation]": $.LinkDesc<
        $Annotation,
        $.Cardinality.Many,
        {},
        false,
        false,
        false,
        false
      >;
      "<annotations[is schema::Alias]": $.LinkDesc<
        $Alias,
        $.Cardinality.Many,
        {},
        false,
        false,
        false,
        false
      >;
      "<annotations[is schema::Global]": $.LinkDesc<
        $Global,
        $.Cardinality.Many,
        {},
        false,
        false,
        false,
        false
      >;
      "<annotations[is schema::CallableObject]": $.LinkDesc<
        $CallableObject,
        $.Cardinality.Many,
        {},
        false,
        false,
        false,
        false
      >;
      "<annotations[is schema::Function]": $.LinkDesc<
        $Function,
        $.Cardinality.Many,
        {},
        false,
        false,
        false,
        false
      >;
      "<annotations[is schema::Operator]": $.LinkDesc<
        $Operator,
        $.Cardinality.Many,
        {},
        false,
        false,
        false,
        false
      >;
      "<annotations[is schema::Cast]": $.LinkDesc<
        $Cast,
        $.Cardinality.Many,
        {},
        false,
        false,
        false,
        false
      >;
      "<annotations[is schema::Migration]": $.LinkDesc<
        $Migration,
        $.Cardinality.Many,
        {},
        false,
        false,
        false,
        false
      >;
      "<annotations[is schema::Constraint]": $.LinkDesc<
        $Constraint,
        $.Cardinality.Many,
        {},
        false,
        false,
        false,
        false
      >;
      "<annotations[is schema::Rewrite]": $.LinkDesc<
        $Rewrite,
        $.Cardinality.Many,
        {},
        false,
        false,
        false,
        false
      >;
      "<annotations[is schema::Pointer]": $.LinkDesc<
        $Pointer,
        $.Cardinality.Many,
        {},
        false,
        false,
        false,
        false
      >;
      "<annotations[is schema::Property]": $.LinkDesc<
        $Property,
        $.Cardinality.Many,
        {},
        false,
        false,
        false,
        false
      >;
      "<annotations[is schema::ScalarType]": $.LinkDesc<
        $ScalarType,
        $.Cardinality.Many,
        {},
        false,
        false,
        false,
        false
      >;
      "<annotations[is schema::Index]": $.LinkDesc<
        $Index,
        $.Cardinality.Many,
        {},
        false,
        false,
        false,
        false
      >;
      "<annotations[is schema::Link]": $.LinkDesc<
        $Link,
        $.Cardinality.Many,
        {},
        false,
        false,
        false,
        false
      >;
      "<annotations[is schema::AccessPolicy]": $.LinkDesc<
        $AccessPolicy,
        $.Cardinality.Many,
        {},
        false,
        false,
        false,
        false
      >;
      "<annotations[is schema::Trigger]": $.LinkDesc<
        $Trigger,
        $.Cardinality.Many,
        {},
        false,
        false,
        false,
        false
      >;
      "<annotations[is schema::ObjectType]": $.LinkDesc<
        $ObjectType,
        $.Cardinality.Many,
        {},
        false,
        false,
        false,
        false
      >;
      "<annotations[is schema::Extension]": $.LinkDesc<
        $Extension,
        $.Cardinality.Many,
        {},
        false,
        false,
        false,
        false
      >;
      "<annotations": $.LinkDesc<
        $.ObjectType,
        $.Cardinality.Many,
        {},
        false,
        false,
        false,
        false
      >;
    }
>;
type $Annotation = $.ObjectType<
  "schema::Annotation",
  $AnnotationλShape,
  null,
  [
    ...$InheritingObject["__exclusives__"],
    ...$AnnotationSubject["__exclusives__"],
  ],
  "schema::Annotation"
>;
const $Annotation = $.makeType<$Annotation>(
  _.spec,
  "273b8735-318f-53f6-9297-6f20162c9105",
  _.syntax.literal,
);

const Annotation: $.$expr_PathNode<
  $.TypeSet<$Annotation, $.Cardinality.Many>,
  null
> = _.syntax.$PathNode($.$toSet($Annotation, $.Cardinality.Many), null);

export type $TypeλShape = $.typeutil.flatten<
  $SubclassableObjectλShape &
    $AnnotationSubjectλShape & {
      expr: $.PropertyDesc<
        _std.$str,
        $.Cardinality.AtMostOne,
        false,
        false,
        false,
        false
      >;
      from_alias: $.PropertyDesc<
        _std.$bool,
        $.Cardinality.AtMostOne,
        false,
        false,
        false,
        false
      >;
      is_from_alias: $.PropertyDesc<
        _std.$bool,
        $.Cardinality.AtMostOne,
        false,
        true,
        false,
        false
      >;
      "<element_type[is schema::Array]": $.LinkDesc<
        $Array,
        $.Cardinality.Many,
        {},
        false,
        false,
        false,
        false
      >;
      "<type[is schema::TupleElement]": $.LinkDesc<
        $TupleElement,
        $.Cardinality.Many,
        {},
        false,
        false,
        false,
        false
      >;
      "<element_type[is schema::Range]": $.LinkDesc<
        $Range,
        $.Cardinality.Many,
        {},
        false,
        false,
        false,
        false
      >;
      "<element_type[is schema::MultiRange]": $.LinkDesc<
        $MultiRange,
        $.Cardinality.Many,
        {},
        false,
        false,
        false,
        false
      >;
      "<type[is schema::Parameter]": $.LinkDesc<
        $Parameter,
        $.Cardinality.Many,
        {},
        false,
        false,
        false,
        false
      >;
      "<return_type[is schema::CallableObject]": $.LinkDesc<
        $CallableObject,
        $.Cardinality.Many,
        {},
        false,
        false,
        false,
        false
      >;
      "<type[is schema::Alias]": $.LinkDesc<
        $Alias,
        $.Cardinality.Many,
        {},
        false,
        false,
        false,
        false
      >;
      "<target[is schema::Pointer]": $.LinkDesc<
        $Pointer,
        $.Cardinality.Many,
        {},
        false,
        false,
        false,
        false
      >;
      "<target[is schema::Global]": $.LinkDesc<
        $Global,
        $.Cardinality.Many,
        {},
        false,
        false,
        false,
        false
      >;
      "<from_type[is schema::Cast]": $.LinkDesc<
        $Cast,
        $.Cardinality.Many,
        {},
        false,
        false,
        false,
        false
      >;
      "<to_type[is schema::Cast]": $.LinkDesc<
        $Cast,
        $.Cardinality.Many,
        {},
        false,
        false,
        false,
        false
      >;
      "<element_type[is schema::ArrayExprAlias]": $.LinkDesc<
        $ArrayExprAlias,
        $.Cardinality.Many,
        {},
        false,
        false,
        false,
        false
      >;
      "<element_type[is schema::RangeExprAlias]": $.LinkDesc<
        $RangeExprAlias,
        $.Cardinality.Many,
        {},
        false,
        false,
        false,
        false
      >;
      "<element_type[is schema::MultiRangeExprAlias]": $.LinkDesc<
        $MultiRangeExprAlias,
        $.Cardinality.Many,
        {},
        false,
        false,
        false,
        false
      >;
      "<return_type[is schema::Function]": $.LinkDesc<
        $Function,
        $.Cardinality.Many,
        {},
        false,
        false,
        false,
        false
      >;
      "<return_type[is schema::Operator]": $.LinkDesc<
        $Operator,
        $.Cardinality.Many,
        {},
        false,
        false,
        false,
        false
      >;
      "<return_type[is schema::Constraint]": $.LinkDesc<
        $Constraint,
        $.Cardinality.Many,
        {},
        false,
        false,
        false,
        false
      >;
      "<target[is schema::Property]": $.LinkDesc<
        $Property,
        $.Cardinality.Many,
        {},
        false,
        false,
        false,
        false
      >;
      "<element_type": $.LinkDesc<
        $.ObjectType,
        $.Cardinality.Many,
        {},
        false,
        false,
        false,
        false
      >;
      "<from_type": $.LinkDesc<
        $.ObjectType,
        $.Cardinality.Many,
        {},
        false,
        false,
        false,
        false
      >;
      "<return_type": $.LinkDesc<
        $.ObjectType,
        $.Cardinality.Many,
        {},
        false,
        false,
        false,
        false
      >;
      "<target": $.LinkDesc<
        $.ObjectType,
        $.Cardinality.Many,
        {},
        false,
        false,
        false,
        false
      >;
      "<to_type": $.LinkDesc<
        $.ObjectType,
        $.Cardinality.Many,
        {},
        false,
        false,
        false,
        false
      >;
      "<type": $.LinkDesc<
        $.ObjectType,
        $.Cardinality.Many,
        {},
        false,
        false,
        false,
        false
      >;
    }
>;
type $Type = $.ObjectType<
  "schema::Type",
  $TypeλShape,
  null,
  [
    ...$SubclassableObject["__exclusives__"],
    ...$AnnotationSubject["__exclusives__"],
  ],
  | "schema::Array"
  | "schema::ArrayExprAlias"
  | "schema::MultiRange"
  | "schema::MultiRangeExprAlias"
  | "schema::ObjectType"
  | "schema::PseudoType"
  | "schema::Range"
  | "schema::RangeExprAlias"
  | "schema::ScalarType"
  | "schema::Tuple"
  | "schema::TupleExprAlias"
>;
const $Type = $.makeType<$Type>(
  _.spec,
  "8e652319-e551-5b5c-a7bd-9591f0ef5303",
  _.syntax.literal,
);

const Type: $.$expr_PathNode<
  $.TypeSet<$Type, $.Cardinality.Many>,
  null
> = _.syntax.$PathNode($.$toSet($Type, $.Cardinality.Many), null);

export type $PrimitiveTypeλShape = $.typeutil.flatten<$TypeλShape & {}>;
type $PrimitiveType = $.ObjectType<
  "schema::PrimitiveType",
  $PrimitiveTypeλShape,
  null,
  [...$Type["__exclusives__"]],
  | "schema::Array"
  | "schema::ArrayExprAlias"
  | "schema::MultiRange"
  | "schema::MultiRangeExprAlias"
  | "schema::Range"
  | "schema::RangeExprAlias"
  | "schema::ScalarType"
  | "schema::Tuple"
  | "schema::TupleExprAlias"
>;
const $PrimitiveType = $.makeType<$PrimitiveType>(
  _.spec,
  "da26fa09-3541-5cba-b93f-d5ba58d25589",
  _.syntax.literal,
);

const PrimitiveType: $.$expr_PathNode<
  $.TypeSet<$PrimitiveType, $.Cardinality.Many>,
  null
> = _.syntax.$PathNode($.$toSet($PrimitiveType, $.Cardinality.Many), null);

export type $CollectionTypeλShape = $.typeutil.flatten<
  $PrimitiveTypeλShape & {}
>;
type $CollectionType = $.ObjectType<
  "schema::CollectionType",
  $CollectionTypeλShape,
  null,
  [...$PrimitiveType["__exclusives__"]],
  | "schema::Array"
  | "schema::ArrayExprAlias"
  | "schema::MultiRange"
  | "schema::MultiRangeExprAlias"
  | "schema::Range"
  | "schema::RangeExprAlias"
  | "schema::Tuple"
  | "schema::TupleExprAlias"
>;
const $CollectionType = $.makeType<$CollectionType>(
  _.spec,
  "e3a7ccf7-4a20-5151-80b3-5156c9373889",
  _.syntax.literal,
);

const CollectionType: $.$expr_PathNode<
  $.TypeSet<$CollectionType, $.Cardinality.Many>,
  null
> = _.syntax.$PathNode($.$toSet($CollectionType, $.Cardinality.Many), null);

export type $ArrayλShape = $.typeutil.flatten<
  $CollectionTypeλShape & {
    dimensions: $.PropertyDesc<
      $.ArrayType<_std.$int16>,
      $.Cardinality.AtMostOne,
      false,
      false,
      false,
      false
    >;
    element_type: $.LinkDesc<
      $Type,
      $.Cardinality.One,
      {},
      false,
      false,
      false,
      false
    >;
  }
>;
type $Array = $.ObjectType<
  "schema::Array",
  $ArrayλShape,
  null,
  [...$CollectionType["__exclusives__"]],
  "schema::Array" | "schema::ArrayExprAlias"
>;
const $Array = $.makeType<$Array>(
  _.spec,
  "283cc7a9-7bf6-5eda-a323-b4e5173f2927",
  _.syntax.literal,
);

const Array: $.$expr_PathNode<
  $.TypeSet<$Array, $.Cardinality.Many>,
  null
> = _.syntax.$PathNode($.$toSet($Array, $.Cardinality.Many), null);

export type $ArrayExprAliasλShape = $.typeutil.flatten<$ArrayλShape & {}>;
type $ArrayExprAlias = $.ObjectType<
  "schema::ArrayExprAlias",
  $ArrayExprAliasλShape,
  null,
  [...$Array["__exclusives__"]],
  "schema::ArrayExprAlias"
>;
const $ArrayExprAlias = $.makeType<$ArrayExprAlias>(
  _.spec,
  "2e55d7f5-18ed-54b4-ade0-ba404dd482d3",
  _.syntax.literal,
);

const ArrayExprAlias: $.$expr_PathNode<
  $.TypeSet<$ArrayExprAlias, $.Cardinality.Many>,
  null
> = _.syntax.$PathNode($.$toSet($ArrayExprAlias, $.Cardinality.Many), null);

export type $CallableObjectλShape = $.typeutil.flatten<
  $AnnotationSubjectλShape & {
    return_typemod: $.PropertyDesc<
      $TypeModifier,
      $.Cardinality.AtMostOne,
      false,
      false,
      false,
      false
    >;
    params: $.LinkDesc<
      $Parameter,
      $.Cardinality.Many,
      {
        "@index": $.PropertyDesc<_std.$int64, $.Cardinality.AtMostOne>;
      },
      false,
      false,
      false,
      false
    >;
    return_type: $.LinkDesc<
      $Type,
      $.Cardinality.AtMostOne,
      {},
      false,
      false,
      false,
      false
    >;
  }
>;
type $CallableObject = $.ObjectType<
  "schema::CallableObject",
  $CallableObjectλShape,
  null,
  [...$AnnotationSubject["__exclusives__"]],
  "schema::Constraint" | "schema::Function" | "schema::Operator"
>;
const $CallableObject = $.makeType<$CallableObject>(
  _.spec,
  "800f2df9-dd86-5681-9e3c-b529af481a9d",
  _.syntax.literal,
);

const CallableObject: $.$expr_PathNode<
  $.TypeSet<$CallableObject, $.Cardinality.Many>,
  null
> = _.syntax.$PathNode($.$toSet($CallableObject, $.Cardinality.Many), null);

export type $VolatilitySubjectλShape = $.typeutil.flatten<
  $Object_32faaa35947553cf88fce68ecf1be4d9λShape & {
    volatility: $.PropertyDesc<
      $Volatility,
      $.Cardinality.AtMostOne,
      false,
      false,
      false,
      true
    >;
  }
>;
type $VolatilitySubject = $.ObjectType<
  "schema::VolatilitySubject",
  $VolatilitySubjectλShape,
  null,
  [...$Object_32faaa35947553cf88fce68ecf1be4d9["__exclusives__"]],
  "schema::Cast" | "schema::Function" | "schema::Operator"
>;
const $VolatilitySubject = $.makeType<$VolatilitySubject>(
  _.spec,
  "ed8e20ca-f2dc-5626-bccb-05ef9ed65791",
  _.syntax.literal,
);

const VolatilitySubject: $.$expr_PathNode<
  $.TypeSet<$VolatilitySubject, $.Cardinality.Many>,
  null
> = _.syntax.$PathNode($.$toSet($VolatilitySubject, $.Cardinality.Many), null);

export type $CastλShape = $.typeutil.flatten<
  $AnnotationSubjectλShape &
    $VolatilitySubjectλShape & {
      allow_implicit: $.PropertyDesc<
        _std.$bool,
        $.Cardinality.AtMostOne,
        false,
        false,
        false,
        false
      >;
      allow_assignment: $.PropertyDesc<
        _std.$bool,
        $.Cardinality.AtMostOne,
        false,
        false,
        false,
        false
      >;
      from_type: $.LinkDesc<
        $Type,
        $.Cardinality.AtMostOne,
        {},
        false,
        false,
        false,
        false
      >;
      to_type: $.LinkDesc<
        $Type,
        $.Cardinality.AtMostOne,
        {},
        false,
        false,
        false,
        false
      >;
    }
>;
type $Cast = $.ObjectType<
  "schema::Cast",
  $CastλShape,
  null,
  [
    ...$AnnotationSubject["__exclusives__"],
    ...$VolatilitySubject["__exclusives__"],
  ],
  "schema::Cast"
>;
const $Cast = $.makeType<$Cast>(
  _.spec,
  "2b25c5a4-5ad4-5c4b-b545-574ccac3fd7f",
  _.syntax.literal,
);

const Cast: $.$expr_PathNode<
  $.TypeSet<$Cast, $.Cardinality.Many>,
  null
> = _.syntax.$PathNode($.$toSet($Cast, $.Cardinality.Many), null);

export type $ConsistencySubjectλShape = $.typeutil.flatten<
  $InheritingObjectλShape &
    $AnnotationSubjectλShape & {
      constraints: $.LinkDesc<
        $Constraint,
        $.Cardinality.Many,
        {
          "@owned": $.PropertyDesc<_std.$bool, $.Cardinality.AtMostOne>;
          "@is_owned": $.PropertyDesc<_std.$bool, $.Cardinality.AtMostOne>;
        },
        true,
        false,
        false,
        false
      >;
      "<subject[is schema::Constraint]": $.LinkDesc<
        $Constraint,
        $.Cardinality.Many,
        {},
        false,
        false,
        false,
        false
      >;
      "<subject": $.LinkDesc<
        $.ObjectType,
        $.Cardinality.Many,
        {},
        false,
        false,
        false,
        false
      >;
    }
>;
type $ConsistencySubject = $.ObjectType<
  "schema::ConsistencySubject",
  $ConsistencySubjectλShape,
  null,
  [
    ...$InheritingObject["__exclusives__"],
    ...$AnnotationSubject["__exclusives__"],
    {
      constraints: {
        __element__: $Constraint;
        __cardinality__: $.Cardinality.One | $.Cardinality.AtMostOne;
      };
    },
  ],
  | "schema::Link"
  | "schema::ObjectType"
  | "schema::Property"
  | "schema::ScalarType"
>;
const $ConsistencySubject = $.makeType<$ConsistencySubject>(
  _.spec,
  "883ec593-7428-5707-af16-d446e5d8ed28",
  _.syntax.literal,
);

const ConsistencySubject: $.$expr_PathNode<
  $.TypeSet<$ConsistencySubject, $.Cardinality.Many>,
  null
> = _.syntax.$PathNode($.$toSet($ConsistencySubject, $.Cardinality.Many), null);

export type $ConstraintλShape = $.typeutil.flatten<
  Omit<$CallableObjectλShape, "params"> &
    $InheritingObjectλShape & {
      expr: $.PropertyDesc<
        _std.$str,
        $.Cardinality.AtMostOne,
        false,
        false,
        false,
        false
      >;
      subjectexpr: $.PropertyDesc<
        _std.$str,
        $.Cardinality.AtMostOne,
        false,
        false,
        false,
        false
      >;
      finalexpr: $.PropertyDesc<
        _std.$str,
        $.Cardinality.AtMostOne,
        false,
        false,
        false,
        false
      >;
      errmessage: $.PropertyDesc<
        _std.$str,
        $.Cardinality.AtMostOne,
        false,
        false,
        false,
        false
      >;
      delegated: $.PropertyDesc<
        _std.$bool,
        $.Cardinality.AtMostOne,
        false,
        false,
        false,
        false
      >;
      except_expr: $.PropertyDesc<
        _std.$str,
        $.Cardinality.AtMostOne,
        false,
        false,
        false,
        false
      >;
      subject: $.LinkDesc<
        $ConsistencySubject,
        $.Cardinality.AtMostOne,
        {},
        false,
        false,
        false,
        false
      >;
      params: $.LinkDesc<
        $Parameter,
        $.Cardinality.Many,
        {
          "@index": $.PropertyDesc<_std.$int64, $.Cardinality.AtMostOne>;
          "@value": $.PropertyDesc<_std.$str, $.Cardinality.AtMostOne>;
        },
        false,
        false,
        false,
        false
      >;
      "<constraints[is schema::ConsistencySubject]": $.LinkDesc<
        $ConsistencySubject,
        $.Cardinality.AtMostOne,
        {},
        false,
        false,
        false,
        false
      >;
      "<constraints[is schema::Pointer]": $.LinkDesc<
        $Pointer,
        $.Cardinality.AtMostOne,
        {},
        false,
        false,
        false,
        false
      >;
      "<constraints[is schema::Property]": $.LinkDesc<
        $Property,
        $.Cardinality.AtMostOne,
        {},
        false,
        false,
        false,
        false
      >;
      "<constraints[is schema::ScalarType]": $.LinkDesc<
        $ScalarType,
        $.Cardinality.AtMostOne,
        {},
        false,
        false,
        false,
        false
      >;
      "<constraints[is schema::Link]": $.LinkDesc<
        $Link,
        $.Cardinality.AtMostOne,
        {},
        false,
        false,
        false,
        false
      >;
      "<constraints[is schema::ObjectType]": $.LinkDesc<
        $ObjectType,
        $.Cardinality.AtMostOne,
        {},
        false,
        false,
        false,
        false
      >;
      "<constraints": $.LinkDesc<
        $.ObjectType,
        $.Cardinality.Many,
        {},
        false,
        false,
        false,
        false
      >;
    }
>;
type $Constraint = $.ObjectType<
  "schema::Constraint",
  $ConstraintλShape,
  null,
  [
    ...$CallableObject["__exclusives__"],
    ...$InheritingObject["__exclusives__"],
  ],
  "schema::Constraint"
>;
const $Constraint = $.makeType<$Constraint>(
  _.spec,
  "9346c403-6ee6-50b6-81b2-a35551cfab2f",
  _.syntax.literal,
);

const Constraint: $.$expr_PathNode<
  $.TypeSet<$Constraint, $.Cardinality.Many>,
  null
> = _.syntax.$PathNode($.$toSet($Constraint, $.Cardinality.Many), null);

export type $DeltaλShape = $.typeutil.flatten<
  $Object_32faaa35947553cf88fce68ecf1be4d9λShape & {
    parents: $.LinkDesc<
      $Delta,
      $.Cardinality.Many,
      {},
      false,
      false,
      false,
      false
    >;
    "<parents[is schema::Delta]": $.LinkDesc<
      $Delta,
      $.Cardinality.Many,
      {},
      false,
      false,
      false,
      false
    >;
    "<parents": $.LinkDesc<
      $.ObjectType,
      $.Cardinality.Many,
      {},
      false,
      false,
      false,
      false
    >;
  }
>;
type $Delta = $.ObjectType<
  "schema::Delta",
  $DeltaλShape,
  null,
  [...$Object_32faaa35947553cf88fce68ecf1be4d9["__exclusives__"]],
  "schema::Delta"
>;
const $Delta = $.makeType<$Delta>(
  _.spec,
  "c974be74-46d8-5848-b2a9-be5eda14f73e",
  _.syntax.literal,
);

const Delta: $.$expr_PathNode<
  $.TypeSet<$Delta, $.Cardinality.Many>,
  null
> = _.syntax.$PathNode($.$toSet($Delta, $.Cardinality.Many), null);

export type $ExtensionλShape = $.typeutil.flatten<
  $AnnotationSubjectλShape &
    $Object_32faaa35947553cf88fce68ecf1be4d9λShape & {
      package: $.LinkDesc<
        _sys.$ExtensionPackage,
        $.Cardinality.One,
        {},
        true,
        false,
        false,
        false
      >;
    }
>;
type $Extension = $.ObjectType<
  "schema::Extension",
  $ExtensionλShape,
  null,
  [
    ...$AnnotationSubject["__exclusives__"],
    ...$Object_32faaa35947553cf88fce68ecf1be4d9["__exclusives__"],
    {
      package: {
        __element__: _sys.$ExtensionPackage;
        __cardinality__: $.Cardinality.One | $.Cardinality.AtMostOne;
      };
    },
  ],
  "schema::Extension"
>;
const $Extension = $.makeType<$Extension>(
  _.spec,
  "b9c53751-8d28-5077-b1db-a03ea59557ed",
  _.syntax.literal,
);

const Extension: $.$expr_PathNode<
  $.TypeSet<$Extension, $.Cardinality.Many>,
  null
> = _.syntax.$PathNode($.$toSet($Extension, $.Cardinality.Many), null);

export type $FunctionλShape = $.typeutil.flatten<
  $CallableObjectλShape &
    $VolatilitySubjectλShape & {
      preserves_optionality: $.PropertyDesc<
        _std.$bool,
        $.Cardinality.AtMostOne,
        false,
        false,
        false,
        true
      >;
      body: $.PropertyDesc<
        _std.$str,
        $.Cardinality.AtMostOne,
        false,
        false,
        false,
        false
      >;
      language: $.PropertyDesc<
        _std.$str,
        $.Cardinality.One,
        false,
        false,
        false,
        false
      >;
      used_globals: $.LinkDesc<
        $Global,
        $.Cardinality.Many,
        {
          "@index": $.PropertyDesc<_std.$int64, $.Cardinality.AtMostOne>;
        },
        false,
        false,
        false,
        false
      >;
    }
>;
type $Function = $.ObjectType<
  "schema::Function",
  $FunctionλShape,
  null,
  [
    ...$CallableObject["__exclusives__"],
    ...$VolatilitySubject["__exclusives__"],
  ],
  "schema::Function"
>;
const $Function = $.makeType<$Function>(
  _.spec,
  "3a60f555-7c03-5287-b4c9-f078692a89ef",
  _.syntax.literal,
);

const Function: $.$expr_PathNode<
  $.TypeSet<$Function, $.Cardinality.Many>,
  null
> = _.syntax.$PathNode($.$toSet($Function, $.Cardinality.Many), null);

export type $FutureBehaviorλShape = $.typeutil.flatten<
  $Object_32faaa35947553cf88fce68ecf1be4d9λShape & {}
>;
type $FutureBehavior = $.ObjectType<
  "schema::FutureBehavior",
  $FutureBehaviorλShape,
  null,
  [...$Object_32faaa35947553cf88fce68ecf1be4d9["__exclusives__"]],
  "schema::FutureBehavior"
>;
const $FutureBehavior = $.makeType<$FutureBehavior>(
  _.spec,
  "003feed0-dc7d-564e-abb5-93a42ba99d64",
  _.syntax.literal,
);

const FutureBehavior: $.$expr_PathNode<
  $.TypeSet<$FutureBehavior, $.Cardinality.Many>,
  null
> = _.syntax.$PathNode($.$toSet($FutureBehavior, $.Cardinality.Many), null);

export type $GlobalλShape = $.typeutil.flatten<
  $AnnotationSubjectλShape & {
    default: $.PropertyDesc<
      _std.$str,
      $.Cardinality.AtMostOne,
      false,
      false,
      false,
      false
    >;
    required: $.PropertyDesc<
      _std.$bool,
      $.Cardinality.AtMostOne,
      false,
      false,
      false,
      false
    >;
    cardinality: $.PropertyDesc<
      $Cardinality,
      $.Cardinality.AtMostOne,
      false,
      false,
      false,
      false
    >;
    expr: $.PropertyDesc<
      _std.$str,
      $.Cardinality.AtMostOne,
      false,
      false,
      false,
      false
    >;
    target: $.LinkDesc<
      $Type,
      $.Cardinality.AtMostOne,
      {},
      false,
      false,
      false,
      false
    >;
    "<used_globals[is schema::Function]": $.LinkDesc<
      $Function,
      $.Cardinality.Many,
      {},
      false,
      false,
      false,
      false
    >;
    "<used_globals": $.LinkDesc<
      $.ObjectType,
      $.Cardinality.Many,
      {},
      false,
      false,
      false,
      false
    >;
  }
>;
type $Global = $.ObjectType<
  "schema::Global",
  $GlobalλShape,
  null,
  [...$AnnotationSubject["__exclusives__"]],
  "schema::Global"
>;
const $Global = $.makeType<$Global>(
  _.spec,
  "e1294378-bb3d-57e0-81d2-6a19ea088231",
  _.syntax.literal,
);

const Global: $.$expr_PathNode<
  $.TypeSet<$Global, $.Cardinality.Many>,
  null
> = _.syntax.$PathNode($.$toSet($Global, $.Cardinality.Many), null);

export type $IndexλShape = $.typeutil.flatten<
  $InheritingObjectλShape &
    $AnnotationSubjectλShape & {
      expr: $.PropertyDesc<
        _std.$str,
        $.Cardinality.AtMostOne,
        false,
        false,
        false,
        false
      >;
      except_expr: $.PropertyDesc<
        _std.$str,
        $.Cardinality.AtMostOne,
        false,
        false,
        false,
        false
      >;
      deferrability: $.PropertyDesc<
        $IndexDeferrability,
        $.Cardinality.AtMostOne,
        false,
        false,
        false,
        false
      >;
      deferred: $.PropertyDesc<
        _std.$bool,
        $.Cardinality.AtMostOne,
        false,
        false,
        false,
        false
      >;
      kwargs: $.PropertyDesc<
        $.ArrayType<$.NamedTupleType<{ name: _std.$str; expr: _std.$str }>>,
        $.Cardinality.AtMostOne,
        false,
        false,
        false,
        false
      >;
      params: $.LinkDesc<
        $Parameter,
        $.Cardinality.Many,
        {
          "@index": $.PropertyDesc<_std.$int64, $.Cardinality.AtMostOne>;
        },
        false,
        false,
        false,
        false
      >;
      "<indexes[is schema::Source]": $.LinkDesc<
        $Source,
        $.Cardinality.AtMostOne,
        {},
        false,
        false,
        false,
        false
      >;
      "<indexes[is schema::ObjectType]": $.LinkDesc<
        $ObjectType,
        $.Cardinality.AtMostOne,
        {},
        false,
        false,
        false,
        false
      >;
      "<indexes[is schema::Link]": $.LinkDesc<
        $Link,
        $.Cardinality.AtMostOne,
        {},
        false,
        false,
        false,
        false
      >;
      "<indexes": $.LinkDesc<
        $.ObjectType,
        $.Cardinality.Many,
        {},
        false,
        false,
        false,
        false
      >;
    }
>;
type $Index = $.ObjectType<
  "schema::Index",
  $IndexλShape,
  null,
  [
    ...$InheritingObject["__exclusives__"],
    ...$AnnotationSubject["__exclusives__"],
  ],
  "schema::Index"
>;
const $Index = $.makeType<$Index>(
  _.spec,
  "decfa7fb-1f66-5986-be86-fc9b6c268a97",
  _.syntax.literal,
);

const Index: $.$expr_PathNode<
  $.TypeSet<$Index, $.Cardinality.Many>,
  null
> = _.syntax.$PathNode($.$toSet($Index, $.Cardinality.Many), null);

export type $PointerλShape = $.typeutil.flatten<
  Omit<$ConsistencySubjectλShape, "<subject"> &
    $AnnotationSubjectλShape & {
      cardinality: $.PropertyDesc<
        $Cardinality,
        $.Cardinality.AtMostOne,
        false,
        false,
        false,
        false
      >;
      required: $.PropertyDesc<
        _std.$bool,
        $.Cardinality.AtMostOne,
        false,
        false,
        false,
        false
      >;
      readonly: $.PropertyDesc<
        _std.$bool,
        $.Cardinality.AtMostOne,
        false,
        false,
        false,
        false
      >;
      default: $.PropertyDesc<
        _std.$str,
        $.Cardinality.AtMostOne,
        false,
        false,
        false,
        false
      >;
      expr: $.PropertyDesc<
        _std.$str,
        $.Cardinality.AtMostOne,
        false,
        false,
        false,
        false
      >;
      secret: $.PropertyDesc<
        _std.$bool,
        $.Cardinality.AtMostOne,
        false,
        false,
        false,
        false
      >;
      source: $.LinkDesc<
        $Source,
        $.Cardinality.AtMostOne,
        {},
        false,
        false,
        false,
        false
      >;
      target: $.LinkDesc<
        $Type,
        $.Cardinality.AtMostOne,
        {},
        false,
        false,
        false,
        false
      >;
      rewrites: $.LinkDesc<
        $Rewrite,
        $.Cardinality.Many,
        {
          "@owned": $.PropertyDesc<_std.$bool, $.Cardinality.AtMostOne>;
          "@is_owned": $.PropertyDesc<_std.$bool, $.Cardinality.AtMostOne>;
        },
        true,
        false,
        false,
        false
      >;
      "<pointers[is schema::Source]": $.LinkDesc<
        $Source,
        $.Cardinality.AtMostOne,
        {},
        false,
        false,
        false,
        false
      >;
      "<subject[is schema::Rewrite]": $.LinkDesc<
        $Rewrite,
        $.Cardinality.Many,
        {},
        false,
        false,
        false,
        false
      >;
      "<pointers[is schema::Link]": $.LinkDesc<
        $Link,
        $.Cardinality.AtMostOne,
        {},
        false,
        false,
        false,
        false
      >;
      "<pointers[is schema::ObjectType]": $.LinkDesc<
        $ObjectType,
        $.Cardinality.AtMostOne,
        {},
        false,
        false,
        false,
        false
      >;
      "<pointers": $.LinkDesc<
        $.ObjectType,
        $.Cardinality.Many,
        {},
        false,
        false,
        false,
        false
      >;
      "<subject": $.LinkDesc<
        $.ObjectType,
        $.Cardinality.Many,
        {},
        false,
        false,
        false,
        false
      >;
    }
>;
type $Pointer = $.ObjectType<
  "schema::Pointer",
  $PointerλShape,
  null,
  [
    ...$ConsistencySubject["__exclusives__"],
    ...$AnnotationSubject["__exclusives__"],
    {
      rewrites: {
        __element__: $Rewrite;
        __cardinality__: $.Cardinality.One | $.Cardinality.AtMostOne;
      };
    },
  ],
  "schema::Link" | "schema::Property"
>;
const $Pointer = $.makeType<$Pointer>(
  _.spec,
  "57e1c6b1-ce76-5b5b-943f-f01f1e6a16a3",
  _.syntax.literal,
);

const Pointer: $.$expr_PathNode<
  $.TypeSet<$Pointer, $.Cardinality.Many>,
  null
> = _.syntax.$PathNode($.$toSet($Pointer, $.Cardinality.Many), null);

export type $SourceλShape = $.typeutil.flatten<
  $Object_32faaa35947553cf88fce68ecf1be4d9λShape & {
    pointers: $.LinkDesc<
      $Pointer,
      $.Cardinality.Many,
      {
        "@owned": $.PropertyDesc<_std.$bool, $.Cardinality.AtMostOne>;
        "@is_owned": $.PropertyDesc<_std.$bool, $.Cardinality.AtMostOne>;
      },
      true,
      false,
      false,
      false
    >;
    indexes: $.LinkDesc<
      $Index,
      $.Cardinality.Many,
      {
        "@owned": $.PropertyDesc<_std.$bool, $.Cardinality.AtMostOne>;
        "@is_owned": $.PropertyDesc<_std.$bool, $.Cardinality.AtMostOne>;
      },
      true,
      false,
      false,
      false
    >;
    "<source[is schema::Pointer]": $.LinkDesc<
      $Pointer,
      $.Cardinality.Many,
      {},
      false,
      false,
      false,
      false
    >;
    "<source[is schema::Property]": $.LinkDesc<
      $Property,
      $.Cardinality.Many,
      {},
      false,
      false,
      false,
      false
    >;
    "<source[is schema::Link]": $.LinkDesc<
      $Link,
      $.Cardinality.Many,
      {},
      false,
      false,
      false,
      false
    >;
    "<source": $.LinkDesc<
      $.ObjectType,
      $.Cardinality.Many,
      {},
      false,
      false,
      false,
      false
    >;
  }
>;
type $Source = $.ObjectType<
  "schema::Source",
  $SourceλShape,
  null,
  [
    ...$Object_32faaa35947553cf88fce68ecf1be4d9["__exclusives__"],
    {
      indexes: {
        __element__: $Index;
        __cardinality__: $.Cardinality.One | $.Cardinality.AtMostOne;
      };
    },
    {
      pointers: {
        __element__: $Pointer;
        __cardinality__: $.Cardinality.One | $.Cardinality.AtMostOne;
      };
    },
  ],
  "schema::Link" | "schema::ObjectType"
>;
const $Source = $.makeType<$Source>(
  _.spec,
  "0368bb5e-ae06-5c00-9316-15095185b828",
  _.syntax.literal,
);

const Source: $.$expr_PathNode<
  $.TypeSet<$Source, $.Cardinality.Many>,
  null
> = _.syntax.$PathNode($.$toSet($Source, $.Cardinality.Many), null);

export type $LinkλShape = $.typeutil.flatten<
  Omit<$PointerλShape, "target"> &
    $SourceλShape & {
      on_target_delete: $.PropertyDesc<
        $TargetDeleteAction,
        $.Cardinality.AtMostOne,
        false,
        false,
        false,
        false
      >;
      on_source_delete: $.PropertyDesc<
        $SourceDeleteAction,
        $.Cardinality.AtMostOne,
        false,
        false,
        false,
        false
      >;
      target: $.LinkDesc<
        $ObjectType,
        $.Cardinality.AtMostOne,
        {},
        false,
        false,
        false,
        false
      >;
      properties: $.LinkDesc<
        $Property,
        $.Cardinality.Many,
        {},
        false,
        true,
        false,
        false
      >;
      "<links[is schema::ObjectType]": $.LinkDesc<
        $ObjectType,
        $.Cardinality.Many,
        {},
        false,
        false,
        false,
        false
      >;
      "<links": $.LinkDesc<
        $.ObjectType,
        $.Cardinality.Many,
        {},
        false,
        false,
        false,
        false
      >;
    }
>;
type $Link = $.ObjectType<
  "schema::Link",
  $LinkλShape,
  null,
  [...$Pointer["__exclusives__"], ...$Source["__exclusives__"]],
  "schema::Link"
>;
const $Link = $.makeType<$Link>(
  _.spec,
  "98fe77cc-128e-58fe-b87a-1251c3288548",
  _.syntax.literal,
);

const Link: $.$expr_PathNode<
  $.TypeSet<$Link, $.Cardinality.Many>,
  null
> = _.syntax.$PathNode($.$toSet($Link, $.Cardinality.Many), null);

export type $MigrationλShape = $.typeutil.flatten<
  $AnnotationSubjectλShape &
    $Object_32faaa35947553cf88fce68ecf1be4d9λShape & {
      script: $.PropertyDesc<
        _std.$str,
        $.Cardinality.One,
        false,
        false,
        false,
        false
      >;
      sdl: $.PropertyDesc<
        _std.$str,
        $.Cardinality.AtMostOne,
        false,
        false,
        false,
        false
      >;
      message: $.PropertyDesc<
        _std.$str,
        $.Cardinality.AtMostOne,
        false,
        false,
        false,
        false
      >;
      generated_by: $.PropertyDesc<
        $MigrationGeneratedBy,
        $.Cardinality.AtMostOne,
        false,
        false,
        false,
        false
      >;
      parents: $.LinkDesc<
        $Migration,
        $.Cardinality.Many,
        {},
        false,
        false,
        false,
        false
      >;
      "<parents[is schema::Migration]": $.LinkDesc<
        $Migration,
        $.Cardinality.Many,
        {},
        false,
        false,
        false,
        false
      >;
      "<parents": $.LinkDesc<
        $.ObjectType,
        $.Cardinality.Many,
        {},
        false,
        false,
        false,
        false
      >;
    }
>;
type $Migration = $.ObjectType<
  "schema::Migration",
  $MigrationλShape,
  null,
  [
    ...$AnnotationSubject["__exclusives__"],
    ...$Object_32faaa35947553cf88fce68ecf1be4d9["__exclusives__"],
  ],
  "schema::Migration"
>;
const $Migration = $.makeType<$Migration>(
  _.spec,
  "31f74b3a-d9b1-5e35-a746-057f44c58e76",
  _.syntax.literal,
);

const Migration: $.$expr_PathNode<
  $.TypeSet<$Migration, $.Cardinality.Many>,
  null
> = _.syntax.$PathNode($.$toSet($Migration, $.Cardinality.Many), null);

export type $ModuleλShape = $.typeutil.flatten<
  $AnnotationSubjectλShape & $Object_32faaa35947553cf88fce68ecf1be4d9λShape & {}
>;
type $Module = $.ObjectType<
  "schema::Module",
  $ModuleλShape,
  null,
  [
    ...$AnnotationSubject["__exclusives__"],
    ...$Object_32faaa35947553cf88fce68ecf1be4d9["__exclusives__"],
  ],
  "schema::Module"
>;
const $Module = $.makeType<$Module>(
  _.spec,
  "7106039a-ed86-5868-8227-3e2fc5e3e5ec",
  _.syntax.literal,
);

const Module: $.$expr_PathNode<
  $.TypeSet<$Module, $.Cardinality.Many>,
  null
> = _.syntax.$PathNode($.$toSet($Module, $.Cardinality.Many), null);

export type $MultiRangeλShape = $.typeutil.flatten<
  $CollectionTypeλShape & {
    element_type: $.LinkDesc<
      $Type,
      $.Cardinality.One,
      {},
      false,
      false,
      false,
      false
    >;
  }
>;
type $MultiRange = $.ObjectType<
  "schema::MultiRange",
  $MultiRangeλShape,
  null,
  [...$CollectionType["__exclusives__"]],
  "schema::MultiRange" | "schema::MultiRangeExprAlias"
>;
const $MultiRange = $.makeType<$MultiRange>(
  _.spec,
  "800c4a49-db9d-5a39-9cf2-aa213b858616",
  _.syntax.literal,
);

const MultiRange: $.$expr_PathNode<
  $.TypeSet<$MultiRange, $.Cardinality.Many>,
  null
> = _.syntax.$PathNode($.$toSet($MultiRange, $.Cardinality.Many), null);

export type $MultiRangeExprAliasλShape = $.typeutil.flatten<
  $MultiRangeλShape & {}
>;
type $MultiRangeExprAlias = $.ObjectType<
  "schema::MultiRangeExprAlias",
  $MultiRangeExprAliasλShape,
  null,
  [...$MultiRange["__exclusives__"]],
  "schema::MultiRangeExprAlias"
>;
const $MultiRangeExprAlias = $.makeType<$MultiRangeExprAlias>(
  _.spec,
  "a92ef6fd-611e-5b00-8115-cc0ebb5f0be5",
  _.syntax.literal,
);

const MultiRangeExprAlias: $.$expr_PathNode<
  $.TypeSet<$MultiRangeExprAlias, $.Cardinality.Many>,
  null
> = _.syntax.$PathNode(
  $.$toSet($MultiRangeExprAlias, $.Cardinality.Many),
  null,
);

export type $ObjectTypeλShape = $.typeutil.flatten<
  $SourceλShape &
    Omit<$ConsistencySubjectλShape, "<subject"> &
    $InheritingObjectλShape &
    Omit<$TypeλShape, "<target"> &
    $AnnotationSubjectλShape & {
      compound_type: $.PropertyDesc<
        _std.$bool,
        $.Cardinality.One,
        false,
        true,
        false,
        false
      >;
      is_compound_type: $.PropertyDesc<
        _std.$bool,
        $.Cardinality.One,
        false,
        true,
        false,
        false
      >;
      union_of: $.LinkDesc<
        $ObjectType,
        $.Cardinality.Many,
        {},
        false,
        false,
        false,
        false
      >;
      intersection_of: $.LinkDesc<
        $ObjectType,
        $.Cardinality.Many,
        {},
        false,
        false,
        false,
        false
      >;
      links: $.LinkDesc<
        $Link,
        $.Cardinality.Many,
        {},
        false,
        true,
        false,
        false
      >;
      properties: $.LinkDesc<
        $Property,
        $.Cardinality.Many,
        {},
        false,
        true,
        false,
        false
      >;
      access_policies: $.LinkDesc<
        $AccessPolicy,
        $.Cardinality.Many,
        {
          "@owned": $.PropertyDesc<_std.$bool, $.Cardinality.AtMostOne>;
          "@is_owned": $.PropertyDesc<_std.$bool, $.Cardinality.AtMostOne>;
        },
        true,
        false,
        false,
        false
      >;
      triggers: $.LinkDesc<
        $Trigger,
        $.Cardinality.Many,
        {
          "@owned": $.PropertyDesc<_std.$bool, $.Cardinality.AtMostOne>;
          "@is_owned": $.PropertyDesc<_std.$bool, $.Cardinality.AtMostOne>;
        },
        true,
        false,
        false,
        false
      >;
      "<__type__[is std::BaseObject]": $.LinkDesc<
        $.ObjectType,
        $.Cardinality.Many,
        {},
        false,
        false,
        false,
        false
      >;
      "<__type__[is schema::TupleElement]": $.LinkDesc<
        $TupleElement,
        $.Cardinality.Many,
        {},
        false,
        false,
        false,
        false
      >;
      "<__type__[is schema::Object]": $.LinkDesc<
        $Object_32faaa35947553cf88fce68ecf1be4d9,
        $.Cardinality.Many,
        {},
        false,
        false,
        false,
        false
      >;
      "<__type__[is schema::VolatilitySubject]": $.LinkDesc<
        $VolatilitySubject,
        $.Cardinality.Many,
        {},
        false,
        false,
        false,
        false
      >;
      "<__type__[is schema::SubclassableObject]": $.LinkDesc<
        $SubclassableObject,
        $.Cardinality.Many,
        {},
        false,
        false,
        false,
        false
      >;
      "<__type__[is schema::InheritingObject]": $.LinkDesc<
        $InheritingObject,
        $.Cardinality.Many,
        {},
        false,
        false,
        false,
        false
      >;
      "<__type__[is schema::Delta]": $.LinkDesc<
        $Delta,
        $.Cardinality.Many,
        {},
        false,
        false,
        false,
        false
      >;
      "<__type__[is schema::AnnotationSubject]": $.LinkDesc<
        $AnnotationSubject,
        $.Cardinality.Many,
        {},
        false,
        false,
        false,
        false
      >;
      "<__type__[is std::Object]": $.LinkDesc<
        _std.$Object_8ce8c71ee4fa5f73840c22d7eaa58588,
        $.Cardinality.Many,
        {},
        false,
        false,
        false,
        false
      >;
      "<union_of[is schema::ObjectType]": $.LinkDesc<
        $ObjectType,
        $.Cardinality.Many,
        {},
        false,
        false,
        false,
        false
      >;
      "<intersection_of[is schema::ObjectType]": $.LinkDesc<
        $ObjectType,
        $.Cardinality.Many,
        {},
        false,
        false,
        false,
        false
      >;
      "<subject[is schema::AccessPolicy]": $.LinkDesc<
        $AccessPolicy,
        $.Cardinality.Many,
        {},
        false,
        false,
        false,
        false
      >;
      "<subject[is schema::Trigger]": $.LinkDesc<
        $Trigger,
        $.Cardinality.Many,
        {},
        false,
        false,
        false,
        false
      >;
      "<__type__[is schema::FutureBehavior]": $.LinkDesc<
        $FutureBehavior,
        $.Cardinality.Many,
        {},
        false,
        false,
        false,
        false
      >;
      "<__type__[is sys::SystemObject]": $.LinkDesc<
        _sys.$SystemObject,
        $.Cardinality.Many,
        {},
        false,
        false,
        false,
        false
      >;
      "<__type__[is sys::ExternalObject]": $.LinkDesc<
        _sys.$ExternalObject,
        $.Cardinality.Many,
        {},
        false,
        false,
        false,
        false
      >;
      "<__type__[is sys::Branch]": $.LinkDesc<
        _sys.$Branch,
        $.Cardinality.Many,
        {},
        false,
        false,
        false,
        false
      >;
      "<__type__[is sys::Database]": $.LinkDesc<
        _sys.$Database,
        $.Cardinality.Many,
        {},
        false,
        false,
        false,
        false
      >;
      "<__type__[is sys::ExtensionPackage]": $.LinkDesc<
        _sys.$ExtensionPackage,
        $.Cardinality.Many,
        {},
        false,
        false,
        false,
        false
      >;
      "<__type__[is sys::ExtensionPackageMigration]": $.LinkDesc<
        _sys.$ExtensionPackageMigration,
        $.Cardinality.Many,
        {},
        false,
        false,
        false,
        false
      >;
      "<__type__[is sys::Role]": $.LinkDesc<
        _sys.$Role,
        $.Cardinality.Many,
        {},
        false,
        false,
        false,
        false
      >;
      "<__type__[is sys::QueryStats]": $.LinkDesc<
        _sys.$QueryStats,
        $.Cardinality.Many,
        {},
        false,
        false,
        false,
        false
      >;
      "<__type__[is cfg::ConfigObject]": $.LinkDesc<
        _cfg.$ConfigObject,
        $.Cardinality.Many,
        {},
        false,
        false,
        false,
        false
      >;
      "<__type__[is cfg::AuthMethod]": $.LinkDesc<
        _cfg.$AuthMethod,
        $.Cardinality.Many,
        {},
        false,
        false,
        false,
        false
      >;
      "<__type__[is cfg::Trust]": $.LinkDesc<
        _cfg.$Trust,
        $.Cardinality.Many,
        {},
        false,
        false,
        false,
        false
      >;
      "<__type__[is cfg::SCRAM]": $.LinkDesc<
        _cfg.$SCRAM,
        $.Cardinality.Many,
        {},
        false,
        false,
        false,
        false
      >;
      "<__type__[is cfg::JWT]": $.LinkDesc<
        _cfg.$JWT,
        $.Cardinality.Many,
        {},
        false,
        false,
        false,
        false
      >;
      "<__type__[is cfg::Password]": $.LinkDesc<
        _cfg.$Password,
        $.Cardinality.Many,
        {},
        false,
        false,
        false,
        false
      >;
      "<__type__[is cfg::mTLS]": $.LinkDesc<
        _cfg.$mTLS,
        $.Cardinality.Many,
        {},
        false,
        false,
        false,
        false
      >;
      "<__type__[is cfg::Auth]": $.LinkDesc<
        _cfg.$Auth,
        $.Cardinality.Many,
        {},
        false,
        false,
        false,
        false
      >;
      "<__type__[is cfg::EmailProviderConfig]": $.LinkDesc<
        _cfg.$EmailProviderConfig,
        $.Cardinality.Many,
        {},
        false,
        false,
        false,
        false
      >;
      "<__type__[is cfg::SMTPProviderConfig]": $.LinkDesc<
        _cfg.$SMTPProviderConfig,
        $.Cardinality.Many,
        {},
        false,
        false,
        false,
        false
      >;
      "<__type__[is cfg::AbstractConfig]": $.LinkDesc<
        _cfg.$AbstractConfig,
        $.Cardinality.Many,
        {},
        false,
        false,
        false,
        false
      >;
      "<__type__[is cfg::ExtensionConfig]": $.LinkDesc<
        _cfg.$ExtensionConfig,
        $.Cardinality.Many,
        {},
        false,
        false,
        false,
        false
      >;
      "<__type__[is cfg::Config]": $.LinkDesc<
        _cfg.$Config,
        $.Cardinality.Many,
        {},
        false,
        false,
        false,
        false
      >;
      "<__type__[is cfg::InstanceConfig]": $.LinkDesc<
        _cfg.$InstanceConfig,
        $.Cardinality.Many,
        {},
        false,
        false,
        false,
        false
      >;
      "<__type__[is schema::Annotation]": $.LinkDesc<
        $Annotation,
        $.Cardinality.Many,
        {},
        false,
        false,
        false,
        false
      >;
      "<__type__[is cfg::DatabaseConfig]": $.LinkDesc<
        _cfg.$DatabaseConfig,
        $.Cardinality.Many,
        {},
        false,
        false,
        false,
        false
      >;
      "<__type__[is cfg::BranchConfig]": $.LinkDesc<
        _cfg.$BranchConfig,
        $.Cardinality.Many,
        {},
        false,
        false,
        false,
        false
      >;
      "<__type__[is std::net::http::Response]": $.LinkDesc<
        _stdnethttp.$Response,
        $.Cardinality.Many,
        {},
        false,
        false,
        false,
        false
      >;
      "<__type__[is std::net::http::ScheduledRequest]": $.LinkDesc<
        _stdnethttp.$ScheduledRequest,
        $.Cardinality.Many,
        {},
        false,
        false,
        false,
        false
      >;
      "<__type__[is schema::Type]": $.LinkDesc<
        $Type,
        $.Cardinality.Many,
        {},
        false,
        false,
        false,
        false
      >;
      "<__type__[is schema::PrimitiveType]": $.LinkDesc<
        $PrimitiveType,
        $.Cardinality.Many,
        {},
        false,
        false,
        false,
        false
      >;
      "<__type__[is schema::CollectionType]": $.LinkDesc<
        $CollectionType,
        $.Cardinality.Many,
        {},
        false,
        false,
        false,
        false
      >;
      "<__type__[is schema::Array]": $.LinkDesc<
        $Array,
        $.Cardinality.Many,
        {},
        false,
        false,
        false,
        false
      >;
      "<__type__[is schema::ArrayExprAlias]": $.LinkDesc<
        $ArrayExprAlias,
        $.Cardinality.Many,
        {},
        false,
        false,
        false,
        false
      >;
      "<__type__[is schema::Tuple]": $.LinkDesc<
        $Tuple,
        $.Cardinality.Many,
        {},
        false,
        false,
        false,
        false
      >;
      "<__type__[is schema::TupleExprAlias]": $.LinkDesc<
        $TupleExprAlias,
        $.Cardinality.Many,
        {},
        false,
        false,
        false,
        false
      >;
      "<__type__[is schema::Range]": $.LinkDesc<
        $Range,
        $.Cardinality.Many,
        {},
        false,
        false,
        false,
        false
      >;
      "<__type__[is schema::RangeExprAlias]": $.LinkDesc<
        $RangeExprAlias,
        $.Cardinality.Many,
        {},
        false,
        false,
        false,
        false
      >;
      "<__type__[is schema::MultiRange]": $.LinkDesc<
        $MultiRange,
        $.Cardinality.Many,
        {},
        false,
        false,
        false,
        false
      >;
      "<__type__[is schema::MultiRangeExprAlias]": $.LinkDesc<
        $MultiRangeExprAlias,
        $.Cardinality.Many,
        {},
        false,
        false,
        false,
        false
      >;
      "<__type__[is schema::Alias]": $.LinkDesc<
        $Alias,
        $.Cardinality.Many,
        {},
        false,
        false,
        false,
        false
      >;
      "<__type__[is schema::Global]": $.LinkDesc<
        $Global,
        $.Cardinality.Many,
        {},
        false,
        false,
        false,
        false
      >;
      "<__type__[is schema::Parameter]": $.LinkDesc<
        $Parameter,
        $.Cardinality.Many,
        {},
        false,
        false,
        false,
        false
      >;
      "<__type__[is schema::CallableObject]": $.LinkDesc<
        $CallableObject,
        $.Cardinality.Many,
        {},
        false,
        false,
        false,
        false
      >;
      "<__type__[is schema::Function]": $.LinkDesc<
        $Function,
        $.Cardinality.Many,
        {},
        false,
        false,
        false,
        false
      >;
      "<__type__[is schema::Operator]": $.LinkDesc<
        $Operator,
        $.Cardinality.Many,
        {},
        false,
        false,
        false,
        false
      >;
      "<__type__[is schema::Cast]": $.LinkDesc<
        $Cast,
        $.Cardinality.Many,
        {},
        false,
        false,
        false,
        false
      >;
      "<__type__[is schema::Migration]": $.LinkDesc<
        $Migration,
        $.Cardinality.Many,
        {},
        false,
        false,
        false,
        false
      >;
      "<__type__[is schema::Module]": $.LinkDesc<
        $Module,
        $.Cardinality.Many,
        {},
        false,
        false,
        false,
        false
      >;
      "<__type__[is schema::PseudoType]": $.LinkDesc<
        $PseudoType,
        $.Cardinality.Many,
        {},
        false,
        false,
        false,
        false
      >;
      "<__type__[is schema::Constraint]": $.LinkDesc<
        $Constraint,
        $.Cardinality.Many,
        {},
        false,
        false,
        false,
        false
      >;
      "<__type__[is schema::ConsistencySubject]": $.LinkDesc<
        $ConsistencySubject,
        $.Cardinality.Many,
        {},
        false,
        false,
        false,
        false
      >;
      "<__type__[is schema::Rewrite]": $.LinkDesc<
        $Rewrite,
        $.Cardinality.Many,
        {},
        false,
        false,
        false,
        false
      >;
      "<__type__[is schema::Pointer]": $.LinkDesc<
        $Pointer,
        $.Cardinality.Many,
        {},
        false,
        false,
        false,
        false
      >;
      "<__type__[is schema::Property]": $.LinkDesc<
        $Property,
        $.Cardinality.Many,
        {},
        false,
        false,
        false,
        false
      >;
      "<__type__[is schema::ScalarType]": $.LinkDesc<
        $ScalarType,
        $.Cardinality.Many,
        {},
        false,
        false,
        false,
        false
      >;
      "<__type__[is schema::Index]": $.LinkDesc<
        $Index,
        $.Cardinality.Many,
        {},
        false,
        false,
        false,
        false
      >;
      "<__type__[is schema::Source]": $.LinkDesc<
        $Source,
        $.Cardinality.Many,
        {},
        false,
        false,
        false,
        false
      >;
      "<__type__[is schema::Link]": $.LinkDesc<
        $Link,
        $.Cardinality.Many,
        {},
        false,
        false,
        false,
        false
      >;
      "<target[is schema::Link]": $.LinkDesc<
        $Link,
        $.Cardinality.Many,
        {},
        false,
        false,
        false,
        false
      >;
      "<__type__[is schema::AccessPolicy]": $.LinkDesc<
        $AccessPolicy,
        $.Cardinality.Many,
        {},
        false,
        false,
        false,
        false
      >;
      "<__type__[is schema::Trigger]": $.LinkDesc<
        $Trigger,
        $.Cardinality.Many,
        {},
        false,
        false,
        false,
        false
      >;
      "<__type__[is schema::ObjectType]": $.LinkDesc<
        $ObjectType,
        $.Cardinality.Many,
        {},
        false,
        false,
        false,
        false
      >;
      "<__type__[is schema::Extension]": $.LinkDesc<
        $Extension,
        $.Cardinality.Many,
        {},
        false,
        false,
        false,
        false
      >;
      "<__type__": $.LinkDesc<
        $.ObjectType,
        $.Cardinality.Many,
        {},
        false,
        false,
        false,
        false
      >;
      "<intersection_of": $.LinkDesc<
        $.ObjectType,
        $.Cardinality.Many,
        {},
        false,
        false,
        false,
        false
      >;
      "<subject": $.LinkDesc<
        $.ObjectType,
        $.Cardinality.Many,
        {},
        false,
        false,
        false,
        false
      >;
      "<target": $.LinkDesc<
        $.ObjectType,
        $.Cardinality.Many,
        {},
        false,
        false,
        false,
        false
      >;
      "<union_of": $.LinkDesc<
        $.ObjectType,
        $.Cardinality.Many,
        {},
        false,
        false,
        false,
        false
      >;
    }
>;
type $ObjectType = $.ObjectType<
  "schema::ObjectType",
  $ObjectTypeλShape,
  null,
  [
    ...$Source["__exclusives__"],
    ...$ConsistencySubject["__exclusives__"],
    ...$InheritingObject["__exclusives__"],
    ...$Type["__exclusives__"],
    ...$AnnotationSubject["__exclusives__"],
    {
      access_policies: {
        __element__: $AccessPolicy;
        __cardinality__: $.Cardinality.One | $.Cardinality.AtMostOne;
      };
    },
    {
      triggers: {
        __element__: $Trigger;
        __cardinality__: $.Cardinality.One | $.Cardinality.AtMostOne;
      };
    },
  ],
  "schema::ObjectType"
>;
const $ObjectType = $.makeType<$ObjectType>(
  _.spec,
  "2662a1b4-4f3f-5875-b6eb-ce52101a90a3",
  _.syntax.literal,
);

const ObjectType: $.$expr_PathNode<
  $.TypeSet<$ObjectType, $.Cardinality.Many>,
  null
> = _.syntax.$PathNode($.$toSet($ObjectType, $.Cardinality.Many), null);

export type $OperatorλShape = $.typeutil.flatten<
  $CallableObjectλShape &
    $VolatilitySubjectλShape & {
      operator_kind: $.PropertyDesc<
        $OperatorKind,
        $.Cardinality.AtMostOne,
        false,
        false,
        false,
        false
      >;
      is_abstract: $.PropertyDesc<
        _std.$bool,
        $.Cardinality.AtMostOne,
        false,
        true,
        false,
        false
      >;
      abstract: $.PropertyDesc<
        _std.$bool,
        $.Cardinality.AtMostOne,
        false,
        false,
        false,
        true
      >;
    }
>;
type $Operator = $.ObjectType<
  "schema::Operator",
  $OperatorλShape,
  null,
  [
    ...$CallableObject["__exclusives__"],
    ...$VolatilitySubject["__exclusives__"],
  ],
  "schema::Operator"
>;
const $Operator = $.makeType<$Operator>(
  _.spec,
  "e37bd85e-5e2f-5daa-9dd9-d21d419032be",
  _.syntax.literal,
);

const Operator: $.$expr_PathNode<
  $.TypeSet<$Operator, $.Cardinality.Many>,
  null
> = _.syntax.$PathNode($.$toSet($Operator, $.Cardinality.Many), null);

export type $ParameterλShape = $.typeutil.flatten<
  $Object_32faaa35947553cf88fce68ecf1be4d9λShape & {
    typemod: $.PropertyDesc<
      $TypeModifier,
      $.Cardinality.One,
      false,
      false,
      false,
      false
    >;
    kind: $.PropertyDesc<
      $ParameterKind,
      $.Cardinality.One,
      false,
      false,
      false,
      false
    >;
    num: $.PropertyDesc<
      _std.$int64,
      $.Cardinality.One,
      false,
      false,
      false,
      false
    >;
    default: $.PropertyDesc<
      _std.$str,
      $.Cardinality.AtMostOne,
      false,
      false,
      false,
      false
    >;
    type: $.LinkDesc<$Type, $.Cardinality.One, {}, false, false, false, false>;
    "<params[is schema::CallableObject]": $.LinkDesc<
      $CallableObject,
      $.Cardinality.Many,
      {},
      false,
      false,
      false,
      false
    >;
    "<params[is schema::Index]": $.LinkDesc<
      $Index,
      $.Cardinality.Many,
      {},
      false,
      false,
      false,
      false
    >;
    "<params[is schema::Function]": $.LinkDesc<
      $Function,
      $.Cardinality.Many,
      {},
      false,
      false,
      false,
      false
    >;
    "<params[is schema::Operator]": $.LinkDesc<
      $Operator,
      $.Cardinality.Many,
      {},
      false,
      false,
      false,
      false
    >;
    "<params[is schema::Constraint]": $.LinkDesc<
      $Constraint,
      $.Cardinality.Many,
      {},
      false,
      false,
      false,
      false
    >;
    "<params": $.LinkDesc<
      $.ObjectType,
      $.Cardinality.Many,
      {},
      false,
      false,
      false,
      false
    >;
  }
>;
type $Parameter = $.ObjectType<
  "schema::Parameter",
  $ParameterλShape,
  null,
  [...$Object_32faaa35947553cf88fce68ecf1be4d9["__exclusives__"]],
  "schema::Parameter"
>;
const $Parameter = $.makeType<$Parameter>(
  _.spec,
  "87f7d583-3e3c-507e-9fbb-4bf3b9e5aa24",
  _.syntax.literal,
);

const Parameter: $.$expr_PathNode<
  $.TypeSet<$Parameter, $.Cardinality.Many>,
  null
> = _.syntax.$PathNode($.$toSet($Parameter, $.Cardinality.Many), null);

export type $PropertyλShape = $.typeutil.flatten<
  $PointerλShape & {
    "<properties[is schema::Link]": $.LinkDesc<
      $Link,
      $.Cardinality.Many,
      {},
      false,
      false,
      false,
      false
    >;
    "<properties[is schema::ObjectType]": $.LinkDesc<
      $ObjectType,
      $.Cardinality.Many,
      {},
      false,
      false,
      false,
      false
    >;
    "<properties": $.LinkDesc<
      $.ObjectType,
      $.Cardinality.Many,
      {},
      false,
      false,
      false,
      false
    >;
  }
>;
type $Property = $.ObjectType<
  "schema::Property",
  $PropertyλShape,
  null,
  [...$Pointer["__exclusives__"]],
  "schema::Property"
>;
const $Property = $.makeType<$Property>(
  _.spec,
  "a57f48ff-3bb9-5693-a2e1-bf328a2ddbfc",
  _.syntax.literal,
);

const Property: $.$expr_PathNode<
  $.TypeSet<$Property, $.Cardinality.Many>,
  null
> = _.syntax.$PathNode($.$toSet($Property, $.Cardinality.Many), null);

export type $PseudoTypeλShape = $.typeutil.flatten<
  $InheritingObjectλShape & $TypeλShape & {}
>;
type $PseudoType = $.ObjectType<
  "schema::PseudoType",
  $PseudoTypeλShape,
  null,
  [...$InheritingObject["__exclusives__"], ...$Type["__exclusives__"]],
  "schema::PseudoType"
>;
const $PseudoType = $.makeType<$PseudoType>(
  _.spec,
  "0875f8c3-7033-5cc4-af04-2b6d80e289e0",
  _.syntax.literal,
);

const PseudoType: $.$expr_PathNode<
  $.TypeSet<$PseudoType, $.Cardinality.Many>,
  null
> = _.syntax.$PathNode($.$toSet($PseudoType, $.Cardinality.Many), null);

export type $RangeλShape = $.typeutil.flatten<
  $CollectionTypeλShape & {
    element_type: $.LinkDesc<
      $Type,
      $.Cardinality.One,
      {},
      false,
      false,
      false,
      false
    >;
  }
>;
type $Range = $.ObjectType<
  "schema::Range",
  $RangeλShape,
  null,
  [...$CollectionType["__exclusives__"]],
  "schema::Range" | "schema::RangeExprAlias"
>;
const $Range = $.makeType<$Range>(
  _.spec,
  "cced31f8-8167-59d7-b269-c49ae88a0ac1",
  _.syntax.literal,
);

const Range: $.$expr_PathNode<
  $.TypeSet<$Range, $.Cardinality.Many>,
  null
> = _.syntax.$PathNode($.$toSet($Range, $.Cardinality.Many), null);

export type $RangeExprAliasλShape = $.typeutil.flatten<$RangeλShape & {}>;
type $RangeExprAlias = $.ObjectType<
  "schema::RangeExprAlias",
  $RangeExprAliasλShape,
  null,
  [...$Range["__exclusives__"]],
  "schema::RangeExprAlias"
>;
const $RangeExprAlias = $.makeType<$RangeExprAlias>(
  _.spec,
  "bc63491c-2a88-5353-b5f0-6f2188a4f65d",
  _.syntax.literal,
);

const RangeExprAlias: $.$expr_PathNode<
  $.TypeSet<$RangeExprAlias, $.Cardinality.Many>,
  null
> = _.syntax.$PathNode($.$toSet($RangeExprAlias, $.Cardinality.Many), null);

export type $RewriteλShape = $.typeutil.flatten<
  $InheritingObjectλShape &
    $AnnotationSubjectλShape & {
      kind: $.PropertyDesc<
        $TriggerKind,
        $.Cardinality.One,
        false,
        false,
        false,
        false
      >;
      expr: $.PropertyDesc<
        _std.$str,
        $.Cardinality.One,
        false,
        false,
        false,
        false
      >;
      subject: $.LinkDesc<
        $Pointer,
        $.Cardinality.One,
        {},
        false,
        false,
        false,
        false
      >;
      "<rewrites[is schema::Pointer]": $.LinkDesc<
        $Pointer,
        $.Cardinality.AtMostOne,
        {},
        false,
        false,
        false,
        false
      >;
      "<rewrites[is schema::Property]": $.LinkDesc<
        $Property,
        $.Cardinality.AtMostOne,
        {},
        false,
        false,
        false,
        false
      >;
      "<rewrites[is schema::Link]": $.LinkDesc<
        $Link,
        $.Cardinality.AtMostOne,
        {},
        false,
        false,
        false,
        false
      >;
      "<rewrites": $.LinkDesc<
        $.ObjectType,
        $.Cardinality.Many,
        {},
        false,
        false,
        false,
        false
      >;
    }
>;
type $Rewrite = $.ObjectType<
  "schema::Rewrite",
  $RewriteλShape,
  null,
  [
    ...$InheritingObject["__exclusives__"],
    ...$AnnotationSubject["__exclusives__"],
  ],
  "schema::Rewrite"
>;
const $Rewrite = $.makeType<$Rewrite>(
  _.spec,
  "d60198c8-ad58-5c4c-b3b6-d520c19f5cef",
  _.syntax.literal,
);

const Rewrite: $.$expr_PathNode<
  $.TypeSet<$Rewrite, $.Cardinality.Many>,
  null
> = _.syntax.$PathNode($.$toSet($Rewrite, $.Cardinality.Many), null);

export type $ScalarTypeλShape = $.typeutil.flatten<
  $PrimitiveTypeλShape &
    $ConsistencySubjectλShape &
    $AnnotationSubjectλShape & {
      default: $.PropertyDesc<
        _std.$str,
        $.Cardinality.AtMostOne,
        false,
        false,
        false,
        false
      >;
      enum_values: $.PropertyDesc<
        $.ArrayType<_std.$str>,
        $.Cardinality.AtMostOne,
        false,
        false,
        false,
        false
      >;
      arg_values: $.PropertyDesc<
        $.ArrayType<_std.$str>,
        $.Cardinality.AtMostOne,
        false,
        false,
        false,
        false
      >;
    }
>;
type $ScalarType = $.ObjectType<
  "schema::ScalarType",
  $ScalarTypeλShape,
  null,
  [
    ...$PrimitiveType["__exclusives__"],
    ...$ConsistencySubject["__exclusives__"],
    ...$AnnotationSubject["__exclusives__"],
  ],
  "schema::ScalarType"
>;
const $ScalarType = $.makeType<$ScalarType>(
  _.spec,
  "d055dd47-3eb9-5a31-9d8f-5e7053bbe11e",
  _.syntax.literal,
);

const ScalarType: $.$expr_PathNode<
  $.TypeSet<$ScalarType, $.Cardinality.Many>,
  null
> = _.syntax.$PathNode($.$toSet($ScalarType, $.Cardinality.Many), null);

export type $TriggerλShape = $.typeutil.flatten<
  $InheritingObjectλShape &
    $AnnotationSubjectλShape & {
      timing: $.PropertyDesc<
        $TriggerTiming,
        $.Cardinality.One,
        false,
        false,
        false,
        false
      >;
      kinds: $.PropertyDesc<
        $TriggerKind,
        $.Cardinality.Many,
        false,
        false,
        false,
        false
      >;
      scope: $.PropertyDesc<
        $TriggerScope,
        $.Cardinality.One,
        false,
        false,
        false,
        false
      >;
      expr: $.PropertyDesc<
        _std.$str,
        $.Cardinality.AtMostOne,
        false,
        false,
        false,
        false
      >;
      condition: $.PropertyDesc<
        _std.$str,
        $.Cardinality.AtMostOne,
        false,
        false,
        false,
        false
      >;
      subject: $.LinkDesc<
        $ObjectType,
        $.Cardinality.One,
        {},
        false,
        false,
        false,
        false
      >;
      "<triggers[is schema::ObjectType]": $.LinkDesc<
        $ObjectType,
        $.Cardinality.AtMostOne,
        {},
        false,
        false,
        false,
        false
      >;
      "<triggers": $.LinkDesc<
        $.ObjectType,
        $.Cardinality.Many,
        {},
        false,
        false,
        false,
        false
      >;
    }
>;
type $Trigger = $.ObjectType<
  "schema::Trigger",
  $TriggerλShape,
  null,
  [
    ...$InheritingObject["__exclusives__"],
    ...$AnnotationSubject["__exclusives__"],
  ],
  "schema::Trigger"
>;
const $Trigger = $.makeType<$Trigger>(
  _.spec,
  "2b738231-1ef7-59d0-a04c-dae012181a02",
  _.syntax.literal,
);

const Trigger: $.$expr_PathNode<
  $.TypeSet<$Trigger, $.Cardinality.Many>,
  null
> = _.syntax.$PathNode($.$toSet($Trigger, $.Cardinality.Many), null);

export type $TupleλShape = $.typeutil.flatten<
  $CollectionTypeλShape & {
    named: $.PropertyDesc<
      _std.$bool,
      $.Cardinality.One,
      false,
      false,
      false,
      false
    >;
    element_types: $.LinkDesc<
      $TupleElement,
      $.Cardinality.Many,
      {
        "@index": $.PropertyDesc<_std.$int64, $.Cardinality.AtMostOne>;
      },
      true,
      false,
      false,
      false
    >;
  }
>;
type $Tuple = $.ObjectType<
  "schema::Tuple",
  $TupleλShape,
  null,
  [
    ...$CollectionType["__exclusives__"],
    {
      element_types: {
        __element__: $TupleElement;
        __cardinality__: $.Cardinality.One | $.Cardinality.AtMostOne;
      };
    },
  ],
  "schema::Tuple" | "schema::TupleExprAlias"
>;
const $Tuple = $.makeType<$Tuple>(
  _.spec,
  "d88b4a0c-9561-56f4-b0a9-7b24027b4de8",
  _.syntax.literal,
);

const Tuple: $.$expr_PathNode<
  $.TypeSet<$Tuple, $.Cardinality.Many>,
  null
> = _.syntax.$PathNode($.$toSet($Tuple, $.Cardinality.Many), null);

export type $TupleElementλShape = $.typeutil.flatten<
  _std.$BaseObjectλShape & {
    name: $.PropertyDesc<
      _std.$str,
      $.Cardinality.AtMostOne,
      false,
      false,
      false,
      false
    >;
    type: $.LinkDesc<$Type, $.Cardinality.One, {}, false, false, false, false>;
    "<element_types[is schema::Tuple]": $.LinkDesc<
      $Tuple,
      $.Cardinality.AtMostOne,
      {},
      false,
      false,
      false,
      false
    >;
    "<element_types[is schema::TupleExprAlias]": $.LinkDesc<
      $TupleExprAlias,
      $.Cardinality.AtMostOne,
      {},
      false,
      false,
      false,
      false
    >;
    "<element_types": $.LinkDesc<
      $.ObjectType,
      $.Cardinality.Many,
      {},
      false,
      false,
      false,
      false
    >;
  }
>;
type $TupleElement = $.ObjectType<
  "schema::TupleElement",
  $TupleElementλShape,
  null,
  [..._std.$BaseObject["__exclusives__"]],
  "schema::TupleElement"
>;
const $TupleElement = $.makeType<$TupleElement>(
  _.spec,
  "9cc04b0b-11e0-5670-a8a1-441a323e12fb",
  _.syntax.literal,
);

const TupleElement: $.$expr_PathNode<
  $.TypeSet<$TupleElement, $.Cardinality.Many>,
  null
> = _.syntax.$PathNode($.$toSet($TupleElement, $.Cardinality.Many), null);

export type $TupleExprAliasλShape = $.typeutil.flatten<$TupleλShape & {}>;
type $TupleExprAlias = $.ObjectType<
  "schema::TupleExprAlias",
  $TupleExprAliasλShape,
  null,
  [...$Tuple["__exclusives__"]],
  "schema::TupleExprAlias"
>;
const $TupleExprAlias = $.makeType<$TupleExprAlias>(
  _.spec,
  "b7744aa3-50fc-54e0-ae51-20d78737e25b",
  _.syntax.literal,
);

const TupleExprAlias: $.$expr_PathNode<
  $.TypeSet<$TupleExprAlias, $.Cardinality.Many>,
  null
> = _.syntax.$PathNode($.$toSet($TupleExprAlias, $.Cardinality.Many), null);

export {
  AccessKind,
  AccessPolicyAction,
  Cardinality,
  IndexDeferrability,
  MigrationGeneratedBy,
  OperatorKind,
  ParameterKind,
  RewriteKind,
  SourceDeleteAction,
  TargetDeleteAction,
  TriggerKind,
  TriggerScope,
  TriggerTiming,
  TypeModifier,
  Volatility,
  $Object_32faaa35947553cf88fce68ecf1be4d9,
  Object_32faaa35947553cf88fce68ecf1be4d9,
  $SubclassableObject,
  SubclassableObject,
  $InheritingObject,
  InheritingObject,
  $AnnotationSubject,
  AnnotationSubject,
  $AccessPolicy,
  AccessPolicy,
  $Alias,
  Alias,
  $Annotation,
  Annotation,
  $Type,
  Type,
  $PrimitiveType,
  PrimitiveType,
  $CollectionType,
  CollectionType,
  $Array,
  Array,
  $ArrayExprAlias,
  ArrayExprAlias,
  $CallableObject,
  CallableObject,
  $VolatilitySubject,
  VolatilitySubject,
  $Cast,
  Cast,
  $ConsistencySubject,
  ConsistencySubject,
  $Constraint,
  Constraint,
  $Delta,
  Delta,
  $Extension,
  Extension,
  $Function,
  Function,
  $FutureBehavior,
  FutureBehavior,
  $Global,
  Global,
  $Index,
  Index,
  $Pointer,
  Pointer,
  $Source,
  Source,
  $Link,
  Link,
  $Migration,
  Migration,
  $Module,
  Module,
  $MultiRange,
  MultiRange,
  $MultiRangeExprAlias,
  MultiRangeExprAlias,
  $ObjectType,
  ObjectType,
  $Operator,
  Operator,
  $Parameter,
  Parameter,
  $Property,
  Property,
  $PseudoType,
  PseudoType,
  $Range,
  Range,
  $RangeExprAlias,
  RangeExprAlias,
  $Rewrite,
  Rewrite,
  $ScalarType,
  ScalarType,
  $Trigger,
  Trigger,
  $Tuple,
  Tuple,
  $TupleElement,
  TupleElement,
  $TupleExprAlias,
  TupleExprAlias,
};

type __defaultExports = {
  AccessKind: typeof AccessKind;
  AccessPolicyAction: typeof AccessPolicyAction;
  Cardinality: typeof Cardinality;
  IndexDeferrability: typeof IndexDeferrability;
  MigrationGeneratedBy: typeof MigrationGeneratedBy;
  OperatorKind: typeof OperatorKind;
  ParameterKind: typeof ParameterKind;
  RewriteKind: typeof RewriteKind;
  SourceDeleteAction: typeof SourceDeleteAction;
  TargetDeleteAction: typeof TargetDeleteAction;
  TriggerKind: typeof TriggerKind;
  TriggerScope: typeof TriggerScope;
  TriggerTiming: typeof TriggerTiming;
  TypeModifier: typeof TypeModifier;
  Volatility: typeof Volatility;
  Object: typeof Object_32faaa35947553cf88fce68ecf1be4d9;
  SubclassableObject: typeof SubclassableObject;
  InheritingObject: typeof InheritingObject;
  AnnotationSubject: typeof AnnotationSubject;
  AccessPolicy: typeof AccessPolicy;
  Alias: typeof Alias;
  Annotation: typeof Annotation;
  Type: typeof Type;
  PrimitiveType: typeof PrimitiveType;
  CollectionType: typeof CollectionType;
  Array: typeof Array;
  ArrayExprAlias: typeof ArrayExprAlias;
  CallableObject: typeof CallableObject;
  VolatilitySubject: typeof VolatilitySubject;
  Cast: typeof Cast;
  ConsistencySubject: typeof ConsistencySubject;
  Constraint: typeof Constraint;
  Delta: typeof Delta;
  Extension: typeof Extension;
  Function: typeof Function;
  FutureBehavior: typeof FutureBehavior;
  Global: typeof Global;
  Index: typeof Index;
  Pointer: typeof Pointer;
  Source: typeof Source;
  Link: typeof Link;
  Migration: typeof Migration;
  Module: typeof Module;
  MultiRange: typeof MultiRange;
  MultiRangeExprAlias: typeof MultiRangeExprAlias;
  ObjectType: typeof ObjectType;
  Operator: typeof Operator;
  Parameter: typeof Parameter;
  Property: typeof Property;
  PseudoType: typeof PseudoType;
  Range: typeof Range;
  RangeExprAlias: typeof RangeExprAlias;
  Rewrite: typeof Rewrite;
  ScalarType: typeof ScalarType;
  Trigger: typeof Trigger;
  Tuple: typeof Tuple;
  TupleElement: typeof TupleElement;
  TupleExprAlias: typeof TupleExprAlias;
};
const __defaultExports: __defaultExports = {
  AccessKind: AccessKind,
  AccessPolicyAction: AccessPolicyAction,
  Cardinality: Cardinality,
  IndexDeferrability: IndexDeferrability,
  MigrationGeneratedBy: MigrationGeneratedBy,
  OperatorKind: OperatorKind,
  ParameterKind: ParameterKind,
  RewriteKind: RewriteKind,
  SourceDeleteAction: SourceDeleteAction,
  TargetDeleteAction: TargetDeleteAction,
  TriggerKind: TriggerKind,
  TriggerScope: TriggerScope,
  TriggerTiming: TriggerTiming,
  TypeModifier: TypeModifier,
  Volatility: Volatility,
  Object: Object_32faaa35947553cf88fce68ecf1be4d9,
  SubclassableObject: SubclassableObject,
  InheritingObject: InheritingObject,
  AnnotationSubject: AnnotationSubject,
  AccessPolicy: AccessPolicy,
  Alias: Alias,
  Annotation: Annotation,
  Type: Type,
  PrimitiveType: PrimitiveType,
  CollectionType: CollectionType,
  Array: Array,
  ArrayExprAlias: ArrayExprAlias,
  CallableObject: CallableObject,
  VolatilitySubject: VolatilitySubject,
  Cast: Cast,
  ConsistencySubject: ConsistencySubject,
  Constraint: Constraint,
  Delta: Delta,
  Extension: Extension,
  Function: Function,
  FutureBehavior: FutureBehavior,
  Global: Global,
  Index: Index,
  Pointer: Pointer,
  Source: Source,
  Link: Link,
  Migration: Migration,
  Module: Module,
  MultiRange: MultiRange,
  MultiRangeExprAlias: MultiRangeExprAlias,
  ObjectType: ObjectType,
  Operator: Operator,
  Parameter: Parameter,
  Property: Property,
  PseudoType: PseudoType,
  Range: Range,
  RangeExprAlias: RangeExprAlias,
  Rewrite: Rewrite,
  ScalarType: ScalarType,
  Trigger: Trigger,
  Tuple: Tuple,
  TupleElement: TupleElement,
  TupleExprAlias: TupleExprAlias,
};
export default __defaultExports;
