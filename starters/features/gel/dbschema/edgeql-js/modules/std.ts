// GENERATED by @gel/generate v0.6.4

import * as $ from "../reflection";
import * as _ from "../imports";
import _module__cal from "./std/cal";
import _module__enc from "./std/enc";
import _module__fts from "./std/fts";
import _module__net from "./std/net";
import _module__pg from "./std/pg";
import _module__math from "./std/math";
import type * as _cfg from "./cfg";
import type * as _stdcal from "./std/cal";
import type * as _stdpg from "./std/pg";
import type * as _schema from "./schema";
type $anyscalar =
  | $anypoint
  | $anyreal
  | $.EnumType
  | $bool
  | $bytes
  | $uuid
  | $str
  | $json
  | _cfg.$memory
  | _stdcal.$local_time
  | _stdcal.$relative_duration
  | _stdcal.$date_duration
  | _stdpg.$json;

export type $Endian = {
  Little: $.$expr_Literal<$Endian>;
  Big: $.$expr_Literal<$Endian>;
} & $.EnumType<"std::Endian", ["Little", "Big"]>;
const Endian: $Endian = $.makeType<$Endian>(
  _.spec,
  "e4a1d11b-227e-5744-a0c9-31f9cd756e7b",
  _.syntax.literal,
);

export type $JsonEmpty = {
  ReturnEmpty: $.$expr_Literal<$JsonEmpty>;
  ReturnTarget: $.$expr_Literal<$JsonEmpty>;
  Error: $.$expr_Literal<$JsonEmpty>;
  UseNull: $.$expr_Literal<$JsonEmpty>;
  DeleteKey: $.$expr_Literal<$JsonEmpty>;
} & $.EnumType<
  "std::JsonEmpty",
  ["ReturnEmpty", "ReturnTarget", "Error", "UseNull", "DeleteKey"]
>;
const JsonEmpty: $JsonEmpty = $.makeType<$JsonEmpty>(
  _.spec,
  "584feb89-c83d-561d-aa78-24e6d779f044",
  _.syntax.literal,
);

type $anypoint = $anydiscrete | $anycontiguous;

type $anycontiguous =
  | $anyfloat
  | $datetime
  | $duration
  | $decimal
  | _stdcal.$local_datetime
  | _stdpg.$timestamptz
  | _stdpg.$timestamp
  | _stdpg.$interval;

type $anydiscrete = $number | _stdcal.$local_date | _stdpg.$date;

type $anyreal = $anyint | $anyfloat | $anynumeric;

type $anyfloat = $number;

type $anyint = $number | $bigint;

type $anynumeric = $decimal | $bigint;

export type $bigint = $.ScalarType<"std::bigint", bigint>;
const bigint: $.scalarTypeWithConstructor<$bigint, never> = $.makeType<
  $.scalarTypeWithConstructor<$bigint, never>
>(_.spec, "00000000-0000-0000-0000-000000000110", _.syntax.literal);

export type $bool = $.ScalarType<"std::bool", boolean>;
const bool: $.scalarTypeWithConstructor<$bool, never> = $.makeType<
  $.scalarTypeWithConstructor<$bool, never>
>(_.spec, "00000000-0000-0000-0000-000000000109", _.syntax.literal);

export type $bytes = $.ScalarType<"std::bytes", Uint8Array>;
const bytes: $.scalarTypeWithConstructor<$bytes, never> = $.makeType<
  $.scalarTypeWithConstructor<$bytes, never>
>(_.spec, "00000000-0000-0000-0000-000000000102", _.syntax.literal);

export type $datetime = $.ScalarType<"std::datetime", Date>;
const datetime: $.scalarTypeWithConstructor<$datetime, string> = $.makeType<
  $.scalarTypeWithConstructor<$datetime, string>
>(_.spec, "00000000-0000-0000-0000-00000000010a", _.syntax.literal);

export type $decimal = $.ScalarType<"std::decimal", string>;
const decimal: $.scalarTypeWithConstructor<$decimal, never> = $.makeType<
  $.scalarTypeWithConstructor<$decimal, never>
>(_.spec, "00000000-0000-0000-0000-000000000108", _.syntax.literal);
export type $decimalλICastableTo = $decimal | $bigint;
export type $decimalλIAssignableBy = $decimal | $bigint;

export type $duration = $.ScalarType<"std::duration", _.gel.Duration>;
const duration: $.scalarTypeWithConstructor<$duration, string> = $.makeType<
  $.scalarTypeWithConstructor<$duration, string>
>(_.spec, "00000000-0000-0000-0000-00000000010e", _.syntax.literal);

export type $float32 = $.ScalarType<"std::number", number>;
const float32: $.scalarTypeWithConstructor<$number, string> = $.makeType<
  $.scalarTypeWithConstructor<$number, string>
>(_.spec, "00000000-0000-0000-0000-000000000106", _.syntax.literal);

export type $float64 = $.ScalarType<"std::number", number>;
const float64: $.scalarTypeWithConstructor<$number, string> = $.makeType<
  $.scalarTypeWithConstructor<$number, string>
>(_.spec, "00000000-0000-0000-0000-000000000107", _.syntax.literal);

export type $int16 = $.ScalarType<"std::number", number>;
const int16: $.scalarTypeWithConstructor<$number, string> = $.makeType<
  $.scalarTypeWithConstructor<$number, string>
>(_.spec, "00000000-0000-0000-0000-000000000103", _.syntax.literal);

export type $int32 = $.ScalarType<"std::number", number>;
const int32: $.scalarTypeWithConstructor<$number, string> = $.makeType<
  $.scalarTypeWithConstructor<$number, string>
>(_.spec, "00000000-0000-0000-0000-000000000104", _.syntax.literal);

export type $int64 = $.ScalarType<"std::number", number>;
const int64: $.scalarTypeWithConstructor<$number, string> = $.makeType<
  $.scalarTypeWithConstructor<$number, string>
>(_.spec, "00000000-0000-0000-0000-000000000105", _.syntax.literal);

export type $json = $.ScalarType<"std::json", unknown>;
const json: $.scalarTypeWithConstructor<$json, never> = $.makeType<
  $.scalarTypeWithConstructor<$json, never>
>(_.spec, "00000000-0000-0000-0000-00000000010f", _.syntax.literal);

interface $sequence extends $int64 {}
const $sequence: $sequence = $.makeType<$sequence>(
  _.spec,
  "fd1c52ea-74a9-541b-88e2-378d1edb02fd",
  _.syntax.literal,
);

export type $str = $.ScalarType<"std::str", string>;
const str: $.scalarTypeWithConstructor<$str, never> = $.makeType<
  $.scalarTypeWithConstructor<$str, never>
>(_.spec, "00000000-0000-0000-0000-000000000101", _.syntax.literal);

export type $uuid = $.ScalarType<"std::uuid", string>;
const uuid: $.scalarTypeWithConstructor<$uuid, never> = $.makeType<
  $.scalarTypeWithConstructor<$uuid, never>
>(_.spec, "00000000-0000-0000-0000-000000000100", _.syntax.literal);

export type $number = $.ScalarType<"std::number", number>;
const number: $.scalarTypeWithConstructor<$number, string> = $.makeType<
  $.scalarTypeWithConstructor<$number, string>
>(_.spec, "00000000-0000-0000-0000-0000000001ff", _.syntax.literal);

export type $BaseObjectλShape = $.typeutil.flatten<{
  id: $.PropertyDesc<$uuid, $.Cardinality.One, true, false, true, true>;
  __type__: $.LinkDesc<
    _schema.$ObjectType,
    $.Cardinality.One,
    {},
    false,
    false,
    true,
    false
  >;
}>;
type $BaseObject = $.ObjectType<
  "std::BaseObject",
  $BaseObjectλShape,
  null,
  [
    {
      id: {
        __element__: $uuid;
        __cardinality__: $.Cardinality.One | $.Cardinality.AtMostOne;
      };
    },
  ],
  | "cfg::Auth"
  | "cfg::DatabaseConfig"
  | "cfg::BranchConfig"
  | "cfg::Config"
  | "cfg::InstanceConfig"
  | "cfg::JWT"
  | "cfg::Password"
  | "cfg::SCRAM"
  | "cfg::SMTPProviderConfig"
  | "cfg::Trust"
  | "cfg::mTLS"
  | "schema::AccessPolicy"
  | "schema::Alias"
  | "schema::Annotation"
  | "schema::Array"
  | "schema::ArrayExprAlias"
  | "schema::Cast"
  | "schema::Constraint"
  | "schema::Delta"
  | "schema::Extension"
  | "schema::Function"
  | "schema::FutureBehavior"
  | "schema::Global"
  | "schema::Index"
  | "schema::Link"
  | "schema::Migration"
  | "schema::Module"
  | "schema::MultiRange"
  | "schema::MultiRangeExprAlias"
  | "schema::ObjectType"
  | "schema::Operator"
  | "schema::Parameter"
  | "schema::Property"
  | "schema::PseudoType"
  | "schema::Range"
  | "schema::RangeExprAlias"
  | "schema::Rewrite"
  | "schema::ScalarType"
  | "schema::Trigger"
  | "schema::Tuple"
  | "schema::TupleElement"
  | "schema::TupleExprAlias"
  | "std::net::http::Response"
  | "std::net::http::ScheduledRequest"
  | "sys::Branch"
  | "sys::Database"
  | "sys::ExtensionPackage"
  | "sys::ExtensionPackageMigration"
  | "sys::QueryStats"
  | "sys::Role"
>;
const $BaseObject = $.makeType<$BaseObject>(
  _.spec,
  "0d14e49f-d9f9-51f0-b8f4-c432982cbac2",
  _.syntax.literal,
);

const BaseObject: $.$expr_PathNode<
  $.TypeSet<$BaseObject, $.Cardinality.Many>,
  null
> = _.syntax.$PathNode($.$toSet($BaseObject, $.Cardinality.Many), null);

export type $FreeObjectλShape = $.typeutil.flatten<{}>;
type $FreeObject = $.ObjectType<
  "std::FreeObject",
  $FreeObjectλShape,
  null,
  [],
  "std::FreeObject"
>;
const $FreeObject = $.makeType<$FreeObject>(
  _.spec,
  "3b741934-07ef-5b95-b7d6-cdc864fd2ae8",
  _.syntax.literal,
);

const FreeObject: $.$expr_PathNode<
  $.TypeSet<$FreeObject, $.Cardinality.One>,
  null
> = _.syntax.$PathNode($.$toSet($FreeObject, $.Cardinality.One), null);

export type $Object_8ce8c71ee4fa5f73840c22d7eaa58588λShape = $.typeutil.flatten<
  $BaseObjectλShape & {}
>;
type $Object_8ce8c71ee4fa5f73840c22d7eaa58588 = $.ObjectType<
  "std::Object",
  $Object_8ce8c71ee4fa5f73840c22d7eaa58588λShape,
  null,
  [...$BaseObject["__exclusives__"]],
  never
>;
export type $Object = $Object_8ce8c71ee4fa5f73840c22d7eaa58588;
const $Object_8ce8c71ee4fa5f73840c22d7eaa58588 =
  $.makeType<$Object_8ce8c71ee4fa5f73840c22d7eaa58588>(
    _.spec,
    "8ce8c71e-e4fa-5f73-840c-22d7eaa58588",
    _.syntax.literal,
  );

const Object_8ce8c71ee4fa5f73840c22d7eaa58588: $.$expr_PathNode<
  $.TypeSet<$Object_8ce8c71ee4fa5f73840c22d7eaa58588, $.Cardinality.Many>,
  null
> = _.syntax.$PathNode(
  $.$toSet($Object_8ce8c71ee4fa5f73840c22d7eaa58588, $.Cardinality.Many),
  null,
);

type assert_singleλFuncExpr<
  NamedArgs extends {
    message?: _.castMaps.orScalarLiteral<$.TypeSet<$str>>;
  },
  P1 extends _.castMaps.orScalarLiteral<$.TypeSet<$.BaseType>>,
> = $.$expr_Function<
  $.getPrimitiveBaseType<_.castMaps.literalToTypeSet<P1>["__element__"]>,
  $.cardutil.multiplyCardinalities<
    $.cardutil.overrideUpperBound<$.cardutil.paramCardinality<P1>, "One">,
    $.cardutil.optionalParamCardinality<NamedArgs["message"]>
  >
>;
type assert_singleλFuncExpr2<
  P1 extends _.castMaps.orScalarLiteral<$.TypeSet<$.BaseType>>,
> = $.$expr_Function<
  $.getPrimitiveBaseType<_.castMaps.literalToTypeSet<P1>["__element__"]>,
  $.cardutil.overrideUpperBound<$.cardutil.paramCardinality<P1>, "One">
>;
/**
 * Check that the input set contains at most one element, raise
         CardinalityViolationError otherwise.
 */
function assert_single<
  NamedArgs extends {
    message?: _.castMaps.orScalarLiteral<$.TypeSet<$str>>;
  },
  P1 extends _.castMaps.orScalarLiteral<$.TypeSet<$.BaseType>>,
>(namedArgs: NamedArgs, input: P1): assert_singleλFuncExpr<NamedArgs, P1>;
/**
 * Check that the input set contains at most one element, raise
         CardinalityViolationError otherwise.
 */
function assert_single<
  P1 extends _.castMaps.orScalarLiteral<$.TypeSet<$.BaseType>>,
>(input: P1): assert_singleλFuncExpr2<P1>;
function assert_single(...args: any[]) {
  const {
    returnType,
    cardinality,
    args: positionalArgs,
    namedArgs,
  } = _.syntax.$resolveOverload("std::assert_single", args, _.spec, [
    {
      args: [
        {
          typeId: "00000000-0000-0000-0000-000000000001",
          optional: false,
          setoftype: true,
          variadic: false,
        },
      ],
      namedArgs: {
        message: {
          typeId: "00000000-0000-0000-0000-000000000101",
          optional: true,
          setoftype: false,
          variadic: false,
        },
      },
      returnTypeId: "00000000-0000-0000-0000-000000000001",
      returnTypemod: "OptionalType",
      preservesOptionality: true,
    },
  ]);
  return _.syntax.$expressionify({
    __kind__: $.ExpressionKind.Function,
    __element__: returnType,
    __cardinality__: cardinality,
    __name__: "std::assert_single",
    __args__: positionalArgs,
    __namedargs__: namedArgs,
  }) as any;
}

type assert_existsλFuncExpr<
  NamedArgs extends {
    message?: _.castMaps.orScalarLiteral<$.TypeSet<$str>>;
  },
  P1 extends _.castMaps.orScalarLiteral<$.TypeSet<$.BaseType>>,
> = $.$expr_Function<
  $.getPrimitiveBaseType<_.castMaps.literalToTypeSet<P1>["__element__"]>,
  $.cardutil.overrideLowerBound<$.cardutil.paramCardinality<P1>, "One">
>;
type assert_existsλFuncExpr2<
  P1 extends _.castMaps.orScalarLiteral<$.TypeSet<$.BaseType>>,
> = $.$expr_Function<
  $.getPrimitiveBaseType<_.castMaps.literalToTypeSet<P1>["__element__"]>,
  $.cardutil.overrideLowerBound<$.cardutil.paramCardinality<P1>, "One">
>;
/**
 * Check that the input set contains at least one element, raise
         CardinalityViolationError otherwise.
 */
function assert_exists<
  NamedArgs extends {
    message?: _.castMaps.orScalarLiteral<$.TypeSet<$str>>;
  },
  P1 extends _.castMaps.orScalarLiteral<$.TypeSet<$.BaseType>>,
>(namedArgs: NamedArgs, input: P1): assert_existsλFuncExpr<NamedArgs, P1>;
/**
 * Check that the input set contains at least one element, raise
         CardinalityViolationError otherwise.
 */
function assert_exists<
  P1 extends _.castMaps.orScalarLiteral<$.TypeSet<$.BaseType>>,
>(input: P1): assert_existsλFuncExpr2<P1>;
function assert_exists(...args: any[]) {
  const {
    returnType,
    cardinality,
    args: positionalArgs,
    namedArgs,
  } = _.syntax.$resolveOverload("std::assert_exists", args, _.spec, [
    {
      args: [
        {
          typeId: "00000000-0000-0000-0000-000000000001",
          optional: false,
          setoftype: true,
          variadic: false,
        },
      ],
      namedArgs: {
        message: {
          typeId: "00000000-0000-0000-0000-000000000101",
          optional: true,
          setoftype: false,
          variadic: false,
        },
      },
      returnTypeId: "00000000-0000-0000-0000-000000000001",
      returnTypemod: "SetOfType",
    },
  ]);
  return _.syntax.$expressionify({
    __kind__: $.ExpressionKind.Function,
    __element__: returnType,
    __cardinality__: cardinality,
    __name__: "std::assert_exists",
    __args__: positionalArgs,
    __namedargs__: namedArgs,
  }) as any;
}

type assert_distinctλFuncExpr<
  NamedArgs extends {
    message?: _.castMaps.orScalarLiteral<$.TypeSet<$str>>;
  },
  P1 extends _.castMaps.orScalarLiteral<$.TypeSet<$.BaseType>>,
> = $.$expr_Function<
  $.getPrimitiveBaseType<_.castMaps.literalToTypeSet<P1>["__element__"]>,
  $.Cardinality.Many
>;
type assert_distinctλFuncExpr2<
  P1 extends _.castMaps.orScalarLiteral<$.TypeSet<$.BaseType>>,
> = $.$expr_Function<
  $.getPrimitiveBaseType<_.castMaps.literalToTypeSet<P1>["__element__"]>,
  $.Cardinality.Many
>;
/**
 * Check that the input set is a proper set, i.e. all elements
         are unique
 */
function assert_distinct<
  NamedArgs extends {
    message?: _.castMaps.orScalarLiteral<$.TypeSet<$str>>;
  },
  P1 extends _.castMaps.orScalarLiteral<$.TypeSet<$.BaseType>>,
>(namedArgs: NamedArgs, input: P1): assert_distinctλFuncExpr<NamedArgs, P1>;
/**
 * Check that the input set is a proper set, i.e. all elements
         are unique
 */
function assert_distinct<
  P1 extends _.castMaps.orScalarLiteral<$.TypeSet<$.BaseType>>,
>(input: P1): assert_distinctλFuncExpr2<P1>;
function assert_distinct(...args: any[]) {
  const {
    returnType,
    cardinality,
    args: positionalArgs,
    namedArgs,
  } = _.syntax.$resolveOverload("std::assert_distinct", args, _.spec, [
    {
      args: [
        {
          typeId: "00000000-0000-0000-0000-000000000001",
          optional: false,
          setoftype: true,
          variadic: false,
        },
      ],
      namedArgs: {
        message: {
          typeId: "00000000-0000-0000-0000-000000000101",
          optional: true,
          setoftype: false,
          variadic: false,
        },
      },
      returnTypeId: "00000000-0000-0000-0000-000000000001",
      returnTypemod: "SetOfType",
      preservesOptionality: true,
    },
  ]);
  return _.syntax.$expressionify({
    __kind__: $.ExpressionKind.Function,
    __element__: returnType,
    __cardinality__: cardinality,
    __name__: "std::assert_distinct",
    __args__: positionalArgs,
    __namedargs__: namedArgs,
  }) as any;
}

type assertλFuncExpr<
  NamedArgs extends {
    message?: _.castMaps.orScalarLiteral<$.TypeSet<$str>>;
  },
  P1 extends _.castMaps.orScalarLiteral<$.TypeSet<$bool>>,
> = $.$expr_Function<
  $bool,
  $.cardutil.multiplyCardinalities<
    $.cardutil.paramCardinality<P1>,
    $.cardutil.optionalParamCardinality<NamedArgs["message"]>
  >
>;
type assertλFuncExpr2<P1 extends _.castMaps.orScalarLiteral<$.TypeSet<$bool>>> =
  $.$expr_Function<$bool, $.cardutil.paramCardinality<P1>>;
/**
 * Assert that a boolean value is true.
 */
function assert<
  NamedArgs extends {
    message?: _.castMaps.orScalarLiteral<$.TypeSet<$str>>;
  },
  P1 extends _.castMaps.orScalarLiteral<$.TypeSet<$bool>>,
>(namedArgs: NamedArgs, input: P1): assertλFuncExpr<NamedArgs, P1>;
/**
 * Assert that a boolean value is true.
 */
function assert<P1 extends _.castMaps.orScalarLiteral<$.TypeSet<$bool>>>(
  input: P1,
): assertλFuncExpr2<P1>;
function assert(...args: any[]) {
  const {
    returnType,
    cardinality,
    args: positionalArgs,
    namedArgs,
  } = _.syntax.$resolveOverload("std::assert", args, _.spec, [
    {
      args: [
        {
          typeId: "00000000-0000-0000-0000-000000000109",
          optional: false,
          setoftype: false,
          variadic: false,
        },
      ],
      namedArgs: {
        message: {
          typeId: "00000000-0000-0000-0000-000000000101",
          optional: true,
          setoftype: false,
          variadic: false,
        },
      },
      returnTypeId: "00000000-0000-0000-0000-000000000109",
    },
  ]);
  return _.syntax.$expressionify({
    __kind__: $.ExpressionKind.Function,
    __element__: returnType,
    __cardinality__: cardinality,
    __name__: "std::assert",
    __args__: positionalArgs,
    __namedargs__: namedArgs,
  }) as any;
}

type materializedλFuncExpr<
  P1 extends _.castMaps.orScalarLiteral<$.TypeSet<$.BaseType>>,
> = $.$expr_Function<
  $.getPrimitiveBaseType<_.castMaps.literalToTypeSet<P1>["__element__"]>,
  $.cardutil.paramCardinality<P1>
>;
/**
 * Force materialization of a set.
 */
function materialized<
  P1 extends _.castMaps.orScalarLiteral<$.TypeSet<$.BaseType>>,
>(input: P1): materializedλFuncExpr<P1>;
function materialized(...args: any[]) {
  const {
    returnType,
    cardinality,
    args: positionalArgs,
    namedArgs,
  } = _.syntax.$resolveOverload("std::materialized", args, _.spec, [
    {
      args: [
        {
          typeId: "00000000-0000-0000-0000-000000000001",
          optional: false,
          setoftype: false,
          variadic: false,
        },
      ],
      returnTypeId: "00000000-0000-0000-0000-000000000001",
    },
  ]);
  return _.syntax.$expressionify({
    __kind__: $.ExpressionKind.Function,
    __element__: returnType,
    __cardinality__: cardinality,
    __name__: "std::materialized",
    __args__: positionalArgs,
    __namedargs__: namedArgs,
  }) as any;
}

type lenλFuncExpr<P1 extends _.castMaps.orScalarLiteral<$.TypeSet<$str>>> =
  $.$expr_Function<$number, $.cardutil.paramCardinality<P1>>;
type lenλFuncExpr2<P1 extends _.castMaps.orScalarLiteral<$.TypeSet<$bytes>>> =
  $.$expr_Function<$number, $.cardutil.paramCardinality<P1>>;
type lenλFuncExpr3<P1 extends $.TypeSet<$.ArrayType<$.NonArrayType>>> =
  $.$expr_Function<$number, $.cardutil.paramCardinality<P1>>;
/**
 * A polymorphic function to calculate a "length" of its first argument.
 */
function len<P1 extends _.castMaps.orScalarLiteral<$.TypeSet<$str>>>(
  str: P1,
): lenλFuncExpr<P1>;
/**
 * A polymorphic function to calculate a "length" of its first argument.
 */
function len<P1 extends _.castMaps.orScalarLiteral<$.TypeSet<$bytes>>>(
  bytes: P1,
): lenλFuncExpr2<P1>;
/**
 * A polymorphic function to calculate a "length" of its first argument.
 */
function len<P1 extends $.TypeSet<$.ArrayType<$.NonArrayType>>>(
  array: P1,
): lenλFuncExpr3<P1>;
function len(...args: any[]) {
  const {
    returnType,
    cardinality,
    args: positionalArgs,
    namedArgs,
  } = _.syntax.$resolveOverload("std::len", args, _.spec, [
    {
      args: [
        {
          typeId: "00000000-0000-0000-0000-000000000101",
          optional: false,
          setoftype: false,
          variadic: false,
        },
      ],
      returnTypeId: "00000000-0000-0000-0000-0000000001ff",
    },
    {
      args: [
        {
          typeId: "00000000-0000-0000-0000-000000000102",
          optional: false,
          setoftype: false,
          variadic: false,
        },
      ],
      returnTypeId: "00000000-0000-0000-0000-0000000001ff",
    },
    {
      args: [
        {
          typeId: "a6f5468c-c2a6-5852-8f73-57484b1c6831",
          optional: false,
          setoftype: false,
          variadic: false,
        },
      ],
      returnTypeId: "00000000-0000-0000-0000-0000000001ff",
    },
  ]);
  return _.syntax.$expressionify({
    __kind__: $.ExpressionKind.Function,
    __element__: returnType,
    __cardinality__: cardinality,
    __name__: "std::len",
    __args__: positionalArgs,
    __namedargs__: namedArgs,
  }) as any;
}

type sumλFuncExpr<P1 extends _.castMaps.orScalarLiteral<$.TypeSet<$bigint>>> =
  $.$expr_Function<$bigint, $.Cardinality.One>;
type sumλFuncExpr2<P1 extends _.castMaps.orScalarLiteral<$.TypeSet<$number>>> =
  $.$expr_Function<$number, $.Cardinality.One>;
type sumλFuncExpr3<
  P1 extends _.castMaps.orScalarLiteral<$.TypeSet<$decimalλICastableTo>>,
> = $.$expr_Function<$decimal, $.Cardinality.One>;
/**
 * Return the sum of the set of numbers.
 */
function sum<P1 extends _.castMaps.orScalarLiteral<$.TypeSet<$bigint>>>(
  s: P1,
): sumλFuncExpr<P1>;
/**
 * Return the sum of the set of numbers.
 */
function sum<P1 extends _.castMaps.orScalarLiteral<$.TypeSet<$number>>>(
  s: P1,
): sumλFuncExpr2<P1>;
/**
 * Return the sum of the set of numbers.
 */
function sum<
  P1 extends _.castMaps.orScalarLiteral<$.TypeSet<$decimalλICastableTo>>,
>(s: P1): sumλFuncExpr3<P1>;
function sum(...args: any[]) {
  const {
    returnType,
    cardinality,
    args: positionalArgs,
    namedArgs,
  } = _.syntax.$resolveOverload("std::sum", args, _.spec, [
    {
      args: [
        {
          typeId: "00000000-0000-0000-0000-000000000110",
          optional: false,
          setoftype: true,
          variadic: false,
        },
      ],
      returnTypeId: "00000000-0000-0000-0000-000000000110",
    },
    {
      args: [
        {
          typeId: "00000000-0000-0000-0000-0000000001ff",
          optional: false,
          setoftype: true,
          variadic: false,
        },
      ],
      returnTypeId: "00000000-0000-0000-0000-0000000001ff",
    },
    {
      args: [
        {
          typeId: "00000000-0000-0000-0000-000000000108",
          optional: false,
          setoftype: true,
          variadic: false,
        },
      ],
      returnTypeId: "00000000-0000-0000-0000-000000000108",
    },
  ]);
  return _.syntax.$expressionify({
    __kind__: $.ExpressionKind.Function,
    __element__: returnType,
    __cardinality__: cardinality,
    __name__: "std::sum",
    __args__: positionalArgs,
    __namedargs__: namedArgs,
  }) as any;
}

type countλFuncExpr<
  P1 extends _.castMaps.orScalarLiteral<$.TypeSet<$.BaseType>>,
> = $.$expr_Function<$number, $.Cardinality.One>;
/**
 * Return the number of elements in a set.
 */
function count<P1 extends _.castMaps.orScalarLiteral<$.TypeSet<$.BaseType>>>(
  s: P1,
): countλFuncExpr<P1>;
function count(...args: any[]) {
  const {
    returnType,
    cardinality,
    args: positionalArgs,
    namedArgs,
  } = _.syntax.$resolveOverload("std::count", args, _.spec, [
    {
      args: [
        {
          typeId: "00000000-0000-0000-0000-000000000001",
          optional: false,
          setoftype: true,
          variadic: false,
        },
      ],
      returnTypeId: "00000000-0000-0000-0000-0000000001ff",
    },
  ]);
  return _.syntax.$expressionify({
    __kind__: $.ExpressionKind.Function,
    __element__: returnType,
    __cardinality__: cardinality,
    __name__: "std::count",
    __args__: positionalArgs,
    __namedargs__: namedArgs,
  }) as any;
}

type randomλFuncExpr = $.$expr_Function<$number, $.Cardinality.One>;
/**
 * Return a pseudo-random number in the range `0.0 <= x < 1.0`
 */
function random(): randomλFuncExpr;
function random(...args: any[]) {
  const {
    returnType,
    cardinality,
    args: positionalArgs,
    namedArgs,
  } = _.syntax.$resolveOverload("std::random", args, _.spec, [
    { args: [], returnTypeId: "00000000-0000-0000-0000-0000000001ff" },
  ]);
  return _.syntax.$expressionify({
    __kind__: $.ExpressionKind.Function,
    __element__: returnType,
    __cardinality__: cardinality,
    __name__: "std::random",
    __args__: positionalArgs,
    __namedargs__: namedArgs,
  }) as any;
}

type minλFuncExpr<P1 extends _.castMaps.orScalarLiteral<$.TypeSet<$anyreal>>> =
  $.$expr_Function<
    $anyreal,
    $.cardutil.overrideUpperBound<$.cardutil.paramCardinality<P1>, "One">
  >;
type minλFuncExpr2<
  P1 extends _.castMaps.orScalarLiteral<$.TypeSet<$.EnumType>>,
> = $.$expr_Function<
  $.EnumType,
  $.cardutil.overrideUpperBound<$.cardutil.paramCardinality<P1>, "One">
>;
type minλFuncExpr3<P1 extends _.castMaps.orScalarLiteral<$.TypeSet<$str>>> =
  $.$expr_Function<
    $str,
    $.cardutil.overrideUpperBound<$.cardutil.paramCardinality<P1>, "One">
  >;
type minλFuncExpr4<
  P1 extends _.castMaps.orScalarLiteral<$.TypeSet<$datetime>>,
> = $.$expr_Function<
  $datetime,
  $.cardutil.overrideUpperBound<$.cardutil.paramCardinality<P1>, "One">
>;
type minλFuncExpr5<
  P1 extends _.castMaps.orScalarLiteral<$.TypeSet<$duration>>,
> = $.$expr_Function<
  $duration,
  $.cardutil.overrideUpperBound<$.cardutil.paramCardinality<P1>, "One">
>;
type minλFuncExpr6<
  P1 extends _.castMaps.orScalarLiteral<$.TypeSet<_stdcal.$local_date>>,
> = $.$expr_Function<
  _stdcal.$local_date,
  $.cardutil.overrideUpperBound<$.cardutil.paramCardinality<P1>, "One">
>;
type minλFuncExpr7<
  P1 extends _.castMaps.orScalarLiteral<$.TypeSet<_stdcal.$local_time>>,
> = $.$expr_Function<
  _stdcal.$local_time,
  $.cardutil.overrideUpperBound<$.cardutil.paramCardinality<P1>, "One">
>;
type minλFuncExpr8<
  P1 extends _.castMaps.orScalarLiteral<$.TypeSet<_stdcal.$date_duration>>,
> = $.$expr_Function<
  _stdcal.$date_duration,
  $.cardutil.overrideUpperBound<$.cardutil.paramCardinality<P1>, "One">
>;
type minλFuncExpr9<
  P1 extends $.TypeSet<$.ArrayType<_stdcal.$local_datetimeλICastableTo>>,
> = $.$expr_Function<
  $.ArrayType<_stdcal.$local_datetime>,
  $.cardutil.overrideUpperBound<$.cardutil.paramCardinality<P1>, "One">
>;
type minλFuncExpr10<P1 extends $.TypeSet<$.ArrayType<_stdcal.$local_date>>> =
  $.$expr_Function<
    $.ArrayType<_stdcal.$local_date>,
    $.cardutil.overrideUpperBound<$.cardutil.paramCardinality<P1>, "One">
  >;
type minλFuncExpr11<P1 extends $.TypeSet<$.ArrayType<_stdcal.$local_time>>> =
  $.$expr_Function<
    $.ArrayType<_stdcal.$local_time>,
    $.cardutil.overrideUpperBound<$.cardutil.paramCardinality<P1>, "One">
  >;
type minλFuncExpr12<
  P1 extends $.TypeSet<$.ArrayType<_stdcal.$relative_durationλICastableTo>>,
> = $.$expr_Function<
  $.ArrayType<_stdcal.$relative_duration>,
  $.cardutil.overrideUpperBound<$.cardutil.paramCardinality<P1>, "One">
>;
type minλFuncExpr13<P1 extends $.TypeSet<$.ArrayType<_stdcal.$date_duration>>> =
  $.$expr_Function<
    $.ArrayType<_stdcal.$date_duration>,
    $.cardutil.overrideUpperBound<$.cardutil.paramCardinality<P1>, "One">
  >;
type minλFuncExpr14<
  P1 extends _.castMaps.orScalarLiteral<
    $.TypeSet<_stdcal.$local_datetimeλICastableTo>
  >,
> = $.$expr_Function<
  _stdcal.$local_datetime,
  $.cardutil.overrideUpperBound<$.cardutil.paramCardinality<P1>, "One">
>;
type minλFuncExpr15<
  P1 extends _.castMaps.orScalarLiteral<
    $.TypeSet<_stdcal.$relative_durationλICastableTo>
  >,
> = $.$expr_Function<
  _stdcal.$relative_duration,
  $.cardutil.overrideUpperBound<$.cardutil.paramCardinality<P1>, "One">
>;
type minλFuncExpr16<
  P1 extends _.castMaps.orScalarLiteral<$.TypeSet<$.BaseType>>,
> = $.$expr_Function<
  $.getPrimitiveBaseType<_.castMaps.literalToTypeSet<P1>["__element__"]>,
  $.cardutil.overrideUpperBound<$.cardutil.paramCardinality<P1>, "One">
>;
/**
 * Return the smallest value of the input set.
 */
function min<P1 extends _.castMaps.orScalarLiteral<$.TypeSet<$anyreal>>>(
  vals: P1,
): minλFuncExpr<P1>;
/**
 * Return the smallest value of the input set.
 */
function min<P1 extends _.castMaps.orScalarLiteral<$.TypeSet<$.EnumType>>>(
  vals: P1,
): minλFuncExpr2<P1>;
/**
 * Return the smallest value of the input set.
 */
function min<P1 extends _.castMaps.orScalarLiteral<$.TypeSet<$str>>>(
  vals: P1,
): minλFuncExpr3<P1>;
/**
 * Return the smallest value of the input set.
 */
function min<P1 extends _.castMaps.orScalarLiteral<$.TypeSet<$datetime>>>(
  vals: P1,
): minλFuncExpr4<P1>;
/**
 * Return the smallest value of the input set.
 */
function min<P1 extends _.castMaps.orScalarLiteral<$.TypeSet<$duration>>>(
  vals: P1,
): minλFuncExpr5<P1>;
/**
 * Return the smallest value of the input set.
 */
function min<
  P1 extends _.castMaps.orScalarLiteral<$.TypeSet<_stdcal.$local_date>>,
>(vals: P1): minλFuncExpr6<P1>;
/**
 * Return the smallest value of the input set.
 */
function min<
  P1 extends _.castMaps.orScalarLiteral<$.TypeSet<_stdcal.$local_time>>,
>(vals: P1): minλFuncExpr7<P1>;
/**
 * Return the smallest value of the input set.
 */
function min<
  P1 extends _.castMaps.orScalarLiteral<$.TypeSet<_stdcal.$date_duration>>,
>(vals: P1): minλFuncExpr8<P1>;
/**
 * Return the smallest value of the input set.
 */
function min<
  P1 extends $.TypeSet<$.ArrayType<_stdcal.$local_datetimeλICastableTo>>,
>(vals: P1): minλFuncExpr9<P1>;
/**
 * Return the smallest value of the input set.
 */
function min<P1 extends $.TypeSet<$.ArrayType<_stdcal.$local_date>>>(
  vals: P1,
): minλFuncExpr10<P1>;
/**
 * Return the smallest value of the input set.
 */
function min<P1 extends $.TypeSet<$.ArrayType<_stdcal.$local_time>>>(
  vals: P1,
): minλFuncExpr11<P1>;
/**
 * Return the smallest value of the input set.
 */
function min<
  P1 extends $.TypeSet<$.ArrayType<_stdcal.$relative_durationλICastableTo>>,
>(vals: P1): minλFuncExpr12<P1>;
/**
 * Return the smallest value of the input set.
 */
function min<P1 extends $.TypeSet<$.ArrayType<_stdcal.$date_duration>>>(
  vals: P1,
): minλFuncExpr13<P1>;
/**
 * Return the smallest value of the input set.
 */
function min<
  P1 extends _.castMaps.orScalarLiteral<
    $.TypeSet<_stdcal.$local_datetimeλICastableTo>
  >,
>(vals: P1): minλFuncExpr14<P1>;
/**
 * Return the smallest value of the input set.
 */
function min<
  P1 extends _.castMaps.orScalarLiteral<
    $.TypeSet<_stdcal.$relative_durationλICastableTo>
  >,
>(vals: P1): minλFuncExpr15<P1>;
/**
 * Return the smallest value of the input set.
 */
function min<P1 extends _.castMaps.orScalarLiteral<$.TypeSet<$.BaseType>>>(
  vals: P1,
): minλFuncExpr16<P1>;
function min(...args: any[]) {
  const {
    returnType,
    cardinality,
    args: positionalArgs,
    namedArgs,
  } = _.syntax.$resolveOverload("std::min", args, _.spec, [
    {
      args: [
        {
          typeId: "04976545-1176-5536-8673-c9f7d18d581b",
          optional: false,
          setoftype: true,
          variadic: false,
        },
      ],
      returnTypeId: "04976545-1176-5536-8673-c9f7d18d581b",
      returnTypemod: "OptionalType",
      preservesOptionality: true,
    },
    {
      args: [
        {
          typeId: "48896eaf-b8af-5f80-9073-0884475d6ee5",
          optional: false,
          setoftype: true,
          variadic: false,
        },
      ],
      returnTypeId: "48896eaf-b8af-5f80-9073-0884475d6ee5",
      returnTypemod: "OptionalType",
      preservesOptionality: true,
    },
    {
      args: [
        {
          typeId: "00000000-0000-0000-0000-000000000101",
          optional: false,
          setoftype: true,
          variadic: false,
        },
      ],
      returnTypeId: "00000000-0000-0000-0000-000000000101",
      returnTypemod: "OptionalType",
      preservesOptionality: true,
    },
    {
      args: [
        {
          typeId: "00000000-0000-0000-0000-00000000010a",
          optional: false,
          setoftype: true,
          variadic: false,
        },
      ],
      returnTypeId: "00000000-0000-0000-0000-00000000010a",
      returnTypemod: "OptionalType",
      preservesOptionality: true,
    },
    {
      args: [
        {
          typeId: "00000000-0000-0000-0000-00000000010e",
          optional: false,
          setoftype: true,
          variadic: false,
        },
      ],
      returnTypeId: "00000000-0000-0000-0000-00000000010e",
      returnTypemod: "OptionalType",
      preservesOptionality: true,
    },
    {
      args: [
        {
          typeId: "00000000-0000-0000-0000-00000000010c",
          optional: false,
          setoftype: true,
          variadic: false,
        },
      ],
      returnTypeId: "00000000-0000-0000-0000-00000000010c",
      returnTypemod: "OptionalType",
      preservesOptionality: true,
    },
    {
      args: [
        {
          typeId: "00000000-0000-0000-0000-00000000010d",
          optional: false,
          setoftype: true,
          variadic: false,
        },
      ],
      returnTypeId: "00000000-0000-0000-0000-00000000010d",
      returnTypemod: "OptionalType",
      preservesOptionality: true,
    },
    {
      args: [
        {
          typeId: "00000000-0000-0000-0000-000000000112",
          optional: false,
          setoftype: true,
          variadic: false,
        },
      ],
      returnTypeId: "00000000-0000-0000-0000-000000000112",
      returnTypemod: "OptionalType",
      preservesOptionality: true,
    },
    {
      args: [
        {
          typeId: "c05958e2-0753-5a63-b7c4-db3626b0d6b5",
          optional: false,
          setoftype: true,
          variadic: false,
        },
      ],
      returnTypeId: "c05958e2-0753-5a63-b7c4-db3626b0d6b5",
      returnTypemod: "OptionalType",
      preservesOptionality: true,
    },
    {
      args: [
        {
          typeId: "8571477b-d954-5809-b360-4b1f03253699",
          optional: false,
          setoftype: true,
          variadic: false,
        },
      ],
      returnTypeId: "8571477b-d954-5809-b360-4b1f03253699",
      returnTypemod: "OptionalType",
      preservesOptionality: true,
    },
    {
      args: [
        {
          typeId: "75ba1b6e-7f51-5c49-b955-e32f20e4f72e",
          optional: false,
          setoftype: true,
          variadic: false,
        },
      ],
      returnTypeId: "75ba1b6e-7f51-5c49-b955-e32f20e4f72e",
      returnTypemod: "OptionalType",
      preservesOptionality: true,
    },
    {
      args: [
        {
          typeId: "d50ba716-d5fd-5f69-8afe-9c82fe7436d9",
          optional: false,
          setoftype: true,
          variadic: false,
        },
      ],
      returnTypeId: "d50ba716-d5fd-5f69-8afe-9c82fe7436d9",
      returnTypemod: "OptionalType",
      preservesOptionality: true,
    },
    {
      args: [
        {
          typeId: "5b410a6f-a231-524b-8682-4ce2020c1d98",
          optional: false,
          setoftype: true,
          variadic: false,
        },
      ],
      returnTypeId: "5b410a6f-a231-524b-8682-4ce2020c1d98",
      returnTypemod: "OptionalType",
      preservesOptionality: true,
    },
    {
      args: [
        {
          typeId: "00000000-0000-0000-0000-00000000010b",
          optional: false,
          setoftype: true,
          variadic: false,
        },
      ],
      returnTypeId: "00000000-0000-0000-0000-00000000010b",
      returnTypemod: "OptionalType",
      preservesOptionality: true,
    },
    {
      args: [
        {
          typeId: "00000000-0000-0000-0000-000000000111",
          optional: false,
          setoftype: true,
          variadic: false,
        },
      ],
      returnTypeId: "00000000-0000-0000-0000-000000000111",
      returnTypemod: "OptionalType",
      preservesOptionality: true,
    },
    {
      args: [
        {
          typeId: "00000000-0000-0000-0000-000000000001",
          optional: false,
          setoftype: true,
          variadic: false,
        },
      ],
      returnTypeId: "00000000-0000-0000-0000-000000000001",
      returnTypemod: "OptionalType",
      preservesOptionality: true,
    },
  ]);
  return _.syntax.$expressionify({
    __kind__: $.ExpressionKind.Function,
    __element__: returnType,
    __cardinality__: cardinality,
    __name__: "std::min",
    __args__: positionalArgs,
    __namedargs__: namedArgs,
  }) as any;
}

type maxλFuncExpr<P1 extends _.castMaps.orScalarLiteral<$.TypeSet<$anyreal>>> =
  $.$expr_Function<
    $anyreal,
    $.cardutil.overrideUpperBound<$.cardutil.paramCardinality<P1>, "One">
  >;
type maxλFuncExpr2<
  P1 extends _.castMaps.orScalarLiteral<$.TypeSet<$.EnumType>>,
> = $.$expr_Function<
  $.EnumType,
  $.cardutil.overrideUpperBound<$.cardutil.paramCardinality<P1>, "One">
>;
type maxλFuncExpr3<P1 extends _.castMaps.orScalarLiteral<$.TypeSet<$str>>> =
  $.$expr_Function<
    $str,
    $.cardutil.overrideUpperBound<$.cardutil.paramCardinality<P1>, "One">
  >;
type maxλFuncExpr4<
  P1 extends _.castMaps.orScalarLiteral<$.TypeSet<$datetime>>,
> = $.$expr_Function<
  $datetime,
  $.cardutil.overrideUpperBound<$.cardutil.paramCardinality<P1>, "One">
>;
type maxλFuncExpr5<
  P1 extends _.castMaps.orScalarLiteral<$.TypeSet<$duration>>,
> = $.$expr_Function<
  $duration,
  $.cardutil.overrideUpperBound<$.cardutil.paramCardinality<P1>, "One">
>;
type maxλFuncExpr6<
  P1 extends _.castMaps.orScalarLiteral<$.TypeSet<_stdcal.$local_date>>,
> = $.$expr_Function<
  _stdcal.$local_date,
  $.cardutil.overrideUpperBound<$.cardutil.paramCardinality<P1>, "One">
>;
type maxλFuncExpr7<
  P1 extends _.castMaps.orScalarLiteral<$.TypeSet<_stdcal.$local_time>>,
> = $.$expr_Function<
  _stdcal.$local_time,
  $.cardutil.overrideUpperBound<$.cardutil.paramCardinality<P1>, "One">
>;
type maxλFuncExpr8<
  P1 extends _.castMaps.orScalarLiteral<$.TypeSet<_stdcal.$date_duration>>,
> = $.$expr_Function<
  _stdcal.$date_duration,
  $.cardutil.overrideUpperBound<$.cardutil.paramCardinality<P1>, "One">
>;
type maxλFuncExpr9<
  P1 extends $.TypeSet<$.ArrayType<_stdcal.$local_datetimeλICastableTo>>,
> = $.$expr_Function<
  $.ArrayType<_stdcal.$local_datetime>,
  $.cardutil.overrideUpperBound<$.cardutil.paramCardinality<P1>, "One">
>;
type maxλFuncExpr10<P1 extends $.TypeSet<$.ArrayType<_stdcal.$local_date>>> =
  $.$expr_Function<
    $.ArrayType<_stdcal.$local_date>,
    $.cardutil.overrideUpperBound<$.cardutil.paramCardinality<P1>, "One">
  >;
type maxλFuncExpr11<P1 extends $.TypeSet<$.ArrayType<_stdcal.$local_time>>> =
  $.$expr_Function<
    $.ArrayType<_stdcal.$local_time>,
    $.cardutil.overrideUpperBound<$.cardutil.paramCardinality<P1>, "One">
  >;
type maxλFuncExpr12<
  P1 extends $.TypeSet<$.ArrayType<_stdcal.$relative_durationλICastableTo>>,
> = $.$expr_Function<
  $.ArrayType<_stdcal.$relative_duration>,
  $.cardutil.overrideUpperBound<$.cardutil.paramCardinality<P1>, "One">
>;
type maxλFuncExpr13<P1 extends $.TypeSet<$.ArrayType<_stdcal.$date_duration>>> =
  $.$expr_Function<
    $.ArrayType<_stdcal.$date_duration>,
    $.cardutil.overrideUpperBound<$.cardutil.paramCardinality<P1>, "One">
  >;
type maxλFuncExpr14<
  P1 extends _.castMaps.orScalarLiteral<
    $.TypeSet<_stdcal.$local_datetimeλICastableTo>
  >,
> = $.$expr_Function<
  _stdcal.$local_datetime,
  $.cardutil.overrideUpperBound<$.cardutil.paramCardinality<P1>, "One">
>;
type maxλFuncExpr15<
  P1 extends _.castMaps.orScalarLiteral<
    $.TypeSet<_stdcal.$relative_durationλICastableTo>
  >,
> = $.$expr_Function<
  _stdcal.$relative_duration,
  $.cardutil.overrideUpperBound<$.cardutil.paramCardinality<P1>, "One">
>;
type maxλFuncExpr16<
  P1 extends _.castMaps.orScalarLiteral<$.TypeSet<$.BaseType>>,
> = $.$expr_Function<
  $.getPrimitiveBaseType<_.castMaps.literalToTypeSet<P1>["__element__"]>,
  $.cardutil.overrideUpperBound<$.cardutil.paramCardinality<P1>, "One">
>;
/**
 * Return the greatest value of the input set.
 */
function max<P1 extends _.castMaps.orScalarLiteral<$.TypeSet<$anyreal>>>(
  vals: P1,
): maxλFuncExpr<P1>;
/**
 * Return the greatest value of the input set.
 */
function max<P1 extends _.castMaps.orScalarLiteral<$.TypeSet<$.EnumType>>>(
  vals: P1,
): maxλFuncExpr2<P1>;
/**
 * Return the greatest value of the input set.
 */
function max<P1 extends _.castMaps.orScalarLiteral<$.TypeSet<$str>>>(
  vals: P1,
): maxλFuncExpr3<P1>;
/**
 * Return the greatest value of the input set.
 */
function max<P1 extends _.castMaps.orScalarLiteral<$.TypeSet<$datetime>>>(
  vals: P1,
): maxλFuncExpr4<P1>;
/**
 * Return the greatest value of the input set.
 */
function max<P1 extends _.castMaps.orScalarLiteral<$.TypeSet<$duration>>>(
  vals: P1,
): maxλFuncExpr5<P1>;
/**
 * Return the smallest value of the input set.
 */
function max<
  P1 extends _.castMaps.orScalarLiteral<$.TypeSet<_stdcal.$local_date>>,
>(vals: P1): maxλFuncExpr6<P1>;
/**
 * Return the smallest value of the input set.
 */
function max<
  P1 extends _.castMaps.orScalarLiteral<$.TypeSet<_stdcal.$local_time>>,
>(vals: P1): maxλFuncExpr7<P1>;
/**
 * Return the greatest value of the input set.
 */
function max<
  P1 extends _.castMaps.orScalarLiteral<$.TypeSet<_stdcal.$date_duration>>,
>(vals: P1): maxλFuncExpr8<P1>;
/**
 * Return the smallest value of the input set.
 */
function max<
  P1 extends $.TypeSet<$.ArrayType<_stdcal.$local_datetimeλICastableTo>>,
>(vals: P1): maxλFuncExpr9<P1>;
/**
 * Return the smallest value of the input set.
 */
function max<P1 extends $.TypeSet<$.ArrayType<_stdcal.$local_date>>>(
  vals: P1,
): maxλFuncExpr10<P1>;
/**
 * Return the smallest value of the input set.
 */
function max<P1 extends $.TypeSet<$.ArrayType<_stdcal.$local_time>>>(
  vals: P1,
): maxλFuncExpr11<P1>;
/**
 * Return the smallest value of the input set.
 */
function max<
  P1 extends $.TypeSet<$.ArrayType<_stdcal.$relative_durationλICastableTo>>,
>(vals: P1): maxλFuncExpr12<P1>;
/**
 * Return the smallest value of the input set.
 */
function max<P1 extends $.TypeSet<$.ArrayType<_stdcal.$date_duration>>>(
  vals: P1,
): maxλFuncExpr13<P1>;
/**
 * Return the smallest value of the input set.
 */
function max<
  P1 extends _.castMaps.orScalarLiteral<
    $.TypeSet<_stdcal.$local_datetimeλICastableTo>
  >,
>(vals: P1): maxλFuncExpr14<P1>;
/**
 * Return the greatest value of the input set.
 */
function max<
  P1 extends _.castMaps.orScalarLiteral<
    $.TypeSet<_stdcal.$relative_durationλICastableTo>
  >,
>(vals: P1): maxλFuncExpr15<P1>;
/**
 * Return the greatest value of the input set.
 */
function max<P1 extends _.castMaps.orScalarLiteral<$.TypeSet<$.BaseType>>>(
  vals: P1,
): maxλFuncExpr16<P1>;
function max(...args: any[]) {
  const {
    returnType,
    cardinality,
    args: positionalArgs,
    namedArgs,
  } = _.syntax.$resolveOverload("std::max", args, _.spec, [
    {
      args: [
        {
          typeId: "04976545-1176-5536-8673-c9f7d18d581b",
          optional: false,
          setoftype: true,
          variadic: false,
        },
      ],
      returnTypeId: "04976545-1176-5536-8673-c9f7d18d581b",
      returnTypemod: "OptionalType",
      preservesOptionality: true,
    },
    {
      args: [
        {
          typeId: "48896eaf-b8af-5f80-9073-0884475d6ee5",
          optional: false,
          setoftype: true,
          variadic: false,
        },
      ],
      returnTypeId: "48896eaf-b8af-5f80-9073-0884475d6ee5",
      returnTypemod: "OptionalType",
      preservesOptionality: true,
    },
    {
      args: [
        {
          typeId: "00000000-0000-0000-0000-000000000101",
          optional: false,
          setoftype: true,
          variadic: false,
        },
      ],
      returnTypeId: "00000000-0000-0000-0000-000000000101",
      returnTypemod: "OptionalType",
      preservesOptionality: true,
    },
    {
      args: [
        {
          typeId: "00000000-0000-0000-0000-00000000010a",
          optional: false,
          setoftype: true,
          variadic: false,
        },
      ],
      returnTypeId: "00000000-0000-0000-0000-00000000010a",
      returnTypemod: "OptionalType",
      preservesOptionality: true,
    },
    {
      args: [
        {
          typeId: "00000000-0000-0000-0000-00000000010e",
          optional: false,
          setoftype: true,
          variadic: false,
        },
      ],
      returnTypeId: "00000000-0000-0000-0000-00000000010e",
      returnTypemod: "OptionalType",
      preservesOptionality: true,
    },
    {
      args: [
        {
          typeId: "00000000-0000-0000-0000-00000000010c",
          optional: false,
          setoftype: true,
          variadic: false,
        },
      ],
      returnTypeId: "00000000-0000-0000-0000-00000000010c",
      returnTypemod: "OptionalType",
      preservesOptionality: true,
    },
    {
      args: [
        {
          typeId: "00000000-0000-0000-0000-00000000010d",
          optional: false,
          setoftype: true,
          variadic: false,
        },
      ],
      returnTypeId: "00000000-0000-0000-0000-00000000010d",
      returnTypemod: "OptionalType",
      preservesOptionality: true,
    },
    {
      args: [
        {
          typeId: "00000000-0000-0000-0000-000000000112",
          optional: false,
          setoftype: true,
          variadic: false,
        },
      ],
      returnTypeId: "00000000-0000-0000-0000-000000000112",
      returnTypemod: "OptionalType",
      preservesOptionality: true,
    },
    {
      args: [
        {
          typeId: "c05958e2-0753-5a63-b7c4-db3626b0d6b5",
          optional: false,
          setoftype: true,
          variadic: false,
        },
      ],
      returnTypeId: "c05958e2-0753-5a63-b7c4-db3626b0d6b5",
      returnTypemod: "OptionalType",
      preservesOptionality: true,
    },
    {
      args: [
        {
          typeId: "8571477b-d954-5809-b360-4b1f03253699",
          optional: false,
          setoftype: true,
          variadic: false,
        },
      ],
      returnTypeId: "8571477b-d954-5809-b360-4b1f03253699",
      returnTypemod: "OptionalType",
      preservesOptionality: true,
    },
    {
      args: [
        {
          typeId: "75ba1b6e-7f51-5c49-b955-e32f20e4f72e",
          optional: false,
          setoftype: true,
          variadic: false,
        },
      ],
      returnTypeId: "75ba1b6e-7f51-5c49-b955-e32f20e4f72e",
      returnTypemod: "OptionalType",
      preservesOptionality: true,
    },
    {
      args: [
        {
          typeId: "d50ba716-d5fd-5f69-8afe-9c82fe7436d9",
          optional: false,
          setoftype: true,
          variadic: false,
        },
      ],
      returnTypeId: "d50ba716-d5fd-5f69-8afe-9c82fe7436d9",
      returnTypemod: "OptionalType",
      preservesOptionality: true,
    },
    {
      args: [
        {
          typeId: "5b410a6f-a231-524b-8682-4ce2020c1d98",
          optional: false,
          setoftype: true,
          variadic: false,
        },
      ],
      returnTypeId: "5b410a6f-a231-524b-8682-4ce2020c1d98",
      returnTypemod: "OptionalType",
      preservesOptionality: true,
    },
    {
      args: [
        {
          typeId: "00000000-0000-0000-0000-00000000010b",
          optional: false,
          setoftype: true,
          variadic: false,
        },
      ],
      returnTypeId: "00000000-0000-0000-0000-00000000010b",
      returnTypemod: "OptionalType",
      preservesOptionality: true,
    },
    {
      args: [
        {
          typeId: "00000000-0000-0000-0000-000000000111",
          optional: false,
          setoftype: true,
          variadic: false,
        },
      ],
      returnTypeId: "00000000-0000-0000-0000-000000000111",
      returnTypemod: "OptionalType",
      preservesOptionality: true,
    },
    {
      args: [
        {
          typeId: "00000000-0000-0000-0000-000000000001",
          optional: false,
          setoftype: true,
          variadic: false,
        },
      ],
      returnTypeId: "00000000-0000-0000-0000-000000000001",
      returnTypemod: "OptionalType",
      preservesOptionality: true,
    },
  ]);
  return _.syntax.$expressionify({
    __kind__: $.ExpressionKind.Function,
    __element__: returnType,
    __cardinality__: cardinality,
    __name__: "std::max",
    __args__: positionalArgs,
    __namedargs__: namedArgs,
  }) as any;
}

type allλFuncExpr<P1 extends _.castMaps.orScalarLiteral<$.TypeSet<$bool>>> =
  $.$expr_Function<$bool, $.Cardinality.One>;
/**
 * Generalized boolean `AND` applied to the set of *values*.
 */
function all<P1 extends _.castMaps.orScalarLiteral<$.TypeSet<$bool>>>(
  vals: P1,
): allλFuncExpr<P1>;
function all(...args: any[]) {
  const {
    returnType,
    cardinality,
    args: positionalArgs,
    namedArgs,
  } = _.syntax.$resolveOverload("std::all", args, _.spec, [
    {
      args: [
        {
          typeId: "00000000-0000-0000-0000-000000000109",
          optional: false,
          setoftype: true,
          variadic: false,
        },
      ],
      returnTypeId: "00000000-0000-0000-0000-000000000109",
    },
  ]);
  return _.syntax.$expressionify({
    __kind__: $.ExpressionKind.Function,
    __element__: returnType,
    __cardinality__: cardinality,
    __name__: "std::all",
    __args__: positionalArgs,
    __namedargs__: namedArgs,
  }) as any;
}

type anyλFuncExpr<P1 extends _.castMaps.orScalarLiteral<$.TypeSet<$bool>>> =
  $.$expr_Function<$bool, $.Cardinality.One>;
/**
 * Generalized boolean `OR` applied to the set of *values*.
 */
function any<P1 extends _.castMaps.orScalarLiteral<$.TypeSet<$bool>>>(
  vals: P1,
): anyλFuncExpr<P1>;
function any(...args: any[]) {
  const {
    returnType,
    cardinality,
    args: positionalArgs,
    namedArgs,
  } = _.syntax.$resolveOverload("std::any", args, _.spec, [
    {
      args: [
        {
          typeId: "00000000-0000-0000-0000-000000000109",
          optional: false,
          setoftype: true,
          variadic: false,
        },
      ],
      returnTypeId: "00000000-0000-0000-0000-000000000109",
    },
  ]);
  return _.syntax.$expressionify({
    __kind__: $.ExpressionKind.Function,
    __element__: returnType,
    __cardinality__: cardinality,
    __name__: "std::any",
    __args__: positionalArgs,
    __namedargs__: namedArgs,
  }) as any;
}

type enumerateλFuncExpr<
  P1 extends _.castMaps.orScalarLiteral<$.TypeSet<$.BaseType>>,
> = $.$expr_Function<
  $.TupleType<
    [
      $int64,
      $.getPrimitiveBaseType<_.castMaps.literalToTypeSet<P1>["__element__"]>,
    ]
  >,
  $.Cardinality.Many
>;
/**
 * Return a set of tuples of the form `(index, element)`.
 */
function enumerate<
  P1 extends _.castMaps.orScalarLiteral<$.TypeSet<$.BaseType>>,
>(vals: P1): enumerateλFuncExpr<P1>;
function enumerate(...args: any[]) {
  const {
    returnType,
    cardinality,
    args: positionalArgs,
    namedArgs,
  } = _.syntax.$resolveOverload("std::enumerate", args, _.spec, [
    {
      args: [
        {
          typeId: "00000000-0000-0000-0000-000000000001",
          optional: false,
          setoftype: true,
          variadic: false,
        },
      ],
      returnTypeId: "e34cf562-ee0c-58d3-a1ee-ff9fbb35bfc3",
      returnTypemod: "SetOfType",
      preservesOptionality: true,
    },
  ]);
  return _.syntax.$expressionify({
    __kind__: $.ExpressionKind.Function,
    __element__: returnType,
    __cardinality__: cardinality,
    __name__: "std::enumerate",
    __args__: positionalArgs,
    __namedargs__: namedArgs,
  }) as any;
}

type roundλFuncExpr<P1 extends _.castMaps.orScalarLiteral<$.TypeSet<$number>>> =
  $.$expr_Function<$number, $.cardutil.paramCardinality<P1>>;
type roundλFuncExpr2<
  P1 extends _.castMaps.orScalarLiteral<$.TypeSet<$bigint>>,
> = $.$expr_Function<$bigint, $.cardutil.paramCardinality<P1>>;
type roundλFuncExpr3<
  P1 extends _.castMaps.orScalarLiteral<$.TypeSet<$decimalλICastableTo>>,
> = $.$expr_Function<$decimal, $.cardutil.paramCardinality<P1>>;
type roundλFuncExpr4<
  P1 extends _.castMaps.orScalarLiteral<$.TypeSet<$decimalλICastableTo>>,
  P2 extends _.castMaps.orScalarLiteral<$.TypeSet<$number>>,
> = $.$expr_Function<
  $decimal,
  $.cardutil.multiplyCardinalities<
    $.cardutil.paramCardinality<P1>,
    $.cardutil.paramCardinality<P2>
  >
>;
/**
 * Round to the nearest value.
 */
function round<P1 extends _.castMaps.orScalarLiteral<$.TypeSet<$number>>>(
  val: P1,
): roundλFuncExpr<P1>;
/**
 * Round to the nearest value.
 */
function round<P1 extends _.castMaps.orScalarLiteral<$.TypeSet<$bigint>>>(
  val: P1,
): roundλFuncExpr2<P1>;
/**
 * Round to the nearest value.
 */
function round<
  P1 extends _.castMaps.orScalarLiteral<$.TypeSet<$decimalλICastableTo>>,
>(val: P1): roundλFuncExpr3<P1>;
/**
 * Round to the nearest value.
 */
function round<
  P1 extends _.castMaps.orScalarLiteral<$.TypeSet<$decimalλICastableTo>>,
  P2 extends _.castMaps.orScalarLiteral<$.TypeSet<$number>>,
>(val: P1, d: P2): roundλFuncExpr4<P1, P2>;
function round(...args: any[]) {
  const {
    returnType,
    cardinality,
    args: positionalArgs,
    namedArgs,
  } = _.syntax.$resolveOverload("std::round", args, _.spec, [
    {
      args: [
        {
          typeId: "00000000-0000-0000-0000-0000000001ff",
          optional: false,
          setoftype: false,
          variadic: false,
        },
      ],
      returnTypeId: "00000000-0000-0000-0000-0000000001ff",
    },
    {
      args: [
        {
          typeId: "00000000-0000-0000-0000-000000000110",
          optional: false,
          setoftype: false,
          variadic: false,
        },
      ],
      returnTypeId: "00000000-0000-0000-0000-000000000110",
    },
    {
      args: [
        {
          typeId: "00000000-0000-0000-0000-000000000108",
          optional: false,
          setoftype: false,
          variadic: false,
        },
      ],
      returnTypeId: "00000000-0000-0000-0000-000000000108",
    },
    {
      args: [
        {
          typeId: "00000000-0000-0000-0000-000000000108",
          optional: false,
          setoftype: false,
          variadic: false,
        },
        {
          typeId: "00000000-0000-0000-0000-0000000001ff",
          optional: false,
          setoftype: false,
          variadic: false,
        },
      ],
      returnTypeId: "00000000-0000-0000-0000-000000000108",
    },
  ]);
  return _.syntax.$expressionify({
    __kind__: $.ExpressionKind.Function,
    __element__: returnType,
    __cardinality__: cardinality,
    __name__: "std::round",
    __args__: positionalArgs,
    __namedargs__: namedArgs,
  }) as any;
}

type containsλFuncExpr<
  P1 extends _.castMaps.orScalarLiteral<$.TypeSet<$str>>,
  P2 extends _.castMaps.orScalarLiteral<$.TypeSet<$str>>,
> = $.$expr_Function<
  $bool,
  $.cardutil.multiplyCardinalities<
    $.cardutil.paramCardinality<P1>,
    $.cardutil.paramCardinality<P2>
  >
>;
type containsλFuncExpr2<
  P1 extends _.castMaps.orScalarLiteral<$.TypeSet<$bytes>>,
  P2 extends _.castMaps.orScalarLiteral<$.TypeSet<$bytes>>,
> = $.$expr_Function<
  $bool,
  $.cardutil.multiplyCardinalities<
    $.cardutil.paramCardinality<P1>,
    $.cardutil.paramCardinality<P2>
  >
>;
type containsλFuncExpr3<
  P1 extends _.castMaps.orScalarLiteral<$.TypeSet<$json>>,
  P2 extends _.castMaps.orScalarLiteral<$.TypeSet<$json>>,
> = $.$expr_Function<
  $bool,
  $.cardutil.multiplyCardinalities<
    $.cardutil.paramCardinality<P1>,
    $.cardutil.paramCardinality<P2>
  >
>;
type containsλFuncExpr4<
  P1 extends $.TypeSet<$.RangeType<$anypoint>>,
  P2 extends $.TypeSet<
    $.RangeType<$.getPrimitiveBaseType<P1["__element__"]["__element__"]>>
  >,
> = $.$expr_Function<
  $bool,
  $.cardutil.multiplyCardinalities<
    $.cardutil.paramCardinality<P1>,
    $.cardutil.paramCardinality<P2>
  >
>;
type containsλFuncExpr5<
  P1 extends $.TypeSet<$.RangeType<$anypoint>>,
  P2 extends _.castMaps.orScalarLiteral<
    $.TypeSet<$.getPrimitiveBaseType<P1["__element__"]["__element__"]>>
  >,
> = $.$expr_Function<
  $bool,
  $.cardutil.multiplyCardinalities<
    $.cardutil.paramCardinality<P1>,
    $.cardutil.paramCardinality<P2>
  >
>;
type containsλFuncExpr6<
  P1 extends $.TypeSet<$.MultiRangeType<$anypoint>>,
  P2 extends $.TypeSet<
    $.MultiRangeType<$.getPrimitiveBaseType<P1["__element__"]["__element__"]>>
  >,
> = $.$expr_Function<
  $bool,
  $.cardutil.multiplyCardinalities<
    $.cardutil.paramCardinality<P1>,
    $.cardutil.paramCardinality<P2>
  >
>;
type containsλFuncExpr7<
  P1 extends $.TypeSet<$.MultiRangeType<$anypoint>>,
  P2 extends $.TypeSet<
    $.RangeType<$.getPrimitiveBaseType<P1["__element__"]["__element__"]>>
  >,
> = $.$expr_Function<
  $bool,
  $.cardutil.multiplyCardinalities<
    $.cardutil.paramCardinality<P1>,
    $.cardutil.paramCardinality<P2>
  >
>;
type containsλFuncExpr8<
  P1 extends $.TypeSet<$.MultiRangeType<$anypoint>>,
  P2 extends _.castMaps.orScalarLiteral<
    $.TypeSet<$.getPrimitiveBaseType<P1["__element__"]["__element__"]>>
  >,
> = $.$expr_Function<
  $bool,
  $.cardutil.multiplyCardinalities<
    $.cardutil.paramCardinality<P1>,
    $.cardutil.paramCardinality<P2>
  >
>;
type containsλFuncExpr9<
  P1 extends $.TypeSet<$.RangeType<_stdcal.$local_date>>,
  P2 extends _.castMaps.orScalarLiteral<$.TypeSet<_stdcal.$local_date>>,
> = $.$expr_Function<
  $bool,
  $.cardutil.multiplyCardinalities<
    $.cardutil.paramCardinality<P1>,
    $.cardutil.paramCardinality<P2>
  >
>;
type containsλFuncExpr10<
  P1 extends $.TypeSet<$.MultiRangeType<_stdcal.$local_date>>,
  P2 extends _.castMaps.orScalarLiteral<$.TypeSet<_stdcal.$local_date>>,
> = $.$expr_Function<
  $bool,
  $.cardutil.multiplyCardinalities<
    $.cardutil.paramCardinality<P1>,
    $.cardutil.paramCardinality<P2>
  >
>;
type containsλFuncExpr11<
  P1 extends $.TypeSet<$.ArrayType<_stdcal.$relative_durationλICastableTo>>,
  P2 extends $.TypeSet<_stdcal.$relative_durationλICastableTo>,
> = $.$expr_Function<
  $bool,
  $.cardutil.multiplyCardinalities<
    $.cardutil.paramCardinality<P1>,
    $.cardutil.paramCardinality<P2>
  >
>;
type containsλFuncExpr12<
  P1 extends $.TypeSet<$.ArrayType<_stdcal.$local_datetimeλICastableTo>>,
  P2 extends $.TypeSet<_stdcal.$local_datetimeλICastableTo>,
> = $.$expr_Function<
  $bool,
  $.cardutil.multiplyCardinalities<
    $.cardutil.paramCardinality<P1>,
    $.cardutil.paramCardinality<P2>
  >
>;
type containsλFuncExpr13<
  P1 extends $.TypeSet<$.ArrayType<$decimalλICastableTo>>,
  P2 extends $.TypeSet<$decimalλICastableTo>,
> = $.$expr_Function<
  $bool,
  $.cardutil.multiplyCardinalities<
    $.cardutil.paramCardinality<P1>,
    $.cardutil.paramCardinality<P2>
  >
>;
type containsλFuncExpr14<
  P1 extends $.TypeSet<$.ArrayType<$.ObjectType>>,
  P2 extends $.TypeSet<$.ObjectType>,
> = $.$expr_Function<
  $bool,
  $.cardutil.multiplyCardinalities<
    $.cardutil.paramCardinality<P1>,
    $.cardutil.paramCardinality<P2>
  >
>;
type containsλFuncExpr15<
  P1 extends $.TypeSet<$.ArrayType<$.AnyTupleType>>,
  P2 extends $.TypeSet<$.AnyTupleType>,
> = $.$expr_Function<
  $bool,
  $.cardutil.multiplyCardinalities<
    $.cardutil.paramCardinality<P1>,
    $.cardutil.paramCardinality<P2>
  >
>;
type containsλFuncExpr16<
  P1 extends $.TypeSet<$.ArrayType<$.NonArrayType>>,
  P2 extends _.castMaps.orScalarLiteral<
    $.TypeSet<$.getPrimitiveNonArrayBaseType<P1["__element__"]["__element__"]>>
  >,
> = $.$expr_Function<
  $bool,
  $.cardutil.multiplyCardinalities<
    $.cardutil.paramCardinality<P1>,
    $.cardutil.paramCardinality<P2>
  >
>;
/**
 * A polymorphic function to test if a sequence contains a certain element.
 */
function contains<
  P1 extends _.castMaps.orScalarLiteral<$.TypeSet<$str>>,
  P2 extends _.castMaps.orScalarLiteral<$.TypeSet<$str>>,
>(haystack: P1, needle: P2): containsλFuncExpr<P1, P2>;
/**
 * A polymorphic function to test if a sequence contains a certain element.
 */
function contains<
  P1 extends _.castMaps.orScalarLiteral<$.TypeSet<$bytes>>,
  P2 extends _.castMaps.orScalarLiteral<$.TypeSet<$bytes>>,
>(haystack: P1, needle: P2): containsλFuncExpr2<P1, P2>;
/**
 * A polymorphic function to test if one JSON value contains another JSON value.
 */
function contains<
  P1 extends _.castMaps.orScalarLiteral<$.TypeSet<$json>>,
  P2 extends _.castMaps.orScalarLiteral<$.TypeSet<$json>>,
>(haystack: P1, needle: P2): containsλFuncExpr3<P1, P2>;
function contains<
  P1 extends $.TypeSet<$.RangeType<$anypoint>>,
  P2 extends $.TypeSet<
    $.RangeType<$.getPrimitiveBaseType<P1["__element__"]["__element__"]>>
  >,
>(haystack: P1, needle: P2): containsλFuncExpr4<P1, P2>;
function contains<
  P1 extends $.TypeSet<$.RangeType<$anypoint>>,
  P2 extends _.castMaps.orScalarLiteral<
    $.TypeSet<$.getPrimitiveBaseType<P1["__element__"]["__element__"]>>
  >,
>(haystack: P1, needle: P2): containsλFuncExpr5<P1, P2>;
function contains<
  P1 extends $.TypeSet<$.MultiRangeType<$anypoint>>,
  P2 extends $.TypeSet<
    $.MultiRangeType<$.getPrimitiveBaseType<P1["__element__"]["__element__"]>>
  >,
>(haystack: P1, needle: P2): containsλFuncExpr6<P1, P2>;
function contains<
  P1 extends $.TypeSet<$.MultiRangeType<$anypoint>>,
  P2 extends $.TypeSet<
    $.RangeType<$.getPrimitiveBaseType<P1["__element__"]["__element__"]>>
  >,
>(haystack: P1, needle: P2): containsλFuncExpr7<P1, P2>;
function contains<
  P1 extends $.TypeSet<$.MultiRangeType<$anypoint>>,
  P2 extends _.castMaps.orScalarLiteral<
    $.TypeSet<$.getPrimitiveBaseType<P1["__element__"]["__element__"]>>
  >,
>(haystack: P1, needle: P2): containsλFuncExpr8<P1, P2>;
function contains<
  P1 extends $.TypeSet<$.RangeType<_stdcal.$local_date>>,
  P2 extends _.castMaps.orScalarLiteral<$.TypeSet<_stdcal.$local_date>>,
>(haystack: P1, needle: P2): containsλFuncExpr9<P1, P2>;
function contains<
  P1 extends $.TypeSet<$.MultiRangeType<_stdcal.$local_date>>,
  P2 extends _.castMaps.orScalarLiteral<$.TypeSet<_stdcal.$local_date>>,
>(haystack: P1, needle: P2): containsλFuncExpr10<P1, P2>;
/**
 * A polymorphic function to test if a sequence contains a certain element.
 */
function contains<
  P1 extends $.TypeSet<$.ArrayType<_stdcal.$relative_durationλICastableTo>>,
  P2 extends $.TypeSet<_stdcal.$relative_durationλICastableTo>,
>(haystack: P1, needle: P2): containsλFuncExpr11<P1, P2>;
/**
 * A polymorphic function to test if a sequence contains a certain element.
 */
function contains<
  P1 extends $.TypeSet<$.ArrayType<_stdcal.$local_datetimeλICastableTo>>,
  P2 extends $.TypeSet<_stdcal.$local_datetimeλICastableTo>,
>(haystack: P1, needle: P2): containsλFuncExpr12<P1, P2>;
/**
 * A polymorphic function to test if a sequence contains a certain element.
 */
function contains<
  P1 extends $.TypeSet<$.ArrayType<$decimalλICastableTo>>,
  P2 extends $.TypeSet<$decimalλICastableTo>,
>(haystack: P1, needle: P2): containsλFuncExpr13<P1, P2>;
/**
 * A polymorphic function to test if a sequence contains a certain element.
 */
function contains<
  P1 extends $.TypeSet<$.ArrayType<$.ObjectType>>,
  P2 extends $.TypeSet<$.ObjectType>,
>(haystack: P1, needle: P2): containsλFuncExpr14<P1, P2>;
/**
 * A polymorphic function to test if a sequence contains a certain element.
 */
function contains<
  P1 extends $.TypeSet<$.ArrayType<$.AnyTupleType>>,
  P2 extends $.TypeSet<$.AnyTupleType>,
>(haystack: P1, needle: P2): containsλFuncExpr15<P1, P2>;
/**
 * A polymorphic function to test if a sequence contains a certain element.
 */
function contains<
  P1 extends $.TypeSet<$.ArrayType<$.NonArrayType>>,
  P2 extends _.castMaps.orScalarLiteral<
    $.TypeSet<$.getPrimitiveNonArrayBaseType<P1["__element__"]["__element__"]>>
  >,
>(haystack: P1, needle: P2): containsλFuncExpr16<P1, P2>;
function contains(...args: any[]) {
  const {
    returnType,
    cardinality,
    args: positionalArgs,
    namedArgs,
  } = _.syntax.$resolveOverload("std::contains", args, _.spec, [
    {
      args: [
        {
          typeId: "00000000-0000-0000-0000-000000000101",
          optional: false,
          setoftype: false,
          variadic: false,
        },
        {
          typeId: "00000000-0000-0000-0000-000000000101",
          optional: false,
          setoftype: false,
          variadic: false,
        },
      ],
      returnTypeId: "00000000-0000-0000-0000-000000000109",
    },
    {
      args: [
        {
          typeId: "00000000-0000-0000-0000-000000000102",
          optional: false,
          setoftype: false,
          variadic: false,
        },
        {
          typeId: "00000000-0000-0000-0000-000000000102",
          optional: false,
          setoftype: false,
          variadic: false,
        },
      ],
      returnTypeId: "00000000-0000-0000-0000-000000000109",
    },
    {
      args: [
        {
          typeId: "00000000-0000-0000-0000-00000000010f",
          optional: false,
          setoftype: false,
          variadic: false,
        },
        {
          typeId: "00000000-0000-0000-0000-00000000010f",
          optional: false,
          setoftype: false,
          variadic: false,
        },
      ],
      returnTypeId: "00000000-0000-0000-0000-000000000109",
    },
    {
      args: [
        {
          typeId: "49748e47-8d91-5269-9a34-2e8ca194e0f2",
          optional: false,
          setoftype: false,
          variadic: false,
        },
        {
          typeId: "49748e47-8d91-5269-9a34-2e8ca194e0f2",
          optional: false,
          setoftype: false,
          variadic: false,
        },
      ],
      returnTypeId: "00000000-0000-0000-0000-000000000109",
    },
    {
      args: [
        {
          typeId: "49748e47-8d91-5269-9a34-2e8ca194e0f2",
          optional: false,
          setoftype: false,
          variadic: false,
        },
        {
          typeId: "581b0325-a044-58d4-aa37-3a85ea671313",
          optional: false,
          setoftype: false,
          variadic: false,
        },
      ],
      returnTypeId: "00000000-0000-0000-0000-000000000109",
    },
    {
      args: [
        {
          typeId: "c3231f27-c8a1-5a0c-9830-c71206020eac",
          optional: false,
          setoftype: false,
          variadic: false,
        },
        {
          typeId: "c3231f27-c8a1-5a0c-9830-c71206020eac",
          optional: false,
          setoftype: false,
          variadic: false,
        },
      ],
      returnTypeId: "00000000-0000-0000-0000-000000000109",
    },
    {
      args: [
        {
          typeId: "c3231f27-c8a1-5a0c-9830-c71206020eac",
          optional: false,
          setoftype: false,
          variadic: false,
        },
        {
          typeId: "49748e47-8d91-5269-9a34-2e8ca194e0f2",
          optional: false,
          setoftype: false,
          variadic: false,
        },
      ],
      returnTypeId: "00000000-0000-0000-0000-000000000109",
    },
    {
      args: [
        {
          typeId: "c3231f27-c8a1-5a0c-9830-c71206020eac",
          optional: false,
          setoftype: false,
          variadic: false,
        },
        {
          typeId: "581b0325-a044-58d4-aa37-3a85ea671313",
          optional: false,
          setoftype: false,
          variadic: false,
        },
      ],
      returnTypeId: "00000000-0000-0000-0000-000000000109",
    },
    {
      args: [
        {
          typeId: "c38cc584-72e2-5b3d-a9cc-e8e256c2dd0d",
          optional: false,
          setoftype: false,
          variadic: false,
        },
        {
          typeId: "00000000-0000-0000-0000-00000000010c",
          optional: false,
          setoftype: false,
          variadic: false,
        },
      ],
      returnTypeId: "00000000-0000-0000-0000-000000000109",
    },
    {
      args: [
        {
          typeId: "74568c88-a8c3-5a02-9acd-64616d07ab8b",
          optional: false,
          setoftype: false,
          variadic: false,
        },
        {
          typeId: "00000000-0000-0000-0000-00000000010c",
          optional: false,
          setoftype: false,
          variadic: false,
        },
      ],
      returnTypeId: "00000000-0000-0000-0000-000000000109",
    },
    {
      args: [
        {
          typeId: "a6f5468c-c2a6-5852-8f73-57484b1c6831",
          optional: false,
          setoftype: false,
          variadic: false,
        },
        {
          typeId: "00000000-0000-0000-0000-000000000001",
          optional: false,
          setoftype: false,
          variadic: false,
        },
      ],
      returnTypeId: "00000000-0000-0000-0000-000000000109",
    },
  ]);
  return _.syntax.$expressionify({
    __kind__: $.ExpressionKind.Function,
    __element__: returnType,
    __cardinality__: cardinality,
    __name__: "std::contains",
    __args__: positionalArgs,
    __namedargs__: namedArgs,
  }) as any;
}

type array_fillλFuncExpr<
  P1 extends _.castMaps.orScalarLiteral<$.TypeSet<$.NonArrayType>>,
  P2 extends _.castMaps.orScalarLiteral<$.TypeSet<$number>>,
> = $.$expr_Function<
  $.ArrayType<
    $.getPrimitiveNonArrayBaseType<
      _.castMaps.literalToTypeSet<P1>["__element__"]
    >
  >,
  $.cardutil.multiplyCardinalities<
    $.cardutil.paramCardinality<P1>,
    $.cardutil.paramCardinality<P2>
  >
>;
/**
 * Return an array filled with the given value repeated as many times as specified.
 */
function array_fill<
  P1 extends _.castMaps.orScalarLiteral<$.TypeSet<$.NonArrayType>>,
  P2 extends _.castMaps.orScalarLiteral<$.TypeSet<$number>>,
>(val: P1, n: P2): array_fillλFuncExpr<P1, P2>;
function array_fill(...args: any[]) {
  const {
    returnType,
    cardinality,
    args: positionalArgs,
    namedArgs,
  } = _.syntax.$resolveOverload("std::array_fill", args, _.spec, [
    {
      args: [
        {
          typeId: "00000000-0000-0000-0000-000000000001",
          optional: false,
          setoftype: false,
          variadic: false,
        },
        {
          typeId: "00000000-0000-0000-0000-0000000001ff",
          optional: false,
          setoftype: false,
          variadic: false,
        },
      ],
      returnTypeId: "a6f5468c-c2a6-5852-8f73-57484b1c6831",
    },
  ]);
  return _.syntax.$expressionify({
    __kind__: $.ExpressionKind.Function,
    __element__: returnType,
    __cardinality__: cardinality,
    __name__: "std::array_fill",
    __args__: positionalArgs,
    __namedargs__: namedArgs,
  }) as any;
}

type findλFuncExpr<
  P1 extends _.castMaps.orScalarLiteral<$.TypeSet<$str>>,
  P2 extends _.castMaps.orScalarLiteral<$.TypeSet<$str>>,
> = $.$expr_Function<
  $number,
  $.cardutil.multiplyCardinalities<
    $.cardutil.paramCardinality<P1>,
    $.cardutil.paramCardinality<P2>
  >
>;
type findλFuncExpr2<
  P1 extends _.castMaps.orScalarLiteral<$.TypeSet<$bytes>>,
  P2 extends _.castMaps.orScalarLiteral<$.TypeSet<$bytes>>,
> = $.$expr_Function<
  $number,
  $.cardutil.multiplyCardinalities<
    $.cardutil.paramCardinality<P1>,
    $.cardutil.paramCardinality<P2>
  >
>;
type findλFuncExpr3<
  P1 extends $.TypeSet<$.ArrayType<_stdcal.$relative_durationλICastableTo>>,
  P2 extends $.TypeSet<_stdcal.$relative_durationλICastableTo>,
  P3 extends _.castMaps.orScalarLiteral<$.TypeSet<$number>> | undefined,
> = $.$expr_Function<
  $number,
  $.cardutil.multiplyCardinalities<
    $.cardutil.multiplyCardinalities<
      $.cardutil.paramCardinality<P1>,
      $.cardutil.paramCardinality<P2>
    >,
    $.cardutil.optionalParamCardinality<P3>
  >
>;
type findλFuncExpr4<
  P1 extends $.TypeSet<$.ArrayType<_stdcal.$local_datetimeλICastableTo>>,
  P2 extends $.TypeSet<_stdcal.$local_datetimeλICastableTo>,
  P3 extends _.castMaps.orScalarLiteral<$.TypeSet<$number>> | undefined,
> = $.$expr_Function<
  $number,
  $.cardutil.multiplyCardinalities<
    $.cardutil.multiplyCardinalities<
      $.cardutil.paramCardinality<P1>,
      $.cardutil.paramCardinality<P2>
    >,
    $.cardutil.optionalParamCardinality<P3>
  >
>;
type findλFuncExpr5<
  P1 extends $.TypeSet<$.ArrayType<$decimalλICastableTo>>,
  P2 extends $.TypeSet<$decimalλICastableTo>,
  P3 extends _.castMaps.orScalarLiteral<$.TypeSet<$number>> | undefined,
> = $.$expr_Function<
  $number,
  $.cardutil.multiplyCardinalities<
    $.cardutil.multiplyCardinalities<
      $.cardutil.paramCardinality<P1>,
      $.cardutil.paramCardinality<P2>
    >,
    $.cardutil.optionalParamCardinality<P3>
  >
>;
type findλFuncExpr6<
  P1 extends $.TypeSet<$.ArrayType<$.ObjectType>>,
  P2 extends $.TypeSet<$.ObjectType>,
  P3 extends _.castMaps.orScalarLiteral<$.TypeSet<$number>> | undefined,
> = $.$expr_Function<
  $number,
  $.cardutil.multiplyCardinalities<
    $.cardutil.multiplyCardinalities<
      $.cardutil.paramCardinality<P1>,
      $.cardutil.paramCardinality<P2>
    >,
    $.cardutil.optionalParamCardinality<P3>
  >
>;
type findλFuncExpr7<
  P1 extends $.TypeSet<$.ArrayType<$.AnyTupleType>>,
  P2 extends $.TypeSet<$.AnyTupleType>,
  P3 extends _.castMaps.orScalarLiteral<$.TypeSet<$number>> | undefined,
> = $.$expr_Function<
  $number,
  $.cardutil.multiplyCardinalities<
    $.cardutil.multiplyCardinalities<
      $.cardutil.paramCardinality<P1>,
      $.cardutil.paramCardinality<P2>
    >,
    $.cardutil.optionalParamCardinality<P3>
  >
>;
type findλFuncExpr8<
  P1 extends $.TypeSet<$.ArrayType<$.NonArrayType>>,
  P2 extends _.castMaps.orScalarLiteral<
    $.TypeSet<$.getPrimitiveNonArrayBaseType<P1["__element__"]["__element__"]>>
  >,
  P3 extends _.castMaps.orScalarLiteral<$.TypeSet<$number>> | undefined,
> = $.$expr_Function<
  $number,
  $.cardutil.multiplyCardinalities<
    $.cardutil.multiplyCardinalities<
      $.cardutil.paramCardinality<P1>,
      $.cardutil.paramCardinality<P2>
    >,
    $.cardutil.optionalParamCardinality<P3>
  >
>;
/**
 * A polymorphic function to find index of an element in a sequence.
 */
function find<
  P1 extends _.castMaps.orScalarLiteral<$.TypeSet<$str>>,
  P2 extends _.castMaps.orScalarLiteral<$.TypeSet<$str>>,
>(haystack: P1, needle: P2): findλFuncExpr<P1, P2>;
/**
 * A polymorphic function to find index of an element in a sequence.
 */
function find<
  P1 extends _.castMaps.orScalarLiteral<$.TypeSet<$bytes>>,
  P2 extends _.castMaps.orScalarLiteral<$.TypeSet<$bytes>>,
>(haystack: P1, needle: P2): findλFuncExpr2<P1, P2>;
/**
 * A polymorphic function to find index of an element in a sequence.
 */
function find<
  P1 extends $.TypeSet<$.ArrayType<_stdcal.$relative_durationλICastableTo>>,
  P2 extends $.TypeSet<_stdcal.$relative_durationλICastableTo>,
  P3 extends _.castMaps.orScalarLiteral<$.TypeSet<$number>> | undefined,
>(haystack: P1, needle: P2, from_pos?: P3): findλFuncExpr3<P1, P2, P3>;
/**
 * A polymorphic function to find index of an element in a sequence.
 */
function find<
  P1 extends $.TypeSet<$.ArrayType<_stdcal.$local_datetimeλICastableTo>>,
  P2 extends $.TypeSet<_stdcal.$local_datetimeλICastableTo>,
  P3 extends _.castMaps.orScalarLiteral<$.TypeSet<$number>> | undefined,
>(haystack: P1, needle: P2, from_pos?: P3): findλFuncExpr4<P1, P2, P3>;
/**
 * A polymorphic function to find index of an element in a sequence.
 */
function find<
  P1 extends $.TypeSet<$.ArrayType<$decimalλICastableTo>>,
  P2 extends $.TypeSet<$decimalλICastableTo>,
  P3 extends _.castMaps.orScalarLiteral<$.TypeSet<$number>> | undefined,
>(haystack: P1, needle: P2, from_pos?: P3): findλFuncExpr5<P1, P2, P3>;
/**
 * A polymorphic function to find index of an element in a sequence.
 */
function find<
  P1 extends $.TypeSet<$.ArrayType<$.ObjectType>>,
  P2 extends $.TypeSet<$.ObjectType>,
  P3 extends _.castMaps.orScalarLiteral<$.TypeSet<$number>> | undefined,
>(haystack: P1, needle: P2, from_pos?: P3): findλFuncExpr6<P1, P2, P3>;
/**
 * A polymorphic function to find index of an element in a sequence.
 */
function find<
  P1 extends $.TypeSet<$.ArrayType<$.AnyTupleType>>,
  P2 extends $.TypeSet<$.AnyTupleType>,
  P3 extends _.castMaps.orScalarLiteral<$.TypeSet<$number>> | undefined,
>(haystack: P1, needle: P2, from_pos?: P3): findλFuncExpr7<P1, P2, P3>;
/**
 * A polymorphic function to find index of an element in a sequence.
 */
function find<
  P1 extends $.TypeSet<$.ArrayType<$.NonArrayType>>,
  P2 extends _.castMaps.orScalarLiteral<
    $.TypeSet<$.getPrimitiveNonArrayBaseType<P1["__element__"]["__element__"]>>
  >,
  P3 extends _.castMaps.orScalarLiteral<$.TypeSet<$number>> | undefined,
>(haystack: P1, needle: P2, from_pos?: P3): findλFuncExpr8<P1, P2, P3>;
function find(...args: any[]) {
  const {
    returnType,
    cardinality,
    args: positionalArgs,
    namedArgs,
  } = _.syntax.$resolveOverload("std::find", args, _.spec, [
    {
      args: [
        {
          typeId: "00000000-0000-0000-0000-000000000101",
          optional: false,
          setoftype: false,
          variadic: false,
        },
        {
          typeId: "00000000-0000-0000-0000-000000000101",
          optional: false,
          setoftype: false,
          variadic: false,
        },
      ],
      returnTypeId: "00000000-0000-0000-0000-0000000001ff",
    },
    {
      args: [
        {
          typeId: "00000000-0000-0000-0000-000000000102",
          optional: false,
          setoftype: false,
          variadic: false,
        },
        {
          typeId: "00000000-0000-0000-0000-000000000102",
          optional: false,
          setoftype: false,
          variadic: false,
        },
      ],
      returnTypeId: "00000000-0000-0000-0000-0000000001ff",
    },
    {
      args: [
        {
          typeId: "a6f5468c-c2a6-5852-8f73-57484b1c6831",
          optional: false,
          setoftype: false,
          variadic: false,
        },
        {
          typeId: "00000000-0000-0000-0000-000000000001",
          optional: false,
          setoftype: false,
          variadic: false,
        },
        {
          typeId: "00000000-0000-0000-0000-0000000001ff",
          optional: true,
          setoftype: false,
          variadic: false,
        },
      ],
      returnTypeId: "00000000-0000-0000-0000-0000000001ff",
    },
  ]);
  return _.syntax.$expressionify({
    __kind__: $.ExpressionKind.Function,
    __element__: returnType,
    __cardinality__: cardinality,
    __name__: "std::find",
    __args__: positionalArgs,
    __namedargs__: namedArgs,
  }) as any;
}

type bit_andλFuncExpr<
  P1 extends _.castMaps.orScalarLiteral<$.TypeSet<$number>>,
  P2 extends _.castMaps.orScalarLiteral<$.TypeSet<$number>>,
> = $.$expr_Function<
  $number,
  $.cardutil.multiplyCardinalities<
    $.cardutil.paramCardinality<P1>,
    $.cardutil.paramCardinality<P2>
  >
>;
/**
 * Bitwise AND operator for 16-bit integers.
 */
function bit_and<
  P1 extends _.castMaps.orScalarLiteral<$.TypeSet<$number>>,
  P2 extends _.castMaps.orScalarLiteral<$.TypeSet<$number>>,
>(l: P1, r: P2): bit_andλFuncExpr<P1, P2>;
function bit_and(...args: any[]) {
  const {
    returnType,
    cardinality,
    args: positionalArgs,
    namedArgs,
  } = _.syntax.$resolveOverload("std::bit_and", args, _.spec, [
    {
      args: [
        {
          typeId: "00000000-0000-0000-0000-0000000001ff",
          optional: false,
          setoftype: false,
          variadic: false,
        },
        {
          typeId: "00000000-0000-0000-0000-0000000001ff",
          optional: false,
          setoftype: false,
          variadic: false,
        },
      ],
      returnTypeId: "00000000-0000-0000-0000-0000000001ff",
    },
  ]);
  return _.syntax.$expressionify({
    __kind__: $.ExpressionKind.Function,
    __element__: returnType,
    __cardinality__: cardinality,
    __name__: "std::bit_and",
    __args__: positionalArgs,
    __namedargs__: namedArgs,
  }) as any;
}

type bit_orλFuncExpr<
  P1 extends _.castMaps.orScalarLiteral<$.TypeSet<$number>>,
  P2 extends _.castMaps.orScalarLiteral<$.TypeSet<$number>>,
> = $.$expr_Function<
  $number,
  $.cardutil.multiplyCardinalities<
    $.cardutil.paramCardinality<P1>,
    $.cardutil.paramCardinality<P2>
  >
>;
/**
 * Bitwise OR operator for 16-bit integers.
 */
function bit_or<
  P1 extends _.castMaps.orScalarLiteral<$.TypeSet<$number>>,
  P2 extends _.castMaps.orScalarLiteral<$.TypeSet<$number>>,
>(l: P1, r: P2): bit_orλFuncExpr<P1, P2>;
function bit_or(...args: any[]) {
  const {
    returnType,
    cardinality,
    args: positionalArgs,
    namedArgs,
  } = _.syntax.$resolveOverload("std::bit_or", args, _.spec, [
    {
      args: [
        {
          typeId: "00000000-0000-0000-0000-0000000001ff",
          optional: false,
          setoftype: false,
          variadic: false,
        },
        {
          typeId: "00000000-0000-0000-0000-0000000001ff",
          optional: false,
          setoftype: false,
          variadic: false,
        },
      ],
      returnTypeId: "00000000-0000-0000-0000-0000000001ff",
    },
  ]);
  return _.syntax.$expressionify({
    __kind__: $.ExpressionKind.Function,
    __element__: returnType,
    __cardinality__: cardinality,
    __name__: "std::bit_or",
    __args__: positionalArgs,
    __namedargs__: namedArgs,
  }) as any;
}

type bit_xorλFuncExpr<
  P1 extends _.castMaps.orScalarLiteral<$.TypeSet<$number>>,
  P2 extends _.castMaps.orScalarLiteral<$.TypeSet<$number>>,
> = $.$expr_Function<
  $number,
  $.cardutil.multiplyCardinalities<
    $.cardutil.paramCardinality<P1>,
    $.cardutil.paramCardinality<P2>
  >
>;
/**
 * Bitwise exclusive OR operator for 16-bit integers.
 */
function bit_xor<
  P1 extends _.castMaps.orScalarLiteral<$.TypeSet<$number>>,
  P2 extends _.castMaps.orScalarLiteral<$.TypeSet<$number>>,
>(l: P1, r: P2): bit_xorλFuncExpr<P1, P2>;
function bit_xor(...args: any[]) {
  const {
    returnType,
    cardinality,
    args: positionalArgs,
    namedArgs,
  } = _.syntax.$resolveOverload("std::bit_xor", args, _.spec, [
    {
      args: [
        {
          typeId: "00000000-0000-0000-0000-0000000001ff",
          optional: false,
          setoftype: false,
          variadic: false,
        },
        {
          typeId: "00000000-0000-0000-0000-0000000001ff",
          optional: false,
          setoftype: false,
          variadic: false,
        },
      ],
      returnTypeId: "00000000-0000-0000-0000-0000000001ff",
    },
  ]);
  return _.syntax.$expressionify({
    __kind__: $.ExpressionKind.Function,
    __element__: returnType,
    __cardinality__: cardinality,
    __name__: "std::bit_xor",
    __args__: positionalArgs,
    __namedargs__: namedArgs,
  }) as any;
}

type bit_notλFuncExpr<
  P1 extends _.castMaps.orScalarLiteral<$.TypeSet<$number>>,
> = $.$expr_Function<$number, $.cardutil.paramCardinality<P1>>;
/**
 * Bitwise NOT operator for 16-bit integers.
 */
function bit_not<P1 extends _.castMaps.orScalarLiteral<$.TypeSet<$number>>>(
  r: P1,
): bit_notλFuncExpr<P1>;
function bit_not(...args: any[]) {
  const {
    returnType,
    cardinality,
    args: positionalArgs,
    namedArgs,
  } = _.syntax.$resolveOverload("std::bit_not", args, _.spec, [
    {
      args: [
        {
          typeId: "00000000-0000-0000-0000-0000000001ff",
          optional: false,
          setoftype: false,
          variadic: false,
        },
      ],
      returnTypeId: "00000000-0000-0000-0000-0000000001ff",
    },
  ]);
  return _.syntax.$expressionify({
    __kind__: $.ExpressionKind.Function,
    __element__: returnType,
    __cardinality__: cardinality,
    __name__: "std::bit_not",
    __args__: positionalArgs,
    __namedargs__: namedArgs,
  }) as any;
}

type bit_rshiftλFuncExpr<
  P1 extends _.castMaps.orScalarLiteral<$.TypeSet<$number>>,
  P2 extends _.castMaps.orScalarLiteral<$.TypeSet<$number>>,
> = $.$expr_Function<
  $number,
  $.cardutil.multiplyCardinalities<
    $.cardutil.paramCardinality<P1>,
    $.cardutil.paramCardinality<P2>
  >
>;
/**
 * Bitwise right-shift operator for 16-bit integers.
 */
function bit_rshift<
  P1 extends _.castMaps.orScalarLiteral<$.TypeSet<$number>>,
  P2 extends _.castMaps.orScalarLiteral<$.TypeSet<$number>>,
>(val: P1, n: P2): bit_rshiftλFuncExpr<P1, P2>;
function bit_rshift(...args: any[]) {
  const {
    returnType,
    cardinality,
    args: positionalArgs,
    namedArgs,
  } = _.syntax.$resolveOverload("std::bit_rshift", args, _.spec, [
    {
      args: [
        {
          typeId: "00000000-0000-0000-0000-0000000001ff",
          optional: false,
          setoftype: false,
          variadic: false,
        },
        {
          typeId: "00000000-0000-0000-0000-0000000001ff",
          optional: false,
          setoftype: false,
          variadic: false,
        },
      ],
      returnTypeId: "00000000-0000-0000-0000-0000000001ff",
    },
  ]);
  return _.syntax.$expressionify({
    __kind__: $.ExpressionKind.Function,
    __element__: returnType,
    __cardinality__: cardinality,
    __name__: "std::bit_rshift",
    __args__: positionalArgs,
    __namedargs__: namedArgs,
  }) as any;
}

type bit_lshiftλFuncExpr<
  P1 extends _.castMaps.orScalarLiteral<$.TypeSet<$number>>,
  P2 extends _.castMaps.orScalarLiteral<$.TypeSet<$number>>,
> = $.$expr_Function<
  $number,
  $.cardutil.multiplyCardinalities<
    $.cardutil.paramCardinality<P1>,
    $.cardutil.paramCardinality<P2>
  >
>;
/**
 * Bitwise left-shift operator for 16-bit integers.
 */
function bit_lshift<
  P1 extends _.castMaps.orScalarLiteral<$.TypeSet<$number>>,
  P2 extends _.castMaps.orScalarLiteral<$.TypeSet<$number>>,
>(val: P1, n: P2): bit_lshiftλFuncExpr<P1, P2>;
function bit_lshift(...args: any[]) {
  const {
    returnType,
    cardinality,
    args: positionalArgs,
    namedArgs,
  } = _.syntax.$resolveOverload("std::bit_lshift", args, _.spec, [
    {
      args: [
        {
          typeId: "00000000-0000-0000-0000-0000000001ff",
          optional: false,
          setoftype: false,
          variadic: false,
        },
        {
          typeId: "00000000-0000-0000-0000-0000000001ff",
          optional: false,
          setoftype: false,
          variadic: false,
        },
      ],
      returnTypeId: "00000000-0000-0000-0000-0000000001ff",
    },
  ]);
  return _.syntax.$expressionify({
    __kind__: $.ExpressionKind.Function,
    __element__: returnType,
    __cardinality__: cardinality,
    __name__: "std::bit_lshift",
    __args__: positionalArgs,
    __namedargs__: namedArgs,
  }) as any;
}

type bit_countλFuncExpr<
  P1 extends _.castMaps.orScalarLiteral<$.TypeSet<$number>>,
> = $.$expr_Function<$number, $.cardutil.paramCardinality<P1>>;
type bit_countλFuncExpr2<
  P1 extends _.castMaps.orScalarLiteral<$.TypeSet<$bytes>>,
> = $.$expr_Function<$number, $.cardutil.paramCardinality<P1>>;
/**
 * Count the number of set bits in a 16-bit integer.
 */
function bit_count<P1 extends _.castMaps.orScalarLiteral<$.TypeSet<$number>>>(
  val: P1,
): bit_countλFuncExpr<P1>;
/**
 * Count the number of set bits the bytes value.
 */
function bit_count<P1 extends _.castMaps.orScalarLiteral<$.TypeSet<$bytes>>>(
  bytes: P1,
): bit_countλFuncExpr2<P1>;
function bit_count(...args: any[]) {
  const {
    returnType,
    cardinality,
    args: positionalArgs,
    namedArgs,
  } = _.syntax.$resolveOverload("std::bit_count", args, _.spec, [
    {
      args: [
        {
          typeId: "00000000-0000-0000-0000-0000000001ff",
          optional: false,
          setoftype: false,
          variadic: false,
        },
      ],
      returnTypeId: "00000000-0000-0000-0000-0000000001ff",
    },
    {
      args: [
        {
          typeId: "00000000-0000-0000-0000-000000000102",
          optional: false,
          setoftype: false,
          variadic: false,
        },
      ],
      returnTypeId: "00000000-0000-0000-0000-0000000001ff",
    },
  ]);
  return _.syntax.$expressionify({
    __kind__: $.ExpressionKind.Function,
    __element__: returnType,
    __cardinality__: cardinality,
    __name__: "std::bit_count",
    __args__: positionalArgs,
    __namedargs__: namedArgs,
  }) as any;
}

type array_aggλFuncExpr<
  P1 extends _.castMaps.orScalarLiteral<$.TypeSet<$.NonArrayType>>,
> = $.$expr_Function<
  $.ArrayType<
    $.getPrimitiveNonArrayBaseType<
      _.castMaps.literalToTypeSet<P1>["__element__"]
    >
  >,
  $.Cardinality.One
>;
/**
 * Return the array made from all of the input set elements.
 */
function array_agg<
  P1 extends _.castMaps.orScalarLiteral<$.TypeSet<$.NonArrayType>>,
>(s: P1): array_aggλFuncExpr<P1>;
function array_agg(...args: any[]) {
  const {
    returnType,
    cardinality,
    args: positionalArgs,
    namedArgs,
  } = _.syntax.$resolveOverload("std::array_agg", args, _.spec, [
    {
      args: [
        {
          typeId: "00000000-0000-0000-0000-000000000001",
          optional: false,
          setoftype: true,
          variadic: false,
        },
      ],
      returnTypeId: "a6f5468c-c2a6-5852-8f73-57484b1c6831",
    },
  ]);
  return _.syntax.$expressionify({
    __kind__: $.ExpressionKind.Function,
    __element__: returnType,
    __cardinality__: cardinality,
    __name__: "std::array_agg",
    __args__: positionalArgs,
    __namedargs__: namedArgs,
  }) as any;
}

type array_unpackλFuncExpr<P1 extends $.TypeSet<$.ArrayType<$.NonArrayType>>> =
  $.$expr_Function<
    $.getPrimitiveNonArrayBaseType<P1["__element__"]["__element__"]>,
    $.Cardinality.Many
  >;
/**
 * Return array elements as a set.
 */
function array_unpack<P1 extends $.TypeSet<$.ArrayType<$.NonArrayType>>>(
  array: P1,
): array_unpackλFuncExpr<P1>;
function array_unpack(...args: any[]) {
  const {
    returnType,
    cardinality,
    args: positionalArgs,
    namedArgs,
  } = _.syntax.$resolveOverload("std::array_unpack", args, _.spec, [
    {
      args: [
        {
          typeId: "a6f5468c-c2a6-5852-8f73-57484b1c6831",
          optional: false,
          setoftype: false,
          variadic: false,
        },
      ],
      returnTypeId: "00000000-0000-0000-0000-000000000001",
      returnTypemod: "SetOfType",
    },
  ]);
  return _.syntax.$expressionify({
    __kind__: $.ExpressionKind.Function,
    __element__: returnType,
    __cardinality__: cardinality,
    __name__: "std::array_unpack",
    __args__: positionalArgs,
    __namedargs__: namedArgs,
  }) as any;
}

type array_replaceλFuncExpr<
  P1 extends $.TypeSet<$.ArrayType<_stdcal.$relative_durationλICastableTo>>,
  P2 extends $.TypeSet<_stdcal.$relative_durationλICastableTo>,
  P3 extends $.TypeSet<_stdcal.$relative_durationλICastableTo>,
> = $.$expr_Function<
  $.ArrayType<
    _.syntax.getSharedParentPrimitive<
      _.syntax.getSharedParentPrimitive<
        P1["__element__"]["__element__"],
        P2["__element__"]
      >,
      P3["__element__"]
    >
  >,
  $.cardutil.multiplyCardinalities<
    $.cardutil.multiplyCardinalities<
      $.cardutil.paramCardinality<P1>,
      $.cardutil.paramCardinality<P2>
    >,
    $.cardutil.paramCardinality<P3>
  >
>;
type array_replaceλFuncExpr2<
  P1 extends $.TypeSet<$.ArrayType<_stdcal.$local_datetimeλICastableTo>>,
  P2 extends $.TypeSet<_stdcal.$local_datetimeλICastableTo>,
  P3 extends $.TypeSet<_stdcal.$local_datetimeλICastableTo>,
> = $.$expr_Function<
  $.ArrayType<
    _.syntax.getSharedParentPrimitive<
      _.syntax.getSharedParentPrimitive<
        P1["__element__"]["__element__"],
        P2["__element__"]
      >,
      P3["__element__"]
    >
  >,
  $.cardutil.multiplyCardinalities<
    $.cardutil.multiplyCardinalities<
      $.cardutil.paramCardinality<P1>,
      $.cardutil.paramCardinality<P2>
    >,
    $.cardutil.paramCardinality<P3>
  >
>;
type array_replaceλFuncExpr3<
  P1 extends $.TypeSet<$.ArrayType<$decimalλICastableTo>>,
  P2 extends $.TypeSet<$decimalλICastableTo>,
  P3 extends $.TypeSet<$decimalλICastableTo>,
> = $.$expr_Function<
  $.ArrayType<
    _.syntax.getSharedParentPrimitive<
      _.syntax.getSharedParentPrimitive<
        P1["__element__"]["__element__"],
        P2["__element__"]
      >,
      P3["__element__"]
    >
  >,
  $.cardutil.multiplyCardinalities<
    $.cardutil.multiplyCardinalities<
      $.cardutil.paramCardinality<P1>,
      $.cardutil.paramCardinality<P2>
    >,
    $.cardutil.paramCardinality<P3>
  >
>;
type array_replaceλFuncExpr4<
  P1 extends $.TypeSet<$.ArrayType<$.ObjectType>>,
  P2 extends $.TypeSet<$.ObjectType>,
  P3 extends $.TypeSet<$.ObjectType>,
> = $.$expr_Function<
  $.ArrayType<
    _.syntax.mergeObjectTypes<
      _.syntax.mergeObjectTypes<
        P1["__element__"]["__element__"],
        P2["__element__"]
      >,
      P3["__element__"]
    >
  >,
  $.cardutil.multiplyCardinalities<
    $.cardutil.multiplyCardinalities<
      $.cardutil.paramCardinality<P1>,
      $.cardutil.paramCardinality<P2>
    >,
    $.cardutil.paramCardinality<P3>
  >
>;
type array_replaceλFuncExpr5<
  P1 extends $.TypeSet<$.ArrayType<$.AnyTupleType>>,
  P2 extends $.TypeSet<$.AnyTupleType>,
  P3 extends $.TypeSet<$.AnyTupleType>,
> = $.$expr_Function<
  $.ArrayType<
    _.syntax.getSharedParentPrimitive<
      _.syntax.getSharedParentPrimitive<
        P1["__element__"]["__element__"],
        P2["__element__"]
      >,
      P3["__element__"]
    >
  >,
  $.cardutil.multiplyCardinalities<
    $.cardutil.multiplyCardinalities<
      $.cardutil.paramCardinality<P1>,
      $.cardutil.paramCardinality<P2>
    >,
    $.cardutil.paramCardinality<P3>
  >
>;
type array_replaceλFuncExpr6<
  P1 extends $.TypeSet<$.ArrayType<$.NonArrayType>>,
  P2 extends _.castMaps.orScalarLiteral<
    $.TypeSet<$.getPrimitiveNonArrayBaseType<P1["__element__"]["__element__"]>>
  >,
  P3 extends _.castMaps.orScalarLiteral<
    $.TypeSet<$.getPrimitiveNonArrayBaseType<P1["__element__"]["__element__"]>>
  >,
> = $.$expr_Function<
  $.ArrayType<$.getPrimitiveNonArrayBaseType<P1["__element__"]["__element__"]>>,
  $.cardutil.multiplyCardinalities<
    $.cardutil.multiplyCardinalities<
      $.cardutil.paramCardinality<P1>,
      $.cardutil.paramCardinality<P2>
    >,
    $.cardutil.paramCardinality<P3>
  >
>;
/**
 * Replace each array element equal to the second argument with the third argument.
 */
function array_replace<
  P1 extends $.TypeSet<$.ArrayType<_stdcal.$relative_durationλICastableTo>>,
  P2 extends $.TypeSet<_stdcal.$relative_durationλICastableTo>,
  P3 extends $.TypeSet<_stdcal.$relative_durationλICastableTo>,
>(array: P1, old: P2, new_2: P3): array_replaceλFuncExpr<P1, P2, P3>;
/**
 * Replace each array element equal to the second argument with the third argument.
 */
function array_replace<
  P1 extends $.TypeSet<$.ArrayType<_stdcal.$local_datetimeλICastableTo>>,
  P2 extends $.TypeSet<_stdcal.$local_datetimeλICastableTo>,
  P3 extends $.TypeSet<_stdcal.$local_datetimeλICastableTo>,
>(array: P1, old: P2, new_2: P3): array_replaceλFuncExpr2<P1, P2, P3>;
/**
 * Replace each array element equal to the second argument with the third argument.
 */
function array_replace<
  P1 extends $.TypeSet<$.ArrayType<$decimalλICastableTo>>,
  P2 extends $.TypeSet<$decimalλICastableTo>,
  P3 extends $.TypeSet<$decimalλICastableTo>,
>(array: P1, old: P2, new_2: P3): array_replaceλFuncExpr3<P1, P2, P3>;
/**
 * Replace each array element equal to the second argument with the third argument.
 */
function array_replace<
  P1 extends $.TypeSet<$.ArrayType<$.ObjectType>>,
  P2 extends $.TypeSet<$.ObjectType>,
  P3 extends $.TypeSet<$.ObjectType>,
>(array: P1, old: P2, new_2: P3): array_replaceλFuncExpr4<P1, P2, P3>;
/**
 * Replace each array element equal to the second argument with the third argument.
 */
function array_replace<
  P1 extends $.TypeSet<$.ArrayType<$.AnyTupleType>>,
  P2 extends $.TypeSet<$.AnyTupleType>,
  P3 extends $.TypeSet<$.AnyTupleType>,
>(array: P1, old: P2, new_2: P3): array_replaceλFuncExpr5<P1, P2, P3>;
/**
 * Replace each array element equal to the second argument with the third argument.
 */
function array_replace<
  P1 extends $.TypeSet<$.ArrayType<$.NonArrayType>>,
  P2 extends _.castMaps.orScalarLiteral<
    $.TypeSet<$.getPrimitiveNonArrayBaseType<P1["__element__"]["__element__"]>>
  >,
  P3 extends _.castMaps.orScalarLiteral<
    $.TypeSet<$.getPrimitiveNonArrayBaseType<P1["__element__"]["__element__"]>>
  >,
>(array: P1, old: P2, new_2: P3): array_replaceλFuncExpr6<P1, P2, P3>;
function array_replace(...args: any[]) {
  const {
    returnType,
    cardinality,
    args: positionalArgs,
    namedArgs,
  } = _.syntax.$resolveOverload("std::array_replace", args, _.spec, [
    {
      args: [
        {
          typeId: "a6f5468c-c2a6-5852-8f73-57484b1c6831",
          optional: false,
          setoftype: false,
          variadic: false,
        },
        {
          typeId: "00000000-0000-0000-0000-000000000001",
          optional: false,
          setoftype: false,
          variadic: false,
        },
        {
          typeId: "00000000-0000-0000-0000-000000000001",
          optional: false,
          setoftype: false,
          variadic: false,
        },
      ],
      returnTypeId: "a6f5468c-c2a6-5852-8f73-57484b1c6831",
    },
  ]);
  return _.syntax.$expressionify({
    __kind__: $.ExpressionKind.Function,
    __element__: returnType,
    __cardinality__: cardinality,
    __name__: "std::array_replace",
    __args__: positionalArgs,
    __namedargs__: namedArgs,
  }) as any;
}

type array_getλFuncExpr<
  NamedArgs extends {
    default?: $.TypeSet<_stdcal.$relative_durationλICastableTo>;
  },
  P1 extends $.TypeSet<$.ArrayType<_stdcal.$relative_durationλICastableTo>>,
  P2 extends _.castMaps.orScalarLiteral<$.TypeSet<$number>>,
> = $.$expr_Function<
  _.syntax.getSharedParentPrimitive<
    NamedArgs["default"] extends $.TypeSet
      ? NamedArgs["default"]["__element__"]
      : undefined,
    P1["__element__"]["__element__"]
  >,
  $.cardutil.overrideLowerBound<
    $.cardutil.multiplyCardinalities<
      $.cardutil.multiplyCardinalities<
        $.cardutil.paramCardinality<P1>,
        $.cardutil.paramCardinality<P2>
      >,
      $.cardutil.optionalParamCardinality<NamedArgs["default"]>
    >,
    "Zero"
  >
>;
type array_getλFuncExpr2<
  P1 extends $.TypeSet<$.ArrayType<_stdcal.$relative_durationλICastableTo>>,
  P2 extends _.castMaps.orScalarLiteral<$.TypeSet<$number>>,
> = $.$expr_Function<
  P1["__element__"]["__element__"],
  $.cardutil.overrideLowerBound<
    $.cardutil.multiplyCardinalities<
      $.cardutil.paramCardinality<P1>,
      $.cardutil.paramCardinality<P2>
    >,
    "Zero"
  >
>;
type array_getλFuncExpr3<
  NamedArgs extends {
    default?: $.TypeSet<_stdcal.$local_datetimeλICastableTo>;
  },
  P1 extends $.TypeSet<$.ArrayType<_stdcal.$local_datetimeλICastableTo>>,
  P2 extends _.castMaps.orScalarLiteral<$.TypeSet<$number>>,
> = $.$expr_Function<
  _.syntax.getSharedParentPrimitive<
    NamedArgs["default"] extends $.TypeSet
      ? NamedArgs["default"]["__element__"]
      : undefined,
    P1["__element__"]["__element__"]
  >,
  $.cardutil.overrideLowerBound<
    $.cardutil.multiplyCardinalities<
      $.cardutil.multiplyCardinalities<
        $.cardutil.paramCardinality<P1>,
        $.cardutil.paramCardinality<P2>
      >,
      $.cardutil.optionalParamCardinality<NamedArgs["default"]>
    >,
    "Zero"
  >
>;
type array_getλFuncExpr4<
  P1 extends $.TypeSet<$.ArrayType<_stdcal.$local_datetimeλICastableTo>>,
  P2 extends _.castMaps.orScalarLiteral<$.TypeSet<$number>>,
> = $.$expr_Function<
  P1["__element__"]["__element__"],
  $.cardutil.overrideLowerBound<
    $.cardutil.multiplyCardinalities<
      $.cardutil.paramCardinality<P1>,
      $.cardutil.paramCardinality<P2>
    >,
    "Zero"
  >
>;
type array_getλFuncExpr5<
  NamedArgs extends {
    default?: $.TypeSet<$decimalλICastableTo>;
  },
  P1 extends $.TypeSet<$.ArrayType<$decimalλICastableTo>>,
  P2 extends _.castMaps.orScalarLiteral<$.TypeSet<$number>>,
> = $.$expr_Function<
  _.syntax.getSharedParentPrimitive<
    NamedArgs["default"] extends $.TypeSet
      ? NamedArgs["default"]["__element__"]
      : undefined,
    P1["__element__"]["__element__"]
  >,
  $.cardutil.overrideLowerBound<
    $.cardutil.multiplyCardinalities<
      $.cardutil.multiplyCardinalities<
        $.cardutil.paramCardinality<P1>,
        $.cardutil.paramCardinality<P2>
      >,
      $.cardutil.optionalParamCardinality<NamedArgs["default"]>
    >,
    "Zero"
  >
>;
type array_getλFuncExpr6<
  P1 extends $.TypeSet<$.ArrayType<$decimalλICastableTo>>,
  P2 extends _.castMaps.orScalarLiteral<$.TypeSet<$number>>,
> = $.$expr_Function<
  P1["__element__"]["__element__"],
  $.cardutil.overrideLowerBound<
    $.cardutil.multiplyCardinalities<
      $.cardutil.paramCardinality<P1>,
      $.cardutil.paramCardinality<P2>
    >,
    "Zero"
  >
>;
type array_getλFuncExpr7<
  NamedArgs extends {
    default?: $.TypeSet<$.ObjectType>;
  },
  P1 extends $.TypeSet<$.ArrayType<$.ObjectType>>,
  P2 extends _.castMaps.orScalarLiteral<$.TypeSet<$number>>,
> = $.$expr_Function<
  _.syntax.mergeObjectTypes<
    NamedArgs["default"] extends $.TypeSet
      ? NamedArgs["default"]["__element__"]
      : undefined,
    P1["__element__"]["__element__"]
  >,
  $.cardutil.overrideLowerBound<
    $.cardutil.multiplyCardinalities<
      $.cardutil.multiplyCardinalities<
        $.cardutil.paramCardinality<P1>,
        $.cardutil.paramCardinality<P2>
      >,
      $.cardutil.optionalParamCardinality<NamedArgs["default"]>
    >,
    "Zero"
  >
>;
type array_getλFuncExpr8<
  P1 extends $.TypeSet<$.ArrayType<$.ObjectType>>,
  P2 extends _.castMaps.orScalarLiteral<$.TypeSet<$number>>,
> = $.$expr_Function<
  P1["__element__"]["__element__"],
  $.cardutil.overrideLowerBound<
    $.cardutil.multiplyCardinalities<
      $.cardutil.paramCardinality<P1>,
      $.cardutil.paramCardinality<P2>
    >,
    "Zero"
  >
>;
type array_getλFuncExpr9<
  NamedArgs extends {
    default?: $.TypeSet<$.AnyTupleType>;
  },
  P1 extends $.TypeSet<$.ArrayType<$.AnyTupleType>>,
  P2 extends _.castMaps.orScalarLiteral<$.TypeSet<$number>>,
> = $.$expr_Function<
  _.syntax.getSharedParentPrimitive<
    NamedArgs["default"] extends $.TypeSet
      ? NamedArgs["default"]["__element__"]
      : undefined,
    P1["__element__"]["__element__"]
  >,
  $.cardutil.overrideLowerBound<
    $.cardutil.multiplyCardinalities<
      $.cardutil.multiplyCardinalities<
        $.cardutil.paramCardinality<P1>,
        $.cardutil.paramCardinality<P2>
      >,
      $.cardutil.optionalParamCardinality<NamedArgs["default"]>
    >,
    "Zero"
  >
>;
type array_getλFuncExpr10<
  P1 extends $.TypeSet<$.ArrayType<$.AnyTupleType>>,
  P2 extends _.castMaps.orScalarLiteral<$.TypeSet<$number>>,
> = $.$expr_Function<
  P1["__element__"]["__element__"],
  $.cardutil.overrideLowerBound<
    $.cardutil.multiplyCardinalities<
      $.cardutil.paramCardinality<P1>,
      $.cardutil.paramCardinality<P2>
    >,
    "Zero"
  >
>;
type array_getλFuncExpr11<
  NamedArgs extends {
    default?: _.castMaps.orScalarLiteral<
      $.TypeSet<
        $.getPrimitiveNonArrayBaseType<P1["__element__"]["__element__"]>
      >
    >;
  },
  P1 extends $.TypeSet<$.ArrayType<$.NonArrayType>>,
  P2 extends _.castMaps.orScalarLiteral<$.TypeSet<$number>>,
> = $.$expr_Function<
  $.getPrimitiveNonArrayBaseType<P1["__element__"]["__element__"]>,
  $.cardutil.overrideLowerBound<
    $.cardutil.multiplyCardinalities<
      $.cardutil.multiplyCardinalities<
        $.cardutil.paramCardinality<P1>,
        $.cardutil.paramCardinality<P2>
      >,
      $.cardutil.optionalParamCardinality<NamedArgs["default"]>
    >,
    "Zero"
  >
>;
type array_getλFuncExpr12<
  P1 extends $.TypeSet<$.ArrayType<$.NonArrayType>>,
  P2 extends _.castMaps.orScalarLiteral<$.TypeSet<$number>>,
> = $.$expr_Function<
  $.getPrimitiveNonArrayBaseType<P1["__element__"]["__element__"]>,
  $.cardutil.overrideLowerBound<
    $.cardutil.multiplyCardinalities<
      $.cardutil.paramCardinality<P1>,
      $.cardutil.paramCardinality<P2>
    >,
    "Zero"
  >
>;
/**
 * Return the element of *array* at the specified *index*.
 */
function array_get<
  NamedArgs extends {
    default?: $.TypeSet<_stdcal.$relative_durationλICastableTo>;
  },
  P1 extends $.TypeSet<$.ArrayType<_stdcal.$relative_durationλICastableTo>>,
  P2 extends _.castMaps.orScalarLiteral<$.TypeSet<$number>>,
>(
  namedArgs: NamedArgs,
  array: P1,
  idx: P2,
): array_getλFuncExpr<NamedArgs, P1, P2>;
/**
 * Return the element of *array* at the specified *index*.
 */
function array_get<
  P1 extends $.TypeSet<$.ArrayType<_stdcal.$relative_durationλICastableTo>>,
  P2 extends _.castMaps.orScalarLiteral<$.TypeSet<$number>>,
>(array: P1, idx: P2): array_getλFuncExpr2<P1, P2>;
/**
 * Return the element of *array* at the specified *index*.
 */
function array_get<
  NamedArgs extends {
    default?: $.TypeSet<_stdcal.$local_datetimeλICastableTo>;
  },
  P1 extends $.TypeSet<$.ArrayType<_stdcal.$local_datetimeλICastableTo>>,
  P2 extends _.castMaps.orScalarLiteral<$.TypeSet<$number>>,
>(
  namedArgs: NamedArgs,
  array: P1,
  idx: P2,
): array_getλFuncExpr3<NamedArgs, P1, P2>;
/**
 * Return the element of *array* at the specified *index*.
 */
function array_get<
  P1 extends $.TypeSet<$.ArrayType<_stdcal.$local_datetimeλICastableTo>>,
  P2 extends _.castMaps.orScalarLiteral<$.TypeSet<$number>>,
>(array: P1, idx: P2): array_getλFuncExpr4<P1, P2>;
/**
 * Return the element of *array* at the specified *index*.
 */
function array_get<
  NamedArgs extends {
    default?: $.TypeSet<$decimalλICastableTo>;
  },
  P1 extends $.TypeSet<$.ArrayType<$decimalλICastableTo>>,
  P2 extends _.castMaps.orScalarLiteral<$.TypeSet<$number>>,
>(
  namedArgs: NamedArgs,
  array: P1,
  idx: P2,
): array_getλFuncExpr5<NamedArgs, P1, P2>;
/**
 * Return the element of *array* at the specified *index*.
 */
function array_get<
  P1 extends $.TypeSet<$.ArrayType<$decimalλICastableTo>>,
  P2 extends _.castMaps.orScalarLiteral<$.TypeSet<$number>>,
>(array: P1, idx: P2): array_getλFuncExpr6<P1, P2>;
/**
 * Return the element of *array* at the specified *index*.
 */
function array_get<
  NamedArgs extends {
    default?: $.TypeSet<$.ObjectType>;
  },
  P1 extends $.TypeSet<$.ArrayType<$.ObjectType>>,
  P2 extends _.castMaps.orScalarLiteral<$.TypeSet<$number>>,
>(
  namedArgs: NamedArgs,
  array: P1,
  idx: P2,
): array_getλFuncExpr7<NamedArgs, P1, P2>;
/**
 * Return the element of *array* at the specified *index*.
 */
function array_get<
  P1 extends $.TypeSet<$.ArrayType<$.ObjectType>>,
  P2 extends _.castMaps.orScalarLiteral<$.TypeSet<$number>>,
>(array: P1, idx: P2): array_getλFuncExpr8<P1, P2>;
/**
 * Return the element of *array* at the specified *index*.
 */
function array_get<
  NamedArgs extends {
    default?: $.TypeSet<$.AnyTupleType>;
  },
  P1 extends $.TypeSet<$.ArrayType<$.AnyTupleType>>,
  P2 extends _.castMaps.orScalarLiteral<$.TypeSet<$number>>,
>(
  namedArgs: NamedArgs,
  array: P1,
  idx: P2,
): array_getλFuncExpr9<NamedArgs, P1, P2>;
/**
 * Return the element of *array* at the specified *index*.
 */
function array_get<
  P1 extends $.TypeSet<$.ArrayType<$.AnyTupleType>>,
  P2 extends _.castMaps.orScalarLiteral<$.TypeSet<$number>>,
>(array: P1, idx: P2): array_getλFuncExpr10<P1, P2>;
/**
 * Return the element of *array* at the specified *index*.
 */
function array_get<
  NamedArgs extends {
    default?: _.castMaps.orScalarLiteral<
      $.TypeSet<
        $.getPrimitiveNonArrayBaseType<P1["__element__"]["__element__"]>
      >
    >;
  },
  P1 extends $.TypeSet<$.ArrayType<$.NonArrayType>>,
  P2 extends _.castMaps.orScalarLiteral<$.TypeSet<$number>>,
>(
  namedArgs: NamedArgs,
  array: P1,
  idx: P2,
): array_getλFuncExpr11<NamedArgs, P1, P2>;
/**
 * Return the element of *array* at the specified *index*.
 */
function array_get<
  P1 extends $.TypeSet<$.ArrayType<$.NonArrayType>>,
  P2 extends _.castMaps.orScalarLiteral<$.TypeSet<$number>>,
>(array: P1, idx: P2): array_getλFuncExpr12<P1, P2>;
function array_get(...args: any[]) {
  const {
    returnType,
    cardinality,
    args: positionalArgs,
    namedArgs,
  } = _.syntax.$resolveOverload("std::array_get", args, _.spec, [
    {
      args: [
        {
          typeId: "a6f5468c-c2a6-5852-8f73-57484b1c6831",
          optional: false,
          setoftype: false,
          variadic: false,
        },
        {
          typeId: "00000000-0000-0000-0000-0000000001ff",
          optional: false,
          setoftype: false,
          variadic: false,
        },
      ],
      namedArgs: {
        default: {
          typeId: "00000000-0000-0000-0000-000000000001",
          optional: true,
          setoftype: false,
          variadic: false,
        },
      },
      returnTypeId: "00000000-0000-0000-0000-000000000001",
      returnTypemod: "OptionalType",
    },
  ]);
  return _.syntax.$expressionify({
    __kind__: $.ExpressionKind.Function,
    __element__: returnType,
    __cardinality__: cardinality,
    __name__: "std::array_get",
    __args__: positionalArgs,
    __namedargs__: namedArgs,
  }) as any;
}

type array_setλFuncExpr<
  P1 extends $.TypeSet<$.ArrayType<_stdcal.$relative_durationλICastableTo>>,
  P2 extends _.castMaps.orScalarLiteral<$.TypeSet<$number>>,
  P3 extends $.TypeSet<_stdcal.$relative_durationλICastableTo>,
> = $.$expr_Function<
  $.ArrayType<
    _.syntax.getSharedParentPrimitive<
      P1["__element__"]["__element__"],
      P3["__element__"]
    >
  >,
  $.cardutil.multiplyCardinalities<
    $.cardutil.multiplyCardinalities<
      $.cardutil.paramCardinality<P1>,
      $.cardutil.paramCardinality<P2>
    >,
    $.cardutil.paramCardinality<P3>
  >
>;
type array_setλFuncExpr2<
  P1 extends $.TypeSet<$.ArrayType<_stdcal.$local_datetimeλICastableTo>>,
  P2 extends _.castMaps.orScalarLiteral<$.TypeSet<$number>>,
  P3 extends $.TypeSet<_stdcal.$local_datetimeλICastableTo>,
> = $.$expr_Function<
  $.ArrayType<
    _.syntax.getSharedParentPrimitive<
      P1["__element__"]["__element__"],
      P3["__element__"]
    >
  >,
  $.cardutil.multiplyCardinalities<
    $.cardutil.multiplyCardinalities<
      $.cardutil.paramCardinality<P1>,
      $.cardutil.paramCardinality<P2>
    >,
    $.cardutil.paramCardinality<P3>
  >
>;
type array_setλFuncExpr3<
  P1 extends $.TypeSet<$.ArrayType<$decimalλICastableTo>>,
  P2 extends _.castMaps.orScalarLiteral<$.TypeSet<$number>>,
  P3 extends $.TypeSet<$decimalλICastableTo>,
> = $.$expr_Function<
  $.ArrayType<
    _.syntax.getSharedParentPrimitive<
      P1["__element__"]["__element__"],
      P3["__element__"]
    >
  >,
  $.cardutil.multiplyCardinalities<
    $.cardutil.multiplyCardinalities<
      $.cardutil.paramCardinality<P1>,
      $.cardutil.paramCardinality<P2>
    >,
    $.cardutil.paramCardinality<P3>
  >
>;
type array_setλFuncExpr4<
  P1 extends $.TypeSet<$.ArrayType<$.ObjectType>>,
  P2 extends _.castMaps.orScalarLiteral<$.TypeSet<$number>>,
  P3 extends $.TypeSet<$.ObjectType>,
> = $.$expr_Function<
  $.ArrayType<
    _.syntax.mergeObjectTypes<
      P1["__element__"]["__element__"],
      P3["__element__"]
    >
  >,
  $.cardutil.multiplyCardinalities<
    $.cardutil.multiplyCardinalities<
      $.cardutil.paramCardinality<P1>,
      $.cardutil.paramCardinality<P2>
    >,
    $.cardutil.paramCardinality<P3>
  >
>;
type array_setλFuncExpr5<
  P1 extends $.TypeSet<$.ArrayType<$.AnyTupleType>>,
  P2 extends _.castMaps.orScalarLiteral<$.TypeSet<$number>>,
  P3 extends $.TypeSet<$.AnyTupleType>,
> = $.$expr_Function<
  $.ArrayType<
    _.syntax.getSharedParentPrimitive<
      P1["__element__"]["__element__"],
      P3["__element__"]
    >
  >,
  $.cardutil.multiplyCardinalities<
    $.cardutil.multiplyCardinalities<
      $.cardutil.paramCardinality<P1>,
      $.cardutil.paramCardinality<P2>
    >,
    $.cardutil.paramCardinality<P3>
  >
>;
type array_setλFuncExpr6<
  P1 extends $.TypeSet<$.ArrayType<$.NonArrayType>>,
  P2 extends _.castMaps.orScalarLiteral<$.TypeSet<$number>>,
  P3 extends _.castMaps.orScalarLiteral<
    $.TypeSet<$.getPrimitiveNonArrayBaseType<P1["__element__"]["__element__"]>>
  >,
> = $.$expr_Function<
  $.ArrayType<$.getPrimitiveNonArrayBaseType<P1["__element__"]["__element__"]>>,
  $.cardutil.multiplyCardinalities<
    $.cardutil.multiplyCardinalities<
      $.cardutil.paramCardinality<P1>,
      $.cardutil.paramCardinality<P2>
    >,
    $.cardutil.paramCardinality<P3>
  >
>;
/**
 * Set the element of *array* at the specified *index*.
 */
function array_set<
  P1 extends $.TypeSet<$.ArrayType<_stdcal.$relative_durationλICastableTo>>,
  P2 extends _.castMaps.orScalarLiteral<$.TypeSet<$number>>,
  P3 extends $.TypeSet<_stdcal.$relative_durationλICastableTo>,
>(array: P1, idx: P2, val: P3): array_setλFuncExpr<P1, P2, P3>;
/**
 * Set the element of *array* at the specified *index*.
 */
function array_set<
  P1 extends $.TypeSet<$.ArrayType<_stdcal.$local_datetimeλICastableTo>>,
  P2 extends _.castMaps.orScalarLiteral<$.TypeSet<$number>>,
  P3 extends $.TypeSet<_stdcal.$local_datetimeλICastableTo>,
>(array: P1, idx: P2, val: P3): array_setλFuncExpr2<P1, P2, P3>;
/**
 * Set the element of *array* at the specified *index*.
 */
function array_set<
  P1 extends $.TypeSet<$.ArrayType<$decimalλICastableTo>>,
  P2 extends _.castMaps.orScalarLiteral<$.TypeSet<$number>>,
  P3 extends $.TypeSet<$decimalλICastableTo>,
>(array: P1, idx: P2, val: P3): array_setλFuncExpr3<P1, P2, P3>;
/**
 * Set the element of *array* at the specified *index*.
 */
function array_set<
  P1 extends $.TypeSet<$.ArrayType<$.ObjectType>>,
  P2 extends _.castMaps.orScalarLiteral<$.TypeSet<$number>>,
  P3 extends $.TypeSet<$.ObjectType>,
>(array: P1, idx: P2, val: P3): array_setλFuncExpr4<P1, P2, P3>;
/**
 * Set the element of *array* at the specified *index*.
 */
function array_set<
  P1 extends $.TypeSet<$.ArrayType<$.AnyTupleType>>,
  P2 extends _.castMaps.orScalarLiteral<$.TypeSet<$number>>,
  P3 extends $.TypeSet<$.AnyTupleType>,
>(array: P1, idx: P2, val: P3): array_setλFuncExpr5<P1, P2, P3>;
/**
 * Set the element of *array* at the specified *index*.
 */
function array_set<
  P1 extends $.TypeSet<$.ArrayType<$.NonArrayType>>,
  P2 extends _.castMaps.orScalarLiteral<$.TypeSet<$number>>,
  P3 extends _.castMaps.orScalarLiteral<
    $.TypeSet<$.getPrimitiveNonArrayBaseType<P1["__element__"]["__element__"]>>
  >,
>(array: P1, idx: P2, val: P3): array_setλFuncExpr6<P1, P2, P3>;
function array_set(...args: any[]) {
  const {
    returnType,
    cardinality,
    args: positionalArgs,
    namedArgs,
  } = _.syntax.$resolveOverload("std::array_set", args, _.spec, [
    {
      args: [
        {
          typeId: "a6f5468c-c2a6-5852-8f73-57484b1c6831",
          optional: false,
          setoftype: false,
          variadic: false,
        },
        {
          typeId: "00000000-0000-0000-0000-0000000001ff",
          optional: false,
          setoftype: false,
          variadic: false,
        },
        {
          typeId: "00000000-0000-0000-0000-000000000001",
          optional: false,
          setoftype: false,
          variadic: false,
        },
      ],
      returnTypeId: "a6f5468c-c2a6-5852-8f73-57484b1c6831",
    },
  ]);
  return _.syntax.$expressionify({
    __kind__: $.ExpressionKind.Function,
    __element__: returnType,
    __cardinality__: cardinality,
    __name__: "std::array_set",
    __args__: positionalArgs,
    __namedargs__: namedArgs,
  }) as any;
}

type array_insertλFuncExpr<
  P1 extends $.TypeSet<$.ArrayType<_stdcal.$relative_durationλICastableTo>>,
  P2 extends _.castMaps.orScalarLiteral<$.TypeSet<$number>>,
  P3 extends $.TypeSet<_stdcal.$relative_durationλICastableTo>,
> = $.$expr_Function<
  $.ArrayType<
    _.syntax.getSharedParentPrimitive<
      P1["__element__"]["__element__"],
      P3["__element__"]
    >
  >,
  $.cardutil.multiplyCardinalities<
    $.cardutil.multiplyCardinalities<
      $.cardutil.paramCardinality<P1>,
      $.cardutil.paramCardinality<P2>
    >,
    $.cardutil.paramCardinality<P3>
  >
>;
type array_insertλFuncExpr2<
  P1 extends $.TypeSet<$.ArrayType<_stdcal.$local_datetimeλICastableTo>>,
  P2 extends _.castMaps.orScalarLiteral<$.TypeSet<$number>>,
  P3 extends $.TypeSet<_stdcal.$local_datetimeλICastableTo>,
> = $.$expr_Function<
  $.ArrayType<
    _.syntax.getSharedParentPrimitive<
      P1["__element__"]["__element__"],
      P3["__element__"]
    >
  >,
  $.cardutil.multiplyCardinalities<
    $.cardutil.multiplyCardinalities<
      $.cardutil.paramCardinality<P1>,
      $.cardutil.paramCardinality<P2>
    >,
    $.cardutil.paramCardinality<P3>
  >
>;
type array_insertλFuncExpr3<
  P1 extends $.TypeSet<$.ArrayType<$decimalλICastableTo>>,
  P2 extends _.castMaps.orScalarLiteral<$.TypeSet<$number>>,
  P3 extends $.TypeSet<$decimalλICastableTo>,
> = $.$expr_Function<
  $.ArrayType<
    _.syntax.getSharedParentPrimitive<
      P1["__element__"]["__element__"],
      P3["__element__"]
    >
  >,
  $.cardutil.multiplyCardinalities<
    $.cardutil.multiplyCardinalities<
      $.cardutil.paramCardinality<P1>,
      $.cardutil.paramCardinality<P2>
    >,
    $.cardutil.paramCardinality<P3>
  >
>;
type array_insertλFuncExpr4<
  P1 extends $.TypeSet<$.ArrayType<$.ObjectType>>,
  P2 extends _.castMaps.orScalarLiteral<$.TypeSet<$number>>,
  P3 extends $.TypeSet<$.ObjectType>,
> = $.$expr_Function<
  $.ArrayType<
    _.syntax.mergeObjectTypes<
      P1["__element__"]["__element__"],
      P3["__element__"]
    >
  >,
  $.cardutil.multiplyCardinalities<
    $.cardutil.multiplyCardinalities<
      $.cardutil.paramCardinality<P1>,
      $.cardutil.paramCardinality<P2>
    >,
    $.cardutil.paramCardinality<P3>
  >
>;
type array_insertλFuncExpr5<
  P1 extends $.TypeSet<$.ArrayType<$.AnyTupleType>>,
  P2 extends _.castMaps.orScalarLiteral<$.TypeSet<$number>>,
  P3 extends $.TypeSet<$.AnyTupleType>,
> = $.$expr_Function<
  $.ArrayType<
    _.syntax.getSharedParentPrimitive<
      P1["__element__"]["__element__"],
      P3["__element__"]
    >
  >,
  $.cardutil.multiplyCardinalities<
    $.cardutil.multiplyCardinalities<
      $.cardutil.paramCardinality<P1>,
      $.cardutil.paramCardinality<P2>
    >,
    $.cardutil.paramCardinality<P3>
  >
>;
type array_insertλFuncExpr6<
  P1 extends $.TypeSet<$.ArrayType<$.NonArrayType>>,
  P2 extends _.castMaps.orScalarLiteral<$.TypeSet<$number>>,
  P3 extends _.castMaps.orScalarLiteral<
    $.TypeSet<$.getPrimitiveNonArrayBaseType<P1["__element__"]["__element__"]>>
  >,
> = $.$expr_Function<
  $.ArrayType<$.getPrimitiveNonArrayBaseType<P1["__element__"]["__element__"]>>,
  $.cardutil.multiplyCardinalities<
    $.cardutil.multiplyCardinalities<
      $.cardutil.paramCardinality<P1>,
      $.cardutil.paramCardinality<P2>
    >,
    $.cardutil.paramCardinality<P3>
  >
>;
/**
 * Insert *val* at the specified *index* of the *array*.
 */
function array_insert<
  P1 extends $.TypeSet<$.ArrayType<_stdcal.$relative_durationλICastableTo>>,
  P2 extends _.castMaps.orScalarLiteral<$.TypeSet<$number>>,
  P3 extends $.TypeSet<_stdcal.$relative_durationλICastableTo>,
>(array: P1, idx: P2, val: P3): array_insertλFuncExpr<P1, P2, P3>;
/**
 * Insert *val* at the specified *index* of the *array*.
 */
function array_insert<
  P1 extends $.TypeSet<$.ArrayType<_stdcal.$local_datetimeλICastableTo>>,
  P2 extends _.castMaps.orScalarLiteral<$.TypeSet<$number>>,
  P3 extends $.TypeSet<_stdcal.$local_datetimeλICastableTo>,
>(array: P1, idx: P2, val: P3): array_insertλFuncExpr2<P1, P2, P3>;
/**
 * Insert *val* at the specified *index* of the *array*.
 */
function array_insert<
  P1 extends $.TypeSet<$.ArrayType<$decimalλICastableTo>>,
  P2 extends _.castMaps.orScalarLiteral<$.TypeSet<$number>>,
  P3 extends $.TypeSet<$decimalλICastableTo>,
>(array: P1, idx: P2, val: P3): array_insertλFuncExpr3<P1, P2, P3>;
/**
 * Insert *val* at the specified *index* of the *array*.
 */
function array_insert<
  P1 extends $.TypeSet<$.ArrayType<$.ObjectType>>,
  P2 extends _.castMaps.orScalarLiteral<$.TypeSet<$number>>,
  P3 extends $.TypeSet<$.ObjectType>,
>(array: P1, idx: P2, val: P3): array_insertλFuncExpr4<P1, P2, P3>;
/**
 * Insert *val* at the specified *index* of the *array*.
 */
function array_insert<
  P1 extends $.TypeSet<$.ArrayType<$.AnyTupleType>>,
  P2 extends _.castMaps.orScalarLiteral<$.TypeSet<$number>>,
  P3 extends $.TypeSet<$.AnyTupleType>,
>(array: P1, idx: P2, val: P3): array_insertλFuncExpr5<P1, P2, P3>;
/**
 * Insert *val* at the specified *index* of the *array*.
 */
function array_insert<
  P1 extends $.TypeSet<$.ArrayType<$.NonArrayType>>,
  P2 extends _.castMaps.orScalarLiteral<$.TypeSet<$number>>,
  P3 extends _.castMaps.orScalarLiteral<
    $.TypeSet<$.getPrimitiveNonArrayBaseType<P1["__element__"]["__element__"]>>
  >,
>(array: P1, idx: P2, val: P3): array_insertλFuncExpr6<P1, P2, P3>;
function array_insert(...args: any[]) {
  const {
    returnType,
    cardinality,
    args: positionalArgs,
    namedArgs,
  } = _.syntax.$resolveOverload("std::array_insert", args, _.spec, [
    {
      args: [
        {
          typeId: "a6f5468c-c2a6-5852-8f73-57484b1c6831",
          optional: false,
          setoftype: false,
          variadic: false,
        },
        {
          typeId: "00000000-0000-0000-0000-0000000001ff",
          optional: false,
          setoftype: false,
          variadic: false,
        },
        {
          typeId: "00000000-0000-0000-0000-000000000001",
          optional: false,
          setoftype: false,
          variadic: false,
        },
      ],
      returnTypeId: "a6f5468c-c2a6-5852-8f73-57484b1c6831",
    },
  ]);
  return _.syntax.$expressionify({
    __kind__: $.ExpressionKind.Function,
    __element__: returnType,
    __cardinality__: cardinality,
    __name__: "std::array_insert",
    __args__: positionalArgs,
    __namedargs__: namedArgs,
  }) as any;
}

type array_joinλFuncExpr<
  P1 extends $.TypeSet<$.ArrayType<$str>>,
  P2 extends _.castMaps.orScalarLiteral<$.TypeSet<$str>>,
> = $.$expr_Function<
  $str,
  $.cardutil.multiplyCardinalities<
    $.cardutil.paramCardinality<P1>,
    $.cardutil.paramCardinality<P2>
  >
>;
type array_joinλFuncExpr2<
  P1 extends $.TypeSet<$.ArrayType<$bytes>>,
  P2 extends _.castMaps.orScalarLiteral<$.TypeSet<$bytes>>,
> = $.$expr_Function<
  $bytes,
  $.cardutil.multiplyCardinalities<
    $.cardutil.paramCardinality<P1>,
    $.cardutil.paramCardinality<P2>
  >
>;
/**
 * Render an array to a string.
 */
function array_join<
  P1 extends $.TypeSet<$.ArrayType<$str>>,
  P2 extends _.castMaps.orScalarLiteral<$.TypeSet<$str>>,
>(array: P1, delimiter: P2): array_joinλFuncExpr<P1, P2>;
/**
 * Render an array to a byte-string.
 */
function array_join<
  P1 extends $.TypeSet<$.ArrayType<$bytes>>,
  P2 extends _.castMaps.orScalarLiteral<$.TypeSet<$bytes>>,
>(array: P1, delimiter: P2): array_joinλFuncExpr2<P1, P2>;
function array_join(...args: any[]) {
  const {
    returnType,
    cardinality,
    args: positionalArgs,
    namedArgs,
  } = _.syntax.$resolveOverload("std::array_join", args, _.spec, [
    {
      args: [
        {
          typeId: "bb221d39-09f1-507e-8851-62075bb61823",
          optional: false,
          setoftype: false,
          variadic: false,
        },
        {
          typeId: "00000000-0000-0000-0000-000000000101",
          optional: false,
          setoftype: false,
          variadic: false,
        },
      ],
      returnTypeId: "00000000-0000-0000-0000-000000000101",
    },
    {
      args: [
        {
          typeId: "48aa45ef-4d93-5fbd-bfb5-81bf67b49eab",
          optional: false,
          setoftype: false,
          variadic: false,
        },
        {
          typeId: "00000000-0000-0000-0000-000000000102",
          optional: false,
          setoftype: false,
          variadic: false,
        },
      ],
      returnTypeId: "00000000-0000-0000-0000-000000000102",
    },
  ]);
  return _.syntax.$expressionify({
    __kind__: $.ExpressionKind.Function,
    __element__: returnType,
    __cardinality__: cardinality,
    __name__: "std::array_join",
    __args__: positionalArgs,
    __namedargs__: namedArgs,
  }) as any;
}

type bytes_get_bitλFuncExpr<
  P1 extends _.castMaps.orScalarLiteral<$.TypeSet<$bytes>>,
  P2 extends _.castMaps.orScalarLiteral<$.TypeSet<$number>>,
> = $.$expr_Function<
  $number,
  $.cardutil.multiplyCardinalities<
    $.cardutil.paramCardinality<P1>,
    $.cardutil.paramCardinality<P2>
  >
>;
/**
 * Get the *nth* bit of the *bytes* value.
 */
function bytes_get_bit<
  P1 extends _.castMaps.orScalarLiteral<$.TypeSet<$bytes>>,
  P2 extends _.castMaps.orScalarLiteral<$.TypeSet<$number>>,
>(bytes: P1, num: P2): bytes_get_bitλFuncExpr<P1, P2>;
function bytes_get_bit(...args: any[]) {
  const {
    returnType,
    cardinality,
    args: positionalArgs,
    namedArgs,
  } = _.syntax.$resolveOverload("std::bytes_get_bit", args, _.spec, [
    {
      args: [
        {
          typeId: "00000000-0000-0000-0000-000000000102",
          optional: false,
          setoftype: false,
          variadic: false,
        },
        {
          typeId: "00000000-0000-0000-0000-0000000001ff",
          optional: false,
          setoftype: false,
          variadic: false,
        },
      ],
      returnTypeId: "00000000-0000-0000-0000-0000000001ff",
    },
  ]);
  return _.syntax.$expressionify({
    __kind__: $.ExpressionKind.Function,
    __element__: returnType,
    __cardinality__: cardinality,
    __name__: "std::bytes_get_bit",
    __args__: positionalArgs,
    __namedargs__: namedArgs,
  }) as any;
}

type datetime_currentλFuncExpr = $.$expr_Function<$datetime, $.Cardinality.One>;
/**
 * Return the current server date and time.
 */
function datetime_current(): datetime_currentλFuncExpr;
function datetime_current(...args: any[]) {
  const {
    returnType,
    cardinality,
    args: positionalArgs,
    namedArgs,
  } = _.syntax.$resolveOverload("std::datetime_current", args, _.spec, [
    { args: [], returnTypeId: "00000000-0000-0000-0000-00000000010a" },
  ]);
  return _.syntax.$expressionify({
    __kind__: $.ExpressionKind.Function,
    __element__: returnType,
    __cardinality__: cardinality,
    __name__: "std::datetime_current",
    __args__: positionalArgs,
    __namedargs__: namedArgs,
  }) as any;
}

type datetime_of_transactionλFuncExpr = $.$expr_Function<
  $datetime,
  $.Cardinality.One
>;
/**
 * Return the date and time of the start of the current transaction.
 */
function datetime_of_transaction(): datetime_of_transactionλFuncExpr;
function datetime_of_transaction(...args: any[]) {
  const {
    returnType,
    cardinality,
    args: positionalArgs,
    namedArgs,
  } = _.syntax.$resolveOverload("std::datetime_of_transaction", args, _.spec, [
    { args: [], returnTypeId: "00000000-0000-0000-0000-00000000010a" },
  ]);
  return _.syntax.$expressionify({
    __kind__: $.ExpressionKind.Function,
    __element__: returnType,
    __cardinality__: cardinality,
    __name__: "std::datetime_of_transaction",
    __args__: positionalArgs,
    __namedargs__: namedArgs,
  }) as any;
}

type datetime_of_statementλFuncExpr = $.$expr_Function<
  $datetime,
  $.Cardinality.One
>;
/**
 * Return the date and time of the start of the current statement.
 */
function datetime_of_statement(): datetime_of_statementλFuncExpr;
function datetime_of_statement(...args: any[]) {
  const {
    returnType,
    cardinality,
    args: positionalArgs,
    namedArgs,
  } = _.syntax.$resolveOverload("std::datetime_of_statement", args, _.spec, [
    { args: [], returnTypeId: "00000000-0000-0000-0000-00000000010a" },
  ]);
  return _.syntax.$expressionify({
    __kind__: $.ExpressionKind.Function,
    __element__: returnType,
    __cardinality__: cardinality,
    __name__: "std::datetime_of_statement",
    __args__: positionalArgs,
    __namedargs__: namedArgs,
  }) as any;
}

type datetime_getλFuncExpr<
  P1 extends _.castMaps.orScalarLiteral<$.TypeSet<$datetime>>,
  P2 extends _.castMaps.orScalarLiteral<$.TypeSet<$str>>,
> = $.$expr_Function<
  $number,
  $.cardutil.multiplyCardinalities<
    $.cardutil.paramCardinality<P1>,
    $.cardutil.paramCardinality<P2>
  >
>;
type datetime_getλFuncExpr2<
  P1 extends _.castMaps.orScalarLiteral<
    $.TypeSet<_stdcal.$local_datetimeλICastableTo>
  >,
  P2 extends _.castMaps.orScalarLiteral<$.TypeSet<$str>>,
> = $.$expr_Function<
  $number,
  $.cardutil.multiplyCardinalities<
    $.cardutil.paramCardinality<P1>,
    $.cardutil.paramCardinality<P2>
  >
>;
/**
 * Extract a specific element of input datetime by name.
 */
function datetime_get<
  P1 extends _.castMaps.orScalarLiteral<$.TypeSet<$datetime>>,
  P2 extends _.castMaps.orScalarLiteral<$.TypeSet<$str>>,
>(dt: P1, el: P2): datetime_getλFuncExpr<P1, P2>;
/**
 * Extract a specific element of input datetime by name.
 */
function datetime_get<
  P1 extends _.castMaps.orScalarLiteral<
    $.TypeSet<_stdcal.$local_datetimeλICastableTo>
  >,
  P2 extends _.castMaps.orScalarLiteral<$.TypeSet<$str>>,
>(dt: P1, el: P2): datetime_getλFuncExpr2<P1, P2>;
function datetime_get(...args: any[]) {
  const {
    returnType,
    cardinality,
    args: positionalArgs,
    namedArgs,
  } = _.syntax.$resolveOverload("std::datetime_get", args, _.spec, [
    {
      args: [
        {
          typeId: "00000000-0000-0000-0000-00000000010a",
          optional: false,
          setoftype: false,
          variadic: false,
        },
        {
          typeId: "00000000-0000-0000-0000-000000000101",
          optional: false,
          setoftype: false,
          variadic: false,
        },
      ],
      returnTypeId: "00000000-0000-0000-0000-0000000001ff",
    },
    {
      args: [
        {
          typeId: "00000000-0000-0000-0000-00000000010b",
          optional: false,
          setoftype: false,
          variadic: false,
        },
        {
          typeId: "00000000-0000-0000-0000-000000000101",
          optional: false,
          setoftype: false,
          variadic: false,
        },
      ],
      returnTypeId: "00000000-0000-0000-0000-0000000001ff",
    },
  ]);
  return _.syntax.$expressionify({
    __kind__: $.ExpressionKind.Function,
    __element__: returnType,
    __cardinality__: cardinality,
    __name__: "std::datetime_get",
    __args__: positionalArgs,
    __namedargs__: namedArgs,
  }) as any;
}

type datetime_truncateλFuncExpr<
  P1 extends _.castMaps.orScalarLiteral<$.TypeSet<$datetime>>,
  P2 extends _.castMaps.orScalarLiteral<$.TypeSet<$str>>,
> = $.$expr_Function<
  $datetime,
  $.cardutil.multiplyCardinalities<
    $.cardutil.paramCardinality<P1>,
    $.cardutil.paramCardinality<P2>
  >
>;
/**
 * Truncate the input datetime to a particular precision.
 */
function datetime_truncate<
  P1 extends _.castMaps.orScalarLiteral<$.TypeSet<$datetime>>,
  P2 extends _.castMaps.orScalarLiteral<$.TypeSet<$str>>,
>(dt: P1, unit: P2): datetime_truncateλFuncExpr<P1, P2>;
function datetime_truncate(...args: any[]) {
  const {
    returnType,
    cardinality,
    args: positionalArgs,
    namedArgs,
  } = _.syntax.$resolveOverload("std::datetime_truncate", args, _.spec, [
    {
      args: [
        {
          typeId: "00000000-0000-0000-0000-00000000010a",
          optional: false,
          setoftype: false,
          variadic: false,
        },
        {
          typeId: "00000000-0000-0000-0000-000000000101",
          optional: false,
          setoftype: false,
          variadic: false,
        },
      ],
      returnTypeId: "00000000-0000-0000-0000-00000000010a",
    },
  ]);
  return _.syntax.$expressionify({
    __kind__: $.ExpressionKind.Function,
    __element__: returnType,
    __cardinality__: cardinality,
    __name__: "std::datetime_truncate",
    __args__: positionalArgs,
    __namedargs__: namedArgs,
  }) as any;
}

type str_pad_startλFuncExpr<
  P1 extends _.castMaps.orScalarLiteral<$.TypeSet<$str>>,
  P2 extends _.castMaps.orScalarLiteral<$.TypeSet<$number>>,
  P3 extends _.castMaps.orScalarLiteral<$.TypeSet<$str>> | undefined,
> = $.$expr_Function<
  $str,
  $.cardutil.multiplyCardinalities<
    $.cardutil.multiplyCardinalities<
      $.cardutil.paramCardinality<P1>,
      $.cardutil.paramCardinality<P2>
    >,
    $.cardutil.optionalParamCardinality<P3>
  >
>;
/**
 * Return the input string padded at the start to the length *n*.
 */
function str_pad_start<
  P1 extends _.castMaps.orScalarLiteral<$.TypeSet<$str>>,
  P2 extends _.castMaps.orScalarLiteral<$.TypeSet<$number>>,
  P3 extends _.castMaps.orScalarLiteral<$.TypeSet<$str>> | undefined,
>(s: P1, n: P2, fill?: P3): str_pad_startλFuncExpr<P1, P2, P3>;
function str_pad_start(...args: any[]) {
  const {
    returnType,
    cardinality,
    args: positionalArgs,
    namedArgs,
  } = _.syntax.$resolveOverload("std::str_pad_start", args, _.spec, [
    {
      args: [
        {
          typeId: "00000000-0000-0000-0000-000000000101",
          optional: false,
          setoftype: false,
          variadic: false,
        },
        {
          typeId: "00000000-0000-0000-0000-0000000001ff",
          optional: false,
          setoftype: false,
          variadic: false,
        },
        {
          typeId: "00000000-0000-0000-0000-000000000101",
          optional: true,
          setoftype: false,
          variadic: false,
        },
      ],
      returnTypeId: "00000000-0000-0000-0000-000000000101",
    },
  ]);
  return _.syntax.$expressionify({
    __kind__: $.ExpressionKind.Function,
    __element__: returnType,
    __cardinality__: cardinality,
    __name__: "std::str_pad_start",
    __args__: positionalArgs,
    __namedargs__: namedArgs,
  }) as any;
}

type str_lpadλFuncExpr<
  P1 extends _.castMaps.orScalarLiteral<$.TypeSet<$str>>,
  P2 extends _.castMaps.orScalarLiteral<$.TypeSet<$number>>,
  P3 extends _.castMaps.orScalarLiteral<$.TypeSet<$str>> | undefined,
> = $.$expr_Function<
  $str,
  $.cardutil.multiplyCardinalities<
    $.cardutil.multiplyCardinalities<
      $.cardutil.paramCardinality<P1>,
      $.cardutil.paramCardinality<P2>
    >,
    $.cardutil.optionalParamCardinality<P3>
  >
>;
/**
 * Return the input string left-padded to the length *n*.
 */
function str_lpad<
  P1 extends _.castMaps.orScalarLiteral<$.TypeSet<$str>>,
  P2 extends _.castMaps.orScalarLiteral<$.TypeSet<$number>>,
  P3 extends _.castMaps.orScalarLiteral<$.TypeSet<$str>> | undefined,
>(s: P1, n: P2, fill?: P3): str_lpadλFuncExpr<P1, P2, P3>;
function str_lpad(...args: any[]) {
  const {
    returnType,
    cardinality,
    args: positionalArgs,
    namedArgs,
  } = _.syntax.$resolveOverload("std::str_lpad", args, _.spec, [
    {
      args: [
        {
          typeId: "00000000-0000-0000-0000-000000000101",
          optional: false,
          setoftype: false,
          variadic: false,
        },
        {
          typeId: "00000000-0000-0000-0000-0000000001ff",
          optional: false,
          setoftype: false,
          variadic: false,
        },
        {
          typeId: "00000000-0000-0000-0000-000000000101",
          optional: true,
          setoftype: false,
          variadic: false,
        },
      ],
      returnTypeId: "00000000-0000-0000-0000-000000000101",
    },
  ]);
  return _.syntax.$expressionify({
    __kind__: $.ExpressionKind.Function,
    __element__: returnType,
    __cardinality__: cardinality,
    __name__: "std::str_lpad",
    __args__: positionalArgs,
    __namedargs__: namedArgs,
  }) as any;
}

type duration_getλFuncExpr<
  P1 extends _.castMaps.orScalarLiteral<$.TypeSet<$duration>>,
  P2 extends _.castMaps.orScalarLiteral<$.TypeSet<$str>>,
> = $.$expr_Function<
  $number,
  $.cardutil.multiplyCardinalities<
    $.cardutil.paramCardinality<P1>,
    $.cardutil.paramCardinality<P2>
  >
>;
type duration_getλFuncExpr2<
  P1 extends _.castMaps.orScalarLiteral<$.TypeSet<_stdcal.$date_duration>>,
  P2 extends _.castMaps.orScalarLiteral<$.TypeSet<$str>>,
> = $.$expr_Function<
  $number,
  $.cardutil.multiplyCardinalities<
    $.cardutil.paramCardinality<P1>,
    $.cardutil.paramCardinality<P2>
  >
>;
type duration_getλFuncExpr3<
  P1 extends _.castMaps.orScalarLiteral<
    $.TypeSet<_stdcal.$relative_durationλICastableTo>
  >,
  P2 extends _.castMaps.orScalarLiteral<$.TypeSet<$str>>,
> = $.$expr_Function<
  $number,
  $.cardutil.multiplyCardinalities<
    $.cardutil.paramCardinality<P1>,
    $.cardutil.paramCardinality<P2>
  >
>;
/**
 * Extract a specific element of input duration by name.
 */
function duration_get<
  P1 extends _.castMaps.orScalarLiteral<$.TypeSet<$duration>>,
  P2 extends _.castMaps.orScalarLiteral<$.TypeSet<$str>>,
>(dt: P1, el: P2): duration_getλFuncExpr<P1, P2>;
/**
 * Extract a specific element of input duration by name.
 */
function duration_get<
  P1 extends _.castMaps.orScalarLiteral<$.TypeSet<_stdcal.$date_duration>>,
  P2 extends _.castMaps.orScalarLiteral<$.TypeSet<$str>>,
>(dt: P1, el: P2): duration_getλFuncExpr2<P1, P2>;
/**
 * Extract a specific element of input duration by name.
 */
function duration_get<
  P1 extends _.castMaps.orScalarLiteral<
    $.TypeSet<_stdcal.$relative_durationλICastableTo>
  >,
  P2 extends _.castMaps.orScalarLiteral<$.TypeSet<$str>>,
>(dt: P1, el: P2): duration_getλFuncExpr3<P1, P2>;
function duration_get(...args: any[]) {
  const {
    returnType,
    cardinality,
    args: positionalArgs,
    namedArgs,
  } = _.syntax.$resolveOverload("std::duration_get", args, _.spec, [
    {
      args: [
        {
          typeId: "00000000-0000-0000-0000-00000000010e",
          optional: false,
          setoftype: false,
          variadic: false,
        },
        {
          typeId: "00000000-0000-0000-0000-000000000101",
          optional: false,
          setoftype: false,
          variadic: false,
        },
      ],
      returnTypeId: "00000000-0000-0000-0000-0000000001ff",
    },
    {
      args: [
        {
          typeId: "00000000-0000-0000-0000-000000000112",
          optional: false,
          setoftype: false,
          variadic: false,
        },
        {
          typeId: "00000000-0000-0000-0000-000000000101",
          optional: false,
          setoftype: false,
          variadic: false,
        },
      ],
      returnTypeId: "00000000-0000-0000-0000-0000000001ff",
    },
    {
      args: [
        {
          typeId: "00000000-0000-0000-0000-000000000111",
          optional: false,
          setoftype: false,
          variadic: false,
        },
        {
          typeId: "00000000-0000-0000-0000-000000000101",
          optional: false,
          setoftype: false,
          variadic: false,
        },
      ],
      returnTypeId: "00000000-0000-0000-0000-0000000001ff",
    },
  ]);
  return _.syntax.$expressionify({
    __kind__: $.ExpressionKind.Function,
    __element__: returnType,
    __cardinality__: cardinality,
    __name__: "std::duration_get",
    __args__: positionalArgs,
    __namedargs__: namedArgs,
  }) as any;
}

type duration_truncateλFuncExpr<
  P1 extends _.castMaps.orScalarLiteral<$.TypeSet<$duration>>,
  P2 extends _.castMaps.orScalarLiteral<$.TypeSet<$str>>,
> = $.$expr_Function<
  $duration,
  $.cardutil.multiplyCardinalities<
    $.cardutil.paramCardinality<P1>,
    $.cardutil.paramCardinality<P2>
  >
>;
type duration_truncateλFuncExpr2<
  P1 extends _.castMaps.orScalarLiteral<$.TypeSet<_stdcal.$date_duration>>,
  P2 extends _.castMaps.orScalarLiteral<$.TypeSet<$str>>,
> = $.$expr_Function<
  _stdcal.$date_duration,
  $.cardutil.multiplyCardinalities<
    $.cardutil.paramCardinality<P1>,
    $.cardutil.paramCardinality<P2>
  >
>;
type duration_truncateλFuncExpr3<
  P1 extends _.castMaps.orScalarLiteral<
    $.TypeSet<_stdcal.$relative_durationλICastableTo>
  >,
  P2 extends _.castMaps.orScalarLiteral<$.TypeSet<$str>>,
> = $.$expr_Function<
  _stdcal.$relative_duration,
  $.cardutil.multiplyCardinalities<
    $.cardutil.paramCardinality<P1>,
    $.cardutil.paramCardinality<P2>
  >
>;
/**
 * Truncate the input duration to a particular precision.
 */
function duration_truncate<
  P1 extends _.castMaps.orScalarLiteral<$.TypeSet<$duration>>,
  P2 extends _.castMaps.orScalarLiteral<$.TypeSet<$str>>,
>(dt: P1, unit: P2): duration_truncateλFuncExpr<P1, P2>;
/**
 * Truncate the input duration to a particular precision.
 */
function duration_truncate<
  P1 extends _.castMaps.orScalarLiteral<$.TypeSet<_stdcal.$date_duration>>,
  P2 extends _.castMaps.orScalarLiteral<$.TypeSet<$str>>,
>(dt: P1, unit: P2): duration_truncateλFuncExpr2<P1, P2>;
/**
 * Truncate the input duration to a particular precision.
 */
function duration_truncate<
  P1 extends _.castMaps.orScalarLiteral<
    $.TypeSet<_stdcal.$relative_durationλICastableTo>
  >,
  P2 extends _.castMaps.orScalarLiteral<$.TypeSet<$str>>,
>(dt: P1, unit: P2): duration_truncateλFuncExpr3<P1, P2>;
function duration_truncate(...args: any[]) {
  const {
    returnType,
    cardinality,
    args: positionalArgs,
    namedArgs,
  } = _.syntax.$resolveOverload("std::duration_truncate", args, _.spec, [
    {
      args: [
        {
          typeId: "00000000-0000-0000-0000-00000000010e",
          optional: false,
          setoftype: false,
          variadic: false,
        },
        {
          typeId: "00000000-0000-0000-0000-000000000101",
          optional: false,
          setoftype: false,
          variadic: false,
        },
      ],
      returnTypeId: "00000000-0000-0000-0000-00000000010e",
    },
    {
      args: [
        {
          typeId: "00000000-0000-0000-0000-000000000112",
          optional: false,
          setoftype: false,
          variadic: false,
        },
        {
          typeId: "00000000-0000-0000-0000-000000000101",
          optional: false,
          setoftype: false,
          variadic: false,
        },
      ],
      returnTypeId: "00000000-0000-0000-0000-000000000112",
    },
    {
      args: [
        {
          typeId: "00000000-0000-0000-0000-000000000111",
          optional: false,
          setoftype: false,
          variadic: false,
        },
        {
          typeId: "00000000-0000-0000-0000-000000000101",
          optional: false,
          setoftype: false,
          variadic: false,
        },
      ],
      returnTypeId: "00000000-0000-0000-0000-000000000111",
    },
  ]);
  return _.syntax.$expressionify({
    __kind__: $.ExpressionKind.Function,
    __element__: returnType,
    __cardinality__: cardinality,
    __name__: "std::duration_truncate",
    __args__: positionalArgs,
    __namedargs__: namedArgs,
  }) as any;
}

type duration_to_secondsλFuncExpr<
  P1 extends _.castMaps.orScalarLiteral<$.TypeSet<$duration>>,
> = $.$expr_Function<$decimal, $.cardutil.paramCardinality<P1>>;
/**
 * Return duration as total number of seconds in interval.
 */
function duration_to_seconds<
  P1 extends _.castMaps.orScalarLiteral<$.TypeSet<$duration>>,
>(dur: P1): duration_to_secondsλFuncExpr<P1>;
function duration_to_seconds(...args: any[]) {
  const {
    returnType,
    cardinality,
    args: positionalArgs,
    namedArgs,
  } = _.syntax.$resolveOverload("std::duration_to_seconds", args, _.spec, [
    {
      args: [
        {
          typeId: "00000000-0000-0000-0000-00000000010e",
          optional: false,
          setoftype: false,
          variadic: false,
        },
      ],
      returnTypeId: "00000000-0000-0000-0000-000000000108",
    },
  ]);
  return _.syntax.$expressionify({
    __kind__: $.ExpressionKind.Function,
    __element__: returnType,
    __cardinality__: cardinality,
    __name__: "std::duration_to_seconds",
    __args__: positionalArgs,
    __namedargs__: namedArgs,
  }) as any;
}

type json_typeofλFuncExpr<
  P1 extends _.castMaps.orScalarLiteral<$.TypeSet<$json>>,
> = $.$expr_Function<$str, $.cardutil.paramCardinality<P1>>;
/**
 * Return the type of the outermost JSON value as a string.
 */
function json_typeof<P1 extends _.castMaps.orScalarLiteral<$.TypeSet<$json>>>(
  json: P1,
): json_typeofλFuncExpr<P1>;
function json_typeof(...args: any[]) {
  const {
    returnType,
    cardinality,
    args: positionalArgs,
    namedArgs,
  } = _.syntax.$resolveOverload("std::json_typeof", args, _.spec, [
    {
      args: [
        {
          typeId: "00000000-0000-0000-0000-00000000010f",
          optional: false,
          setoftype: false,
          variadic: false,
        },
      ],
      returnTypeId: "00000000-0000-0000-0000-000000000101",
    },
  ]);
  return _.syntax.$expressionify({
    __kind__: $.ExpressionKind.Function,
    __element__: returnType,
    __cardinality__: cardinality,
    __name__: "std::json_typeof",
    __args__: positionalArgs,
    __namedargs__: namedArgs,
  }) as any;
}

type json_array_unpackλFuncExpr<
  P1 extends _.castMaps.orScalarLiteral<$.TypeSet<$json>>,
> = $.$expr_Function<$json, $.Cardinality.Many>;
/**
 * Return elements of JSON array as a set of `json`.
 */
function json_array_unpack<
  P1 extends _.castMaps.orScalarLiteral<$.TypeSet<$json>>,
>(array: P1): json_array_unpackλFuncExpr<P1>;
function json_array_unpack(...args: any[]) {
  const {
    returnType,
    cardinality,
    args: positionalArgs,
    namedArgs,
  } = _.syntax.$resolveOverload("std::json_array_unpack", args, _.spec, [
    {
      args: [
        {
          typeId: "00000000-0000-0000-0000-00000000010f",
          optional: false,
          setoftype: false,
          variadic: false,
        },
      ],
      returnTypeId: "00000000-0000-0000-0000-00000000010f",
      returnTypemod: "SetOfType",
    },
  ]);
  return _.syntax.$expressionify({
    __kind__: $.ExpressionKind.Function,
    __element__: returnType,
    __cardinality__: cardinality,
    __name__: "std::json_array_unpack",
    __args__: positionalArgs,
    __namedargs__: namedArgs,
  }) as any;
}

type json_object_unpackλFuncExpr<
  P1 extends _.castMaps.orScalarLiteral<$.TypeSet<$json>>,
> = $.$expr_Function<$.TupleType<[$str, $json]>, $.Cardinality.Many>;
/**
 * Return set of key/value tuples that make up the JSON object.
 */
function json_object_unpack<
  P1 extends _.castMaps.orScalarLiteral<$.TypeSet<$json>>,
>(obj: P1): json_object_unpackλFuncExpr<P1>;
function json_object_unpack(...args: any[]) {
  const {
    returnType,
    cardinality,
    args: positionalArgs,
    namedArgs,
  } = _.syntax.$resolveOverload("std::json_object_unpack", args, _.spec, [
    {
      args: [
        {
          typeId: "00000000-0000-0000-0000-00000000010f",
          optional: false,
          setoftype: false,
          variadic: false,
        },
      ],
      returnTypeId: "416fe1a6-d62c-5481-80cd-2102a37b3415",
      returnTypemod: "SetOfType",
    },
  ]);
  return _.syntax.$expressionify({
    __kind__: $.ExpressionKind.Function,
    __element__: returnType,
    __cardinality__: cardinality,
    __name__: "std::json_object_unpack",
    __args__: positionalArgs,
    __namedargs__: namedArgs,
  }) as any;
}

type json_object_packλFuncExpr<
  P1 extends $.TypeSet<$.TupleType<[$str, $json]>>,
> = $.$expr_Function<$json, $.Cardinality.One>;
/**
 * Return a JSON object with set key/value pairs.
 */
function json_object_pack<P1 extends $.TypeSet<$.TupleType<[$str, $json]>>>(
  pairs: P1,
): json_object_packλFuncExpr<P1>;
function json_object_pack(...args: any[]) {
  const {
    returnType,
    cardinality,
    args: positionalArgs,
    namedArgs,
  } = _.syntax.$resolveOverload("std::json_object_pack", args, _.spec, [
    {
      args: [
        {
          typeId: "416fe1a6-d62c-5481-80cd-2102a37b3415",
          optional: false,
          setoftype: true,
          variadic: false,
        },
      ],
      returnTypeId: "00000000-0000-0000-0000-00000000010f",
    },
  ]);
  return _.syntax.$expressionify({
    __kind__: $.ExpressionKind.Function,
    __element__: returnType,
    __cardinality__: cardinality,
    __name__: "std::json_object_pack",
    __args__: positionalArgs,
    __namedargs__: namedArgs,
  }) as any;
}

type json_getλFuncExpr<
  NamedArgs extends {
    default?: _.castMaps.orScalarLiteral<$.TypeSet<$json>>;
  },
  P1 extends _.castMaps.orScalarLiteral<$.TypeSet<$json>>,
  P2 extends [
    _.castMaps.orScalarLiteral<$.TypeSet<$str>>,
    ..._.castMaps.orScalarLiteral<$.TypeSet<$str>>[],
  ],
> = $.$expr_Function<
  $json,
  $.cardutil.overrideLowerBound<
    $.cardutil.multiplyCardinalities<
      $.cardutil.multiplyCardinalities<
        $.cardutil.paramCardinality<P1>,
        $.cardutil.paramArrayCardinality<P2>
      >,
      $.cardutil.optionalParamCardinality<NamedArgs["default"]>
    >,
    "Zero"
  >
>;
type json_getλFuncExpr2<
  P1 extends _.castMaps.orScalarLiteral<$.TypeSet<$json>>,
  P2 extends [
    _.castMaps.orScalarLiteral<$.TypeSet<$str>>,
    ..._.castMaps.orScalarLiteral<$.TypeSet<$str>>[],
  ],
> = $.$expr_Function<
  $json,
  $.cardutil.overrideLowerBound<
    $.cardutil.multiplyCardinalities<
      $.cardutil.paramCardinality<P1>,
      $.cardutil.paramArrayCardinality<P2>
    >,
    "Zero"
  >
>;
/**
 * Return the JSON value at the end of the specified path or an empty set.
 */
function json_get<
  NamedArgs extends {
    default?: _.castMaps.orScalarLiteral<$.TypeSet<$json>>;
  },
  P1 extends _.castMaps.orScalarLiteral<$.TypeSet<$json>>,
  P2 extends [
    _.castMaps.orScalarLiteral<$.TypeSet<$str>>,
    ..._.castMaps.orScalarLiteral<$.TypeSet<$str>>[],
  ],
>(
  namedArgs: NamedArgs,
  json: P1,
  ...path: P2
): json_getλFuncExpr<NamedArgs, P1, P2>;
/**
 * Return the JSON value at the end of the specified path or an empty set.
 */
function json_get<
  P1 extends _.castMaps.orScalarLiteral<$.TypeSet<$json>>,
  P2 extends [
    _.castMaps.orScalarLiteral<$.TypeSet<$str>>,
    ..._.castMaps.orScalarLiteral<$.TypeSet<$str>>[],
  ],
>(json: P1, ...path: P2): json_getλFuncExpr2<P1, P2>;
function json_get(...args: any[]) {
  const {
    returnType,
    cardinality,
    args: positionalArgs,
    namedArgs,
  } = _.syntax.$resolveOverload("std::json_get", args, _.spec, [
    {
      args: [
        {
          typeId: "00000000-0000-0000-0000-00000000010f",
          optional: false,
          setoftype: false,
          variadic: false,
        },
        {
          typeId: "00000000-0000-0000-0000-000000000101",
          optional: false,
          setoftype: false,
          variadic: true,
        },
      ],
      namedArgs: {
        default: {
          typeId: "00000000-0000-0000-0000-00000000010f",
          optional: true,
          setoftype: false,
          variadic: false,
        },
      },
      returnTypeId: "00000000-0000-0000-0000-00000000010f",
      returnTypemod: "OptionalType",
    },
  ]);
  return _.syntax.$expressionify({
    __kind__: $.ExpressionKind.Function,
    __element__: returnType,
    __cardinality__: cardinality,
    __name__: "std::json_get",
    __args__: positionalArgs,
    __namedargs__: namedArgs,
  }) as any;
}

type json_setλFuncExpr<
  NamedArgs extends {
    value?: _.castMaps.orScalarLiteral<$.TypeSet<$json>>;
    create_if_missing?: _.castMaps.orScalarLiteral<$.TypeSet<$bool>>;
    empty_treatment?: _.castMaps.orScalarLiteral<$.TypeSet<$JsonEmpty>>;
  },
  P1 extends _.castMaps.orScalarLiteral<$.TypeSet<$json>>,
  P2 extends [
    _.castMaps.orScalarLiteral<$.TypeSet<$str>>,
    ..._.castMaps.orScalarLiteral<$.TypeSet<$str>>[],
  ],
> = $.$expr_Function<
  $json,
  $.cardutil.overrideLowerBound<
    $.cardutil.multiplyCardinalities<
      $.cardutil.multiplyCardinalities<
        $.cardutil.multiplyCardinalities<
          $.cardutil.multiplyCardinalities<
            $.cardutil.paramCardinality<P1>,
            $.cardutil.paramArrayCardinality<P2>
          >,
          $.cardutil.optionalParamCardinality<NamedArgs["value"]>
        >,
        $.cardutil.optionalParamCardinality<NamedArgs["create_if_missing"]>
      >,
      $.cardutil.optionalParamCardinality<NamedArgs["empty_treatment"]>
    >,
    "Zero"
  >
>;
type json_setλFuncExpr2<
  P1 extends _.castMaps.orScalarLiteral<$.TypeSet<$json>>,
  P2 extends [
    _.castMaps.orScalarLiteral<$.TypeSet<$str>>,
    ..._.castMaps.orScalarLiteral<$.TypeSet<$str>>[],
  ],
> = $.$expr_Function<
  $json,
  $.cardutil.overrideLowerBound<
    $.cardutil.multiplyCardinalities<
      $.cardutil.paramCardinality<P1>,
      $.cardutil.paramArrayCardinality<P2>
    >,
    "Zero"
  >
>;
/**
 * Return an updated JSON target with a new value.
 */
function json_set<
  NamedArgs extends {
    value?: _.castMaps.orScalarLiteral<$.TypeSet<$json>>;
    create_if_missing?: _.castMaps.orScalarLiteral<$.TypeSet<$bool>>;
    empty_treatment?: _.castMaps.orScalarLiteral<$.TypeSet<$JsonEmpty>>;
  },
  P1 extends _.castMaps.orScalarLiteral<$.TypeSet<$json>>,
  P2 extends [
    _.castMaps.orScalarLiteral<$.TypeSet<$str>>,
    ..._.castMaps.orScalarLiteral<$.TypeSet<$str>>[],
  ],
>(
  namedArgs: NamedArgs,
  target: P1,
  ...path: P2
): json_setλFuncExpr<NamedArgs, P1, P2>;
/**
 * Return an updated JSON target with a new value.
 */
function json_set<
  P1 extends _.castMaps.orScalarLiteral<$.TypeSet<$json>>,
  P2 extends [
    _.castMaps.orScalarLiteral<$.TypeSet<$str>>,
    ..._.castMaps.orScalarLiteral<$.TypeSet<$str>>[],
  ],
>(target: P1, ...path: P2): json_setλFuncExpr2<P1, P2>;
function json_set(...args: any[]) {
  const {
    returnType,
    cardinality,
    args: positionalArgs,
    namedArgs,
  } = _.syntax.$resolveOverload("std::json_set", args, _.spec, [
    {
      args: [
        {
          typeId: "00000000-0000-0000-0000-00000000010f",
          optional: false,
          setoftype: false,
          variadic: false,
        },
        {
          typeId: "00000000-0000-0000-0000-000000000101",
          optional: false,
          setoftype: false,
          variadic: true,
        },
      ],
      namedArgs: {
        value: {
          typeId: "00000000-0000-0000-0000-00000000010f",
          optional: true,
          setoftype: false,
          variadic: false,
        },
        create_if_missing: {
          typeId: "00000000-0000-0000-0000-000000000109",
          optional: true,
          setoftype: false,
          variadic: false,
        },
        empty_treatment: {
          typeId: "584feb89-c83d-561d-aa78-24e6d779f044",
          optional: true,
          setoftype: false,
          variadic: false,
        },
      },
      returnTypeId: "00000000-0000-0000-0000-00000000010f",
      returnTypemod: "OptionalType",
    },
  ]);
  return _.syntax.$expressionify({
    __kind__: $.ExpressionKind.Function,
    __element__: returnType,
    __cardinality__: cardinality,
    __name__: "std::json_set",
    __args__: positionalArgs,
    __namedargs__: namedArgs,
  }) as any;
}

type re_matchλFuncExpr<
  P1 extends _.castMaps.orScalarLiteral<$.TypeSet<$str>>,
  P2 extends _.castMaps.orScalarLiteral<$.TypeSet<$str>>,
> = $.$expr_Function<
  $.ArrayType<$str>,
  $.cardutil.multiplyCardinalities<
    $.cardutil.paramCardinality<P1>,
    $.cardutil.paramCardinality<P2>
  >
>;
/**
 * Find the first regular expression match in a string.
 */
function re_match<
  P1 extends _.castMaps.orScalarLiteral<$.TypeSet<$str>>,
  P2 extends _.castMaps.orScalarLiteral<$.TypeSet<$str>>,
>(pattern: P1, str: P2): re_matchλFuncExpr<P1, P2>;
function re_match(...args: any[]) {
  const {
    returnType,
    cardinality,
    args: positionalArgs,
    namedArgs,
  } = _.syntax.$resolveOverload("std::re_match", args, _.spec, [
    {
      args: [
        {
          typeId: "00000000-0000-0000-0000-000000000101",
          optional: false,
          setoftype: false,
          variadic: false,
        },
        {
          typeId: "00000000-0000-0000-0000-000000000101",
          optional: false,
          setoftype: false,
          variadic: false,
        },
      ],
      returnTypeId: "bb221d39-09f1-507e-8851-62075bb61823",
    },
  ]);
  return _.syntax.$expressionify({
    __kind__: $.ExpressionKind.Function,
    __element__: returnType,
    __cardinality__: cardinality,
    __name__: "std::re_match",
    __args__: positionalArgs,
    __namedargs__: namedArgs,
  }) as any;
}

type re_match_allλFuncExpr<
  P1 extends _.castMaps.orScalarLiteral<$.TypeSet<$str>>,
  P2 extends _.castMaps.orScalarLiteral<$.TypeSet<$str>>,
> = $.$expr_Function<$.ArrayType<$str>, $.Cardinality.Many>;
/**
 * Find all regular expression matches in a string.
 */
function re_match_all<
  P1 extends _.castMaps.orScalarLiteral<$.TypeSet<$str>>,
  P2 extends _.castMaps.orScalarLiteral<$.TypeSet<$str>>,
>(pattern: P1, str: P2): re_match_allλFuncExpr<P1, P2>;
function re_match_all(...args: any[]) {
  const {
    returnType,
    cardinality,
    args: positionalArgs,
    namedArgs,
  } = _.syntax.$resolveOverload("std::re_match_all", args, _.spec, [
    {
      args: [
        {
          typeId: "00000000-0000-0000-0000-000000000101",
          optional: false,
          setoftype: false,
          variadic: false,
        },
        {
          typeId: "00000000-0000-0000-0000-000000000101",
          optional: false,
          setoftype: false,
          variadic: false,
        },
      ],
      returnTypeId: "bb221d39-09f1-507e-8851-62075bb61823",
      returnTypemod: "SetOfType",
    },
  ]);
  return _.syntax.$expressionify({
    __kind__: $.ExpressionKind.Function,
    __element__: returnType,
    __cardinality__: cardinality,
    __name__: "std::re_match_all",
    __args__: positionalArgs,
    __namedargs__: namedArgs,
  }) as any;
}

type re_testλFuncExpr<
  P1 extends _.castMaps.orScalarLiteral<$.TypeSet<$str>>,
  P2 extends _.castMaps.orScalarLiteral<$.TypeSet<$str>>,
> = $.$expr_Function<
  $bool,
  $.cardutil.multiplyCardinalities<
    $.cardutil.paramCardinality<P1>,
    $.cardutil.paramCardinality<P2>
  >
>;
/**
 * Test if a regular expression has a match in a string.
 */
function re_test<
  P1 extends _.castMaps.orScalarLiteral<$.TypeSet<$str>>,
  P2 extends _.castMaps.orScalarLiteral<$.TypeSet<$str>>,
>(pattern: P1, str: P2): re_testλFuncExpr<P1, P2>;
function re_test(...args: any[]) {
  const {
    returnType,
    cardinality,
    args: positionalArgs,
    namedArgs,
  } = _.syntax.$resolveOverload("std::re_test", args, _.spec, [
    {
      args: [
        {
          typeId: "00000000-0000-0000-0000-000000000101",
          optional: false,
          setoftype: false,
          variadic: false,
        },
        {
          typeId: "00000000-0000-0000-0000-000000000101",
          optional: false,
          setoftype: false,
          variadic: false,
        },
      ],
      returnTypeId: "00000000-0000-0000-0000-000000000109",
    },
  ]);
  return _.syntax.$expressionify({
    __kind__: $.ExpressionKind.Function,
    __element__: returnType,
    __cardinality__: cardinality,
    __name__: "std::re_test",
    __args__: positionalArgs,
    __namedargs__: namedArgs,
  }) as any;
}

type re_replaceλFuncExpr<
  NamedArgs extends {
    flags?: _.castMaps.orScalarLiteral<$.TypeSet<$str>>;
  },
  P1 extends _.castMaps.orScalarLiteral<$.TypeSet<$str>>,
  P2 extends _.castMaps.orScalarLiteral<$.TypeSet<$str>>,
  P3 extends _.castMaps.orScalarLiteral<$.TypeSet<$str>>,
> = $.$expr_Function<
  $str,
  $.cardutil.multiplyCardinalities<
    $.cardutil.multiplyCardinalities<
      $.cardutil.multiplyCardinalities<
        $.cardutil.paramCardinality<P1>,
        $.cardutil.paramCardinality<P2>
      >,
      $.cardutil.paramCardinality<P3>
    >,
    $.cardutil.optionalParamCardinality<NamedArgs["flags"]>
  >
>;
type re_replaceλFuncExpr2<
  P1 extends _.castMaps.orScalarLiteral<$.TypeSet<$str>>,
  P2 extends _.castMaps.orScalarLiteral<$.TypeSet<$str>>,
  P3 extends _.castMaps.orScalarLiteral<$.TypeSet<$str>>,
> = $.$expr_Function<
  $str,
  $.cardutil.multiplyCardinalities<
    $.cardutil.multiplyCardinalities<
      $.cardutil.paramCardinality<P1>,
      $.cardutil.paramCardinality<P2>
    >,
    $.cardutil.paramCardinality<P3>
  >
>;
/**
 * Replace matching substrings in a given string.
 */
function re_replace<
  NamedArgs extends {
    flags?: _.castMaps.orScalarLiteral<$.TypeSet<$str>>;
  },
  P1 extends _.castMaps.orScalarLiteral<$.TypeSet<$str>>,
  P2 extends _.castMaps.orScalarLiteral<$.TypeSet<$str>>,
  P3 extends _.castMaps.orScalarLiteral<$.TypeSet<$str>>,
>(
  namedArgs: NamedArgs,
  pattern: P1,
  sub: P2,
  str: P3,
): re_replaceλFuncExpr<NamedArgs, P1, P2, P3>;
/**
 * Replace matching substrings in a given string.
 */
function re_replace<
  P1 extends _.castMaps.orScalarLiteral<$.TypeSet<$str>>,
  P2 extends _.castMaps.orScalarLiteral<$.TypeSet<$str>>,
  P3 extends _.castMaps.orScalarLiteral<$.TypeSet<$str>>,
>(pattern: P1, sub: P2, str: P3): re_replaceλFuncExpr2<P1, P2, P3>;
function re_replace(...args: any[]) {
  const {
    returnType,
    cardinality,
    args: positionalArgs,
    namedArgs,
  } = _.syntax.$resolveOverload("std::re_replace", args, _.spec, [
    {
      args: [
        {
          typeId: "00000000-0000-0000-0000-000000000101",
          optional: false,
          setoftype: false,
          variadic: false,
        },
        {
          typeId: "00000000-0000-0000-0000-000000000101",
          optional: false,
          setoftype: false,
          variadic: false,
        },
        {
          typeId: "00000000-0000-0000-0000-000000000101",
          optional: false,
          setoftype: false,
          variadic: false,
        },
      ],
      namedArgs: {
        flags: {
          typeId: "00000000-0000-0000-0000-000000000101",
          optional: true,
          setoftype: false,
          variadic: false,
        },
      },
      returnTypeId: "00000000-0000-0000-0000-000000000101",
    },
  ]);
  return _.syntax.$expressionify({
    __kind__: $.ExpressionKind.Function,
    __element__: returnType,
    __cardinality__: cardinality,
    __name__: "std::re_replace",
    __args__: positionalArgs,
    __namedargs__: namedArgs,
  }) as any;
}

type str_repeatλFuncExpr<
  P1 extends _.castMaps.orScalarLiteral<$.TypeSet<$str>>,
  P2 extends _.castMaps.orScalarLiteral<$.TypeSet<$number>>,
> = $.$expr_Function<
  $str,
  $.cardutil.multiplyCardinalities<
    $.cardutil.paramCardinality<P1>,
    $.cardutil.paramCardinality<P2>
  >
>;
/**
 * Repeat the input *string* *n* times.
 */
function str_repeat<
  P1 extends _.castMaps.orScalarLiteral<$.TypeSet<$str>>,
  P2 extends _.castMaps.orScalarLiteral<$.TypeSet<$number>>,
>(s: P1, n: P2): str_repeatλFuncExpr<P1, P2>;
function str_repeat(...args: any[]) {
  const {
    returnType,
    cardinality,
    args: positionalArgs,
    namedArgs,
  } = _.syntax.$resolveOverload("std::str_repeat", args, _.spec, [
    {
      args: [
        {
          typeId: "00000000-0000-0000-0000-000000000101",
          optional: false,
          setoftype: false,
          variadic: false,
        },
        {
          typeId: "00000000-0000-0000-0000-0000000001ff",
          optional: false,
          setoftype: false,
          variadic: false,
        },
      ],
      returnTypeId: "00000000-0000-0000-0000-000000000101",
    },
  ]);
  return _.syntax.$expressionify({
    __kind__: $.ExpressionKind.Function,
    __element__: returnType,
    __cardinality__: cardinality,
    __name__: "std::str_repeat",
    __args__: positionalArgs,
    __namedargs__: namedArgs,
  }) as any;
}

type str_lowerλFuncExpr<
  P1 extends _.castMaps.orScalarLiteral<$.TypeSet<$str>>,
> = $.$expr_Function<$str, $.cardutil.paramCardinality<P1>>;
/**
 * Return a lowercase copy of the input *string*.
 */
function str_lower<P1 extends _.castMaps.orScalarLiteral<$.TypeSet<$str>>>(
  s: P1,
): str_lowerλFuncExpr<P1>;
function str_lower(...args: any[]) {
  const {
    returnType,
    cardinality,
    args: positionalArgs,
    namedArgs,
  } = _.syntax.$resolveOverload("std::str_lower", args, _.spec, [
    {
      args: [
        {
          typeId: "00000000-0000-0000-0000-000000000101",
          optional: false,
          setoftype: false,
          variadic: false,
        },
      ],
      returnTypeId: "00000000-0000-0000-0000-000000000101",
    },
  ]);
  return _.syntax.$expressionify({
    __kind__: $.ExpressionKind.Function,
    __element__: returnType,
    __cardinality__: cardinality,
    __name__: "std::str_lower",
    __args__: positionalArgs,
    __namedargs__: namedArgs,
  }) as any;
}

type str_upperλFuncExpr<
  P1 extends _.castMaps.orScalarLiteral<$.TypeSet<$str>>,
> = $.$expr_Function<$str, $.cardutil.paramCardinality<P1>>;
/**
 * Return an uppercase copy of the input *string*.
 */
function str_upper<P1 extends _.castMaps.orScalarLiteral<$.TypeSet<$str>>>(
  s: P1,
): str_upperλFuncExpr<P1>;
function str_upper(...args: any[]) {
  const {
    returnType,
    cardinality,
    args: positionalArgs,
    namedArgs,
  } = _.syntax.$resolveOverload("std::str_upper", args, _.spec, [
    {
      args: [
        {
          typeId: "00000000-0000-0000-0000-000000000101",
          optional: false,
          setoftype: false,
          variadic: false,
        },
      ],
      returnTypeId: "00000000-0000-0000-0000-000000000101",
    },
  ]);
  return _.syntax.$expressionify({
    __kind__: $.ExpressionKind.Function,
    __element__: returnType,
    __cardinality__: cardinality,
    __name__: "std::str_upper",
    __args__: positionalArgs,
    __namedargs__: namedArgs,
  }) as any;
}

type str_titleλFuncExpr<
  P1 extends _.castMaps.orScalarLiteral<$.TypeSet<$str>>,
> = $.$expr_Function<$str, $.cardutil.paramCardinality<P1>>;
/**
 * Return a titlecase copy of the input *string*.
 */
function str_title<P1 extends _.castMaps.orScalarLiteral<$.TypeSet<$str>>>(
  s: P1,
): str_titleλFuncExpr<P1>;
function str_title(...args: any[]) {
  const {
    returnType,
    cardinality,
    args: positionalArgs,
    namedArgs,
  } = _.syntax.$resolveOverload("std::str_title", args, _.spec, [
    {
      args: [
        {
          typeId: "00000000-0000-0000-0000-000000000101",
          optional: false,
          setoftype: false,
          variadic: false,
        },
      ],
      returnTypeId: "00000000-0000-0000-0000-000000000101",
    },
  ]);
  return _.syntax.$expressionify({
    __kind__: $.ExpressionKind.Function,
    __element__: returnType,
    __cardinality__: cardinality,
    __name__: "std::str_title",
    __args__: positionalArgs,
    __namedargs__: namedArgs,
  }) as any;
}

type str_pad_endλFuncExpr<
  P1 extends _.castMaps.orScalarLiteral<$.TypeSet<$str>>,
  P2 extends _.castMaps.orScalarLiteral<$.TypeSet<$number>>,
  P3 extends _.castMaps.orScalarLiteral<$.TypeSet<$str>> | undefined,
> = $.$expr_Function<
  $str,
  $.cardutil.multiplyCardinalities<
    $.cardutil.multiplyCardinalities<
      $.cardutil.paramCardinality<P1>,
      $.cardutil.paramCardinality<P2>
    >,
    $.cardutil.optionalParamCardinality<P3>
  >
>;
/**
 * Return the input string padded at the end to the length *n*.
 */
function str_pad_end<
  P1 extends _.castMaps.orScalarLiteral<$.TypeSet<$str>>,
  P2 extends _.castMaps.orScalarLiteral<$.TypeSet<$number>>,
  P3 extends _.castMaps.orScalarLiteral<$.TypeSet<$str>> | undefined,
>(s: P1, n: P2, fill?: P3): str_pad_endλFuncExpr<P1, P2, P3>;
function str_pad_end(...args: any[]) {
  const {
    returnType,
    cardinality,
    args: positionalArgs,
    namedArgs,
  } = _.syntax.$resolveOverload("std::str_pad_end", args, _.spec, [
    {
      args: [
        {
          typeId: "00000000-0000-0000-0000-000000000101",
          optional: false,
          setoftype: false,
          variadic: false,
        },
        {
          typeId: "00000000-0000-0000-0000-0000000001ff",
          optional: false,
          setoftype: false,
          variadic: false,
        },
        {
          typeId: "00000000-0000-0000-0000-000000000101",
          optional: true,
          setoftype: false,
          variadic: false,
        },
      ],
      returnTypeId: "00000000-0000-0000-0000-000000000101",
    },
  ]);
  return _.syntax.$expressionify({
    __kind__: $.ExpressionKind.Function,
    __element__: returnType,
    __cardinality__: cardinality,
    __name__: "std::str_pad_end",
    __args__: positionalArgs,
    __namedargs__: namedArgs,
  }) as any;
}

type str_rpadλFuncExpr<
  P1 extends _.castMaps.orScalarLiteral<$.TypeSet<$str>>,
  P2 extends _.castMaps.orScalarLiteral<$.TypeSet<$number>>,
  P3 extends _.castMaps.orScalarLiteral<$.TypeSet<$str>> | undefined,
> = $.$expr_Function<
  $str,
  $.cardutil.multiplyCardinalities<
    $.cardutil.multiplyCardinalities<
      $.cardutil.paramCardinality<P1>,
      $.cardutil.paramCardinality<P2>
    >,
    $.cardutil.optionalParamCardinality<P3>
  >
>;
/**
 * Return the input string right-padded to the length *n*.
 */
function str_rpad<
  P1 extends _.castMaps.orScalarLiteral<$.TypeSet<$str>>,
  P2 extends _.castMaps.orScalarLiteral<$.TypeSet<$number>>,
  P3 extends _.castMaps.orScalarLiteral<$.TypeSet<$str>> | undefined,
>(s: P1, n: P2, fill?: P3): str_rpadλFuncExpr<P1, P2, P3>;
function str_rpad(...args: any[]) {
  const {
    returnType,
    cardinality,
    args: positionalArgs,
    namedArgs,
  } = _.syntax.$resolveOverload("std::str_rpad", args, _.spec, [
    {
      args: [
        {
          typeId: "00000000-0000-0000-0000-000000000101",
          optional: false,
          setoftype: false,
          variadic: false,
        },
        {
          typeId: "00000000-0000-0000-0000-0000000001ff",
          optional: false,
          setoftype: false,
          variadic: false,
        },
        {
          typeId: "00000000-0000-0000-0000-000000000101",
          optional: true,
          setoftype: false,
          variadic: false,
        },
      ],
      returnTypeId: "00000000-0000-0000-0000-000000000101",
    },
  ]);
  return _.syntax.$expressionify({
    __kind__: $.ExpressionKind.Function,
    __element__: returnType,
    __cardinality__: cardinality,
    __name__: "std::str_rpad",
    __args__: positionalArgs,
    __namedargs__: namedArgs,
  }) as any;
}

type str_trim_startλFuncExpr<
  P1 extends _.castMaps.orScalarLiteral<$.TypeSet<$str>>,
  P2 extends _.castMaps.orScalarLiteral<$.TypeSet<$str>> | undefined,
> = $.$expr_Function<
  $str,
  $.cardutil.multiplyCardinalities<
    $.cardutil.paramCardinality<P1>,
    $.cardutil.optionalParamCardinality<P2>
  >
>;
/**
 * Return the input string with all *trim* characters removed from its start.
 */
function str_trim_start<
  P1 extends _.castMaps.orScalarLiteral<$.TypeSet<$str>>,
  P2 extends _.castMaps.orScalarLiteral<$.TypeSet<$str>> | undefined,
>(s: P1, tr?: P2): str_trim_startλFuncExpr<P1, P2>;
function str_trim_start(...args: any[]) {
  const {
    returnType,
    cardinality,
    args: positionalArgs,
    namedArgs,
  } = _.syntax.$resolveOverload("std::str_trim_start", args, _.spec, [
    {
      args: [
        {
          typeId: "00000000-0000-0000-0000-000000000101",
          optional: false,
          setoftype: false,
          variadic: false,
        },
        {
          typeId: "00000000-0000-0000-0000-000000000101",
          optional: true,
          setoftype: false,
          variadic: false,
        },
      ],
      returnTypeId: "00000000-0000-0000-0000-000000000101",
    },
  ]);
  return _.syntax.$expressionify({
    __kind__: $.ExpressionKind.Function,
    __element__: returnType,
    __cardinality__: cardinality,
    __name__: "std::str_trim_start",
    __args__: positionalArgs,
    __namedargs__: namedArgs,
  }) as any;
}

type str_ltrimλFuncExpr<
  P1 extends _.castMaps.orScalarLiteral<$.TypeSet<$str>>,
  P2 extends _.castMaps.orScalarLiteral<$.TypeSet<$str>> | undefined,
> = $.$expr_Function<
  $str,
  $.cardutil.multiplyCardinalities<
    $.cardutil.paramCardinality<P1>,
    $.cardutil.optionalParamCardinality<P2>
  >
>;
/**
 * Return the input string with all leftmost *trim* characters removed.
 */
function str_ltrim<
  P1 extends _.castMaps.orScalarLiteral<$.TypeSet<$str>>,
  P2 extends _.castMaps.orScalarLiteral<$.TypeSet<$str>> | undefined,
>(s: P1, tr?: P2): str_ltrimλFuncExpr<P1, P2>;
function str_ltrim(...args: any[]) {
  const {
    returnType,
    cardinality,
    args: positionalArgs,
    namedArgs,
  } = _.syntax.$resolveOverload("std::str_ltrim", args, _.spec, [
    {
      args: [
        {
          typeId: "00000000-0000-0000-0000-000000000101",
          optional: false,
          setoftype: false,
          variadic: false,
        },
        {
          typeId: "00000000-0000-0000-0000-000000000101",
          optional: true,
          setoftype: false,
          variadic: false,
        },
      ],
      returnTypeId: "00000000-0000-0000-0000-000000000101",
    },
  ]);
  return _.syntax.$expressionify({
    __kind__: $.ExpressionKind.Function,
    __element__: returnType,
    __cardinality__: cardinality,
    __name__: "std::str_ltrim",
    __args__: positionalArgs,
    __namedargs__: namedArgs,
  }) as any;
}

type str_trim_endλFuncExpr<
  P1 extends _.castMaps.orScalarLiteral<$.TypeSet<$str>>,
  P2 extends _.castMaps.orScalarLiteral<$.TypeSet<$str>> | undefined,
> = $.$expr_Function<
  $str,
  $.cardutil.multiplyCardinalities<
    $.cardutil.paramCardinality<P1>,
    $.cardutil.optionalParamCardinality<P2>
  >
>;
/**
 * Return the input string with all *trim* characters removed from its end.
 */
function str_trim_end<
  P1 extends _.castMaps.orScalarLiteral<$.TypeSet<$str>>,
  P2 extends _.castMaps.orScalarLiteral<$.TypeSet<$str>> | undefined,
>(s: P1, tr?: P2): str_trim_endλFuncExpr<P1, P2>;
function str_trim_end(...args: any[]) {
  const {
    returnType,
    cardinality,
    args: positionalArgs,
    namedArgs,
  } = _.syntax.$resolveOverload("std::str_trim_end", args, _.spec, [
    {
      args: [
        {
          typeId: "00000000-0000-0000-0000-000000000101",
          optional: false,
          setoftype: false,
          variadic: false,
        },
        {
          typeId: "00000000-0000-0000-0000-000000000101",
          optional: true,
          setoftype: false,
          variadic: false,
        },
      ],
      returnTypeId: "00000000-0000-0000-0000-000000000101",
    },
  ]);
  return _.syntax.$expressionify({
    __kind__: $.ExpressionKind.Function,
    __element__: returnType,
    __cardinality__: cardinality,
    __name__: "std::str_trim_end",
    __args__: positionalArgs,
    __namedargs__: namedArgs,
  }) as any;
}

type str_rtrimλFuncExpr<
  P1 extends _.castMaps.orScalarLiteral<$.TypeSet<$str>>,
  P2 extends _.castMaps.orScalarLiteral<$.TypeSet<$str>> | undefined,
> = $.$expr_Function<
  $str,
  $.cardutil.multiplyCardinalities<
    $.cardutil.paramCardinality<P1>,
    $.cardutil.optionalParamCardinality<P2>
  >
>;
/**
 * Return the input string with all rightmost *trim* characters removed.
 */
function str_rtrim<
  P1 extends _.castMaps.orScalarLiteral<$.TypeSet<$str>>,
  P2 extends _.castMaps.orScalarLiteral<$.TypeSet<$str>> | undefined,
>(s: P1, tr?: P2): str_rtrimλFuncExpr<P1, P2>;
function str_rtrim(...args: any[]) {
  const {
    returnType,
    cardinality,
    args: positionalArgs,
    namedArgs,
  } = _.syntax.$resolveOverload("std::str_rtrim", args, _.spec, [
    {
      args: [
        {
          typeId: "00000000-0000-0000-0000-000000000101",
          optional: false,
          setoftype: false,
          variadic: false,
        },
        {
          typeId: "00000000-0000-0000-0000-000000000101",
          optional: true,
          setoftype: false,
          variadic: false,
        },
      ],
      returnTypeId: "00000000-0000-0000-0000-000000000101",
    },
  ]);
  return _.syntax.$expressionify({
    __kind__: $.ExpressionKind.Function,
    __element__: returnType,
    __cardinality__: cardinality,
    __name__: "std::str_rtrim",
    __args__: positionalArgs,
    __namedargs__: namedArgs,
  }) as any;
}

type str_trimλFuncExpr<
  P1 extends _.castMaps.orScalarLiteral<$.TypeSet<$str>>,
  P2 extends _.castMaps.orScalarLiteral<$.TypeSet<$str>> | undefined,
> = $.$expr_Function<
  $str,
  $.cardutil.multiplyCardinalities<
    $.cardutil.paramCardinality<P1>,
    $.cardutil.optionalParamCardinality<P2>
  >
>;
/**
 * Return the input string with *trim* characters removed from both ends.
 */
function str_trim<
  P1 extends _.castMaps.orScalarLiteral<$.TypeSet<$str>>,
  P2 extends _.castMaps.orScalarLiteral<$.TypeSet<$str>> | undefined,
>(s: P1, tr?: P2): str_trimλFuncExpr<P1, P2>;
function str_trim(...args: any[]) {
  const {
    returnType,
    cardinality,
    args: positionalArgs,
    namedArgs,
  } = _.syntax.$resolveOverload("std::str_trim", args, _.spec, [
    {
      args: [
        {
          typeId: "00000000-0000-0000-0000-000000000101",
          optional: false,
          setoftype: false,
          variadic: false,
        },
        {
          typeId: "00000000-0000-0000-0000-000000000101",
          optional: true,
          setoftype: false,
          variadic: false,
        },
      ],
      returnTypeId: "00000000-0000-0000-0000-000000000101",
    },
  ]);
  return _.syntax.$expressionify({
    __kind__: $.ExpressionKind.Function,
    __element__: returnType,
    __cardinality__: cardinality,
    __name__: "std::str_trim",
    __args__: positionalArgs,
    __namedargs__: namedArgs,
  }) as any;
}

type str_splitλFuncExpr<
  P1 extends _.castMaps.orScalarLiteral<$.TypeSet<$str>>,
  P2 extends _.castMaps.orScalarLiteral<$.TypeSet<$str>>,
> = $.$expr_Function<
  $.ArrayType<$str>,
  $.cardutil.multiplyCardinalities<
    $.cardutil.paramCardinality<P1>,
    $.cardutil.paramCardinality<P2>
  >
>;
/**
 * Split string into array elements using the supplied delimiter.
 */
function str_split<
  P1 extends _.castMaps.orScalarLiteral<$.TypeSet<$str>>,
  P2 extends _.castMaps.orScalarLiteral<$.TypeSet<$str>>,
>(s: P1, delimiter: P2): str_splitλFuncExpr<P1, P2>;
function str_split(...args: any[]) {
  const {
    returnType,
    cardinality,
    args: positionalArgs,
    namedArgs,
  } = _.syntax.$resolveOverload("std::str_split", args, _.spec, [
    {
      args: [
        {
          typeId: "00000000-0000-0000-0000-000000000101",
          optional: false,
          setoftype: false,
          variadic: false,
        },
        {
          typeId: "00000000-0000-0000-0000-000000000101",
          optional: false,
          setoftype: false,
          variadic: false,
        },
      ],
      returnTypeId: "bb221d39-09f1-507e-8851-62075bb61823",
    },
  ]);
  return _.syntax.$expressionify({
    __kind__: $.ExpressionKind.Function,
    __element__: returnType,
    __cardinality__: cardinality,
    __name__: "std::str_split",
    __args__: positionalArgs,
    __namedargs__: namedArgs,
  }) as any;
}

type str_replaceλFuncExpr<
  P1 extends _.castMaps.orScalarLiteral<$.TypeSet<$str>>,
  P2 extends _.castMaps.orScalarLiteral<$.TypeSet<$str>>,
  P3 extends _.castMaps.orScalarLiteral<$.TypeSet<$str>>,
> = $.$expr_Function<
  $str,
  $.cardutil.multiplyCardinalities<
    $.cardutil.multiplyCardinalities<
      $.cardutil.paramCardinality<P1>,
      $.cardutil.paramCardinality<P2>
    >,
    $.cardutil.paramCardinality<P3>
  >
>;
/**
 * Given a string, find a matching substring and replace all its occurrences with a new substring.
 */
function str_replace<
  P1 extends _.castMaps.orScalarLiteral<$.TypeSet<$str>>,
  P2 extends _.castMaps.orScalarLiteral<$.TypeSet<$str>>,
  P3 extends _.castMaps.orScalarLiteral<$.TypeSet<$str>>,
>(s: P1, old: P2, new_2: P3): str_replaceλFuncExpr<P1, P2, P3>;
function str_replace(...args: any[]) {
  const {
    returnType,
    cardinality,
    args: positionalArgs,
    namedArgs,
  } = _.syntax.$resolveOverload("std::str_replace", args, _.spec, [
    {
      args: [
        {
          typeId: "00000000-0000-0000-0000-000000000101",
          optional: false,
          setoftype: false,
          variadic: false,
        },
        {
          typeId: "00000000-0000-0000-0000-000000000101",
          optional: false,
          setoftype: false,
          variadic: false,
        },
        {
          typeId: "00000000-0000-0000-0000-000000000101",
          optional: false,
          setoftype: false,
          variadic: false,
        },
      ],
      returnTypeId: "00000000-0000-0000-0000-000000000101",
    },
  ]);
  return _.syntax.$expressionify({
    __kind__: $.ExpressionKind.Function,
    __element__: returnType,
    __cardinality__: cardinality,
    __name__: "std::str_replace",
    __args__: positionalArgs,
    __namedargs__: namedArgs,
  }) as any;
}

type str_reverseλFuncExpr<
  P1 extends _.castMaps.orScalarLiteral<$.TypeSet<$str>>,
> = $.$expr_Function<$str, $.cardutil.paramCardinality<P1>>;
/**
 * Reverse the order of the characters in the string.
 */
function str_reverse<P1 extends _.castMaps.orScalarLiteral<$.TypeSet<$str>>>(
  s: P1,
): str_reverseλFuncExpr<P1>;
function str_reverse(...args: any[]) {
  const {
    returnType,
    cardinality,
    args: positionalArgs,
    namedArgs,
  } = _.syntax.$resolveOverload("std::str_reverse", args, _.spec, [
    {
      args: [
        {
          typeId: "00000000-0000-0000-0000-000000000101",
          optional: false,
          setoftype: false,
          variadic: false,
        },
      ],
      returnTypeId: "00000000-0000-0000-0000-000000000101",
    },
  ]);
  return _.syntax.$expressionify({
    __kind__: $.ExpressionKind.Function,
    __element__: returnType,
    __cardinality__: cardinality,
    __name__: "std::str_reverse",
    __args__: positionalArgs,
    __namedargs__: namedArgs,
  }) as any;
}

type uuid_generate_v1mcλFuncExpr = $.$expr_Function<$uuid, $.Cardinality.One>;
/**
 * Return a version 1 UUID.
 */
function uuid_generate_v1mc(): uuid_generate_v1mcλFuncExpr;
function uuid_generate_v1mc(...args: any[]) {
  const {
    returnType,
    cardinality,
    args: positionalArgs,
    namedArgs,
  } = _.syntax.$resolveOverload("std::uuid_generate_v1mc", args, _.spec, [
    { args: [], returnTypeId: "00000000-0000-0000-0000-000000000100" },
  ]);
  return _.syntax.$expressionify({
    __kind__: $.ExpressionKind.Function,
    __element__: returnType,
    __cardinality__: cardinality,
    __name__: "std::uuid_generate_v1mc",
    __args__: positionalArgs,
    __namedargs__: namedArgs,
  }) as any;
}

type uuid_generate_v4λFuncExpr = $.$expr_Function<$uuid, $.Cardinality.One>;
/**
 * Return a version 4 UUID.
 */
function uuid_generate_v4(): uuid_generate_v4λFuncExpr;
function uuid_generate_v4(...args: any[]) {
  const {
    returnType,
    cardinality,
    args: positionalArgs,
    namedArgs,
  } = _.syntax.$resolveOverload("std::uuid_generate_v4", args, _.spec, [
    { args: [], returnTypeId: "00000000-0000-0000-0000-000000000100" },
  ]);
  return _.syntax.$expressionify({
    __kind__: $.ExpressionKind.Function,
    __element__: returnType,
    __cardinality__: cardinality,
    __name__: "std::uuid_generate_v4",
    __args__: positionalArgs,
    __namedargs__: namedArgs,
  }) as any;
}

const range = _.syntax.$range;

type multirangeλFuncExpr<
  P1 extends $.TypeSet<$.ArrayType<$.RangeType<$anypoint>>>,
> = $.$expr_Function<
  $.MultiRangeType<
    $.getPrimitiveBaseType<P1["__element__"]["__element__"]["__element__"]>
  >,
  $.cardutil.paramCardinality<P1>
>;
function multirange<P1 extends $.TypeSet<$.ArrayType<$.RangeType<$anypoint>>>>(
  ranges: P1,
): multirangeλFuncExpr<P1>;
function multirange(...args: any[]) {
  const {
    returnType,
    cardinality,
    args: positionalArgs,
    namedArgs,
  } = _.syntax.$resolveOverload("std::multirange", args, _.spec, [
    {
      args: [
        {
          typeId: "3ed001c4-98e8-53a8-b2d1-0cad168d926c",
          optional: false,
          setoftype: false,
          variadic: false,
        },
      ],
      returnTypeId: "c3231f27-c8a1-5a0c-9830-c71206020eac",
    },
  ]);
  return _.syntax.$expressionify({
    __kind__: $.ExpressionKind.Function,
    __element__: returnType,
    __cardinality__: cardinality,
    __name__: "std::multirange",
    __args__: positionalArgs,
    __namedargs__: namedArgs,
  }) as any;
}

type range_is_emptyλFuncExpr<P1 extends $.TypeSet<$.RangeType<$anypoint>>> =
  $.$expr_Function<$bool, $.cardutil.paramCardinality<P1>>;
type range_is_emptyλFuncExpr2<
  P1 extends $.TypeSet<$.MultiRangeType<$anypoint>>,
> = $.$expr_Function<$bool, $.cardutil.paramCardinality<P1>>;
function range_is_empty<P1 extends $.TypeSet<$.RangeType<$anypoint>>>(
  val: P1,
): range_is_emptyλFuncExpr<P1>;
function range_is_empty<P1 extends $.TypeSet<$.MultiRangeType<$anypoint>>>(
  val: P1,
): range_is_emptyλFuncExpr2<P1>;
function range_is_empty(...args: any[]) {
  const {
    returnType,
    cardinality,
    args: positionalArgs,
    namedArgs,
  } = _.syntax.$resolveOverload("std::range_is_empty", args, _.spec, [
    {
      args: [
        {
          typeId: "49748e47-8d91-5269-9a34-2e8ca194e0f2",
          optional: false,
          setoftype: false,
          variadic: false,
        },
      ],
      returnTypeId: "00000000-0000-0000-0000-000000000109",
    },
    {
      args: [
        {
          typeId: "c3231f27-c8a1-5a0c-9830-c71206020eac",
          optional: false,
          setoftype: false,
          variadic: false,
        },
      ],
      returnTypeId: "00000000-0000-0000-0000-000000000109",
    },
  ]);
  return _.syntax.$expressionify({
    __kind__: $.ExpressionKind.Function,
    __element__: returnType,
    __cardinality__: cardinality,
    __name__: "std::range_is_empty",
    __args__: positionalArgs,
    __namedargs__: namedArgs,
  }) as any;
}

type range_unpackλFuncExpr<P1 extends $.TypeSet<$.RangeType<$number>>> =
  $.$expr_Function<$number, $.Cardinality.Many>;
type range_unpackλFuncExpr2<P1 extends $.TypeSet<$.RangeType<$number>>> =
  $.$expr_Function<$number, $.Cardinality.Many>;
type range_unpackλFuncExpr3<
  P1 extends $.TypeSet<$.RangeType<_stdcal.$local_date>>,
> = $.$expr_Function<_stdcal.$local_date, $.Cardinality.Many>;
type range_unpackλFuncExpr4<
  P1 extends $.TypeSet<$.RangeType<$number>>,
  P2 extends _.castMaps.orScalarLiteral<$.TypeSet<$number>>,
> = $.$expr_Function<$number, $.Cardinality.Many>;
type range_unpackλFuncExpr5<
  P1 extends $.TypeSet<$.RangeType<$number>>,
  P2 extends _.castMaps.orScalarLiteral<$.TypeSet<$number>>,
> = $.$expr_Function<$number, $.Cardinality.Many>;
type range_unpackλFuncExpr6<
  P1 extends $.TypeSet<$.RangeType<$number>>,
  P2 extends _.castMaps.orScalarLiteral<$.TypeSet<$number>>,
> = $.$expr_Function<$number, $.Cardinality.Many>;
type range_unpackλFuncExpr7<
  P1 extends $.TypeSet<$.RangeType<$number>>,
  P2 extends _.castMaps.orScalarLiteral<$.TypeSet<$number>>,
> = $.$expr_Function<$number, $.Cardinality.Many>;
type range_unpackλFuncExpr8<
  P1 extends $.TypeSet<$.RangeType<$datetime>>,
  P2 extends _.castMaps.orScalarLiteral<$.TypeSet<$duration>>,
> = $.$expr_Function<$datetime, $.Cardinality.Many>;
type range_unpackλFuncExpr9<
  P1 extends $.TypeSet<$.RangeType<_stdcal.$local_date>>,
  P2 extends _.castMaps.orScalarLiteral<$.TypeSet<_stdcal.$date_duration>>,
> = $.$expr_Function<_stdcal.$local_date, $.Cardinality.Many>;
type range_unpackλFuncExpr10<
  P1 extends $.TypeSet<$.RangeType<$decimalλICastableTo>>,
  P2 extends _.castMaps.orScalarLiteral<$.TypeSet<$decimalλICastableTo>>,
> = $.$expr_Function<$decimal, $.Cardinality.Many>;
type range_unpackλFuncExpr11<
  P1 extends $.TypeSet<$.RangeType<_stdcal.$local_datetimeλICastableTo>>,
  P2 extends _.castMaps.orScalarLiteral<
    $.TypeSet<_stdcal.$relative_durationλICastableTo>
  >,
> = $.$expr_Function<_stdcal.$local_datetime, $.Cardinality.Many>;
function range_unpack<P1 extends $.TypeSet<$.RangeType<$number>>>(
  val: P1,
): range_unpackλFuncExpr<P1>;
function range_unpack<P1 extends $.TypeSet<$.RangeType<$number>>>(
  val: P1,
): range_unpackλFuncExpr2<P1>;
function range_unpack<P1 extends $.TypeSet<$.RangeType<_stdcal.$local_date>>>(
  val: P1,
): range_unpackλFuncExpr3<P1>;
function range_unpack<
  P1 extends $.TypeSet<$.RangeType<$number>>,
  P2 extends _.castMaps.orScalarLiteral<$.TypeSet<$number>>,
>(val: P1, step: P2): range_unpackλFuncExpr4<P1, P2>;
function range_unpack<
  P1 extends $.TypeSet<$.RangeType<$number>>,
  P2 extends _.castMaps.orScalarLiteral<$.TypeSet<$number>>,
>(val: P1, step: P2): range_unpackλFuncExpr5<P1, P2>;
function range_unpack<
  P1 extends $.TypeSet<$.RangeType<$number>>,
  P2 extends _.castMaps.orScalarLiteral<$.TypeSet<$number>>,
>(val: P1, step: P2): range_unpackλFuncExpr6<P1, P2>;
function range_unpack<
  P1 extends $.TypeSet<$.RangeType<$number>>,
  P2 extends _.castMaps.orScalarLiteral<$.TypeSet<$number>>,
>(val: P1, step: P2): range_unpackλFuncExpr7<P1, P2>;
function range_unpack<
  P1 extends $.TypeSet<$.RangeType<$datetime>>,
  P2 extends _.castMaps.orScalarLiteral<$.TypeSet<$duration>>,
>(val: P1, step: P2): range_unpackλFuncExpr8<P1, P2>;
function range_unpack<
  P1 extends $.TypeSet<$.RangeType<_stdcal.$local_date>>,
  P2 extends _.castMaps.orScalarLiteral<$.TypeSet<_stdcal.$date_duration>>,
>(val: P1, step: P2): range_unpackλFuncExpr9<P1, P2>;
function range_unpack<
  P1 extends $.TypeSet<$.RangeType<$decimalλICastableTo>>,
  P2 extends _.castMaps.orScalarLiteral<$.TypeSet<$decimalλICastableTo>>,
>(val: P1, step: P2): range_unpackλFuncExpr10<P1, P2>;
function range_unpack<
  P1 extends $.TypeSet<$.RangeType<_stdcal.$local_datetimeλICastableTo>>,
  P2 extends _.castMaps.orScalarLiteral<
    $.TypeSet<_stdcal.$relative_durationλICastableTo>
  >,
>(val: P1, step: P2): range_unpackλFuncExpr11<P1, P2>;
function range_unpack(...args: any[]) {
  const {
    returnType,
    cardinality,
    args: positionalArgs,
    namedArgs,
  } = _.syntax.$resolveOverload("std::range_unpack", args, _.spec, [
    {
      args: [
        {
          typeId: "38b58945-dfd2-572c-bf7e-8cadf204a2ec",
          optional: false,
          setoftype: false,
          variadic: false,
        },
      ],
      returnTypeId: "00000000-0000-0000-0000-0000000001ff",
      returnTypemod: "SetOfType",
    },
    {
      args: [
        {
          typeId: "356c02b7-20fa-5d27-90fc-aa628dd37c5e",
          optional: false,
          setoftype: false,
          variadic: false,
        },
      ],
      returnTypeId: "00000000-0000-0000-0000-0000000001ff",
      returnTypemod: "SetOfType",
    },
    {
      args: [
        {
          typeId: "c38cc584-72e2-5b3d-a9cc-e8e256c2dd0d",
          optional: false,
          setoftype: false,
          variadic: false,
        },
      ],
      returnTypeId: "00000000-0000-0000-0000-00000000010c",
      returnTypemod: "SetOfType",
    },
    {
      args: [
        {
          typeId: "38b58945-dfd2-572c-bf7e-8cadf204a2ec",
          optional: false,
          setoftype: false,
          variadic: false,
        },
        {
          typeId: "00000000-0000-0000-0000-0000000001ff",
          optional: false,
          setoftype: false,
          variadic: false,
        },
      ],
      returnTypeId: "00000000-0000-0000-0000-0000000001ff",
      returnTypemod: "SetOfType",
    },
    {
      args: [
        {
          typeId: "356c02b7-20fa-5d27-90fc-aa628dd37c5e",
          optional: false,
          setoftype: false,
          variadic: false,
        },
        {
          typeId: "00000000-0000-0000-0000-0000000001ff",
          optional: false,
          setoftype: false,
          variadic: false,
        },
      ],
      returnTypeId: "00000000-0000-0000-0000-0000000001ff",
      returnTypemod: "SetOfType",
    },
    {
      args: [
        {
          typeId: "ef0fdfe1-43f9-5954-b804-56e9b7015ffc",
          optional: false,
          setoftype: false,
          variadic: false,
        },
        {
          typeId: "00000000-0000-0000-0000-0000000001ff",
          optional: false,
          setoftype: false,
          variadic: false,
        },
      ],
      returnTypeId: "00000000-0000-0000-0000-0000000001ff",
      returnTypemod: "SetOfType",
    },
    {
      args: [
        {
          typeId: "b2f8ab6d-ebca-517d-9f16-086423c5bb9c",
          optional: false,
          setoftype: false,
          variadic: false,
        },
        {
          typeId: "00000000-0000-0000-0000-0000000001ff",
          optional: false,
          setoftype: false,
          variadic: false,
        },
      ],
      returnTypeId: "00000000-0000-0000-0000-0000000001ff",
      returnTypemod: "SetOfType",
    },
    {
      args: [
        {
          typeId: "10674aaf-8d88-5593-abe9-f7d82be5162b",
          optional: false,
          setoftype: false,
          variadic: false,
        },
        {
          typeId: "00000000-0000-0000-0000-00000000010e",
          optional: false,
          setoftype: false,
          variadic: false,
        },
      ],
      returnTypeId: "00000000-0000-0000-0000-00000000010a",
      returnTypemod: "SetOfType",
    },
    {
      args: [
        {
          typeId: "c38cc584-72e2-5b3d-a9cc-e8e256c2dd0d",
          optional: false,
          setoftype: false,
          variadic: false,
        },
        {
          typeId: "00000000-0000-0000-0000-000000000112",
          optional: false,
          setoftype: false,
          variadic: false,
        },
      ],
      returnTypeId: "00000000-0000-0000-0000-00000000010c",
      returnTypemod: "SetOfType",
    },
    {
      args: [
        {
          typeId: "c61dd200-697a-5b70-9ff0-6c623a700c14",
          optional: false,
          setoftype: false,
          variadic: false,
        },
        {
          typeId: "00000000-0000-0000-0000-000000000108",
          optional: false,
          setoftype: false,
          variadic: false,
        },
      ],
      returnTypeId: "00000000-0000-0000-0000-000000000108",
      returnTypemod: "SetOfType",
    },
    {
      args: [
        {
          typeId: "44825479-8abf-55f6-93bf-572798ec8f12",
          optional: false,
          setoftype: false,
          variadic: false,
        },
        {
          typeId: "00000000-0000-0000-0000-000000000111",
          optional: false,
          setoftype: false,
          variadic: false,
        },
      ],
      returnTypeId: "00000000-0000-0000-0000-00000000010b",
      returnTypemod: "SetOfType",
    },
  ]);
  return _.syntax.$expressionify({
    __kind__: $.ExpressionKind.Function,
    __element__: returnType,
    __cardinality__: cardinality,
    __name__: "std::range_unpack",
    __args__: positionalArgs,
    __namedargs__: namedArgs,
  }) as any;
}

type range_get_upperλFuncExpr<P1 extends $.TypeSet<$.RangeType<$anypoint>>> =
  $.$expr_Function<
    $.getPrimitiveBaseType<P1["__element__"]["__element__"]>,
    $.cardutil.overrideLowerBound<$.cardutil.paramCardinality<P1>, "Zero">
  >;
type range_get_upperλFuncExpr2<
  P1 extends $.TypeSet<$.MultiRangeType<$anypoint>>,
> = $.$expr_Function<
  $.getPrimitiveBaseType<P1["__element__"]["__element__"]>,
  $.cardutil.overrideLowerBound<$.cardutil.paramCardinality<P1>, "Zero">
>;
function range_get_upper<P1 extends $.TypeSet<$.RangeType<$anypoint>>>(
  r: P1,
): range_get_upperλFuncExpr<P1>;
function range_get_upper<P1 extends $.TypeSet<$.MultiRangeType<$anypoint>>>(
  r: P1,
): range_get_upperλFuncExpr2<P1>;
function range_get_upper(...args: any[]) {
  const {
    returnType,
    cardinality,
    args: positionalArgs,
    namedArgs,
  } = _.syntax.$resolveOverload("std::range_get_upper", args, _.spec, [
    {
      args: [
        {
          typeId: "49748e47-8d91-5269-9a34-2e8ca194e0f2",
          optional: false,
          setoftype: false,
          variadic: false,
        },
      ],
      returnTypeId: "581b0325-a044-58d4-aa37-3a85ea671313",
      returnTypemod: "OptionalType",
    },
    {
      args: [
        {
          typeId: "c3231f27-c8a1-5a0c-9830-c71206020eac",
          optional: false,
          setoftype: false,
          variadic: false,
        },
      ],
      returnTypeId: "581b0325-a044-58d4-aa37-3a85ea671313",
      returnTypemod: "OptionalType",
    },
  ]);
  return _.syntax.$expressionify({
    __kind__: $.ExpressionKind.Function,
    __element__: returnType,
    __cardinality__: cardinality,
    __name__: "std::range_get_upper",
    __args__: positionalArgs,
    __namedargs__: namedArgs,
  }) as any;
}

type range_get_lowerλFuncExpr<P1 extends $.TypeSet<$.RangeType<$anypoint>>> =
  $.$expr_Function<
    $.getPrimitiveBaseType<P1["__element__"]["__element__"]>,
    $.cardutil.overrideLowerBound<$.cardutil.paramCardinality<P1>, "Zero">
  >;
type range_get_lowerλFuncExpr2<
  P1 extends $.TypeSet<$.MultiRangeType<$anypoint>>,
> = $.$expr_Function<
  $.getPrimitiveBaseType<P1["__element__"]["__element__"]>,
  $.cardutil.overrideLowerBound<$.cardutil.paramCardinality<P1>, "Zero">
>;
function range_get_lower<P1 extends $.TypeSet<$.RangeType<$anypoint>>>(
  r: P1,
): range_get_lowerλFuncExpr<P1>;
function range_get_lower<P1 extends $.TypeSet<$.MultiRangeType<$anypoint>>>(
  r: P1,
): range_get_lowerλFuncExpr2<P1>;
function range_get_lower(...args: any[]) {
  const {
    returnType,
    cardinality,
    args: positionalArgs,
    namedArgs,
  } = _.syntax.$resolveOverload("std::range_get_lower", args, _.spec, [
    {
      args: [
        {
          typeId: "49748e47-8d91-5269-9a34-2e8ca194e0f2",
          optional: false,
          setoftype: false,
          variadic: false,
        },
      ],
      returnTypeId: "581b0325-a044-58d4-aa37-3a85ea671313",
      returnTypemod: "OptionalType",
    },
    {
      args: [
        {
          typeId: "c3231f27-c8a1-5a0c-9830-c71206020eac",
          optional: false,
          setoftype: false,
          variadic: false,
        },
      ],
      returnTypeId: "581b0325-a044-58d4-aa37-3a85ea671313",
      returnTypemod: "OptionalType",
    },
  ]);
  return _.syntax.$expressionify({
    __kind__: $.ExpressionKind.Function,
    __element__: returnType,
    __cardinality__: cardinality,
    __name__: "std::range_get_lower",
    __args__: positionalArgs,
    __namedargs__: namedArgs,
  }) as any;
}

type range_is_inclusive_upperλFuncExpr<
  P1 extends $.TypeSet<$.RangeType<$anypoint>>,
> = $.$expr_Function<$bool, $.cardutil.paramCardinality<P1>>;
type range_is_inclusive_upperλFuncExpr2<
  P1 extends $.TypeSet<$.MultiRangeType<$anypoint>>,
> = $.$expr_Function<$bool, $.cardutil.paramCardinality<P1>>;
function range_is_inclusive_upper<P1 extends $.TypeSet<$.RangeType<$anypoint>>>(
  r: P1,
): range_is_inclusive_upperλFuncExpr<P1>;
function range_is_inclusive_upper<
  P1 extends $.TypeSet<$.MultiRangeType<$anypoint>>,
>(r: P1): range_is_inclusive_upperλFuncExpr2<P1>;
function range_is_inclusive_upper(...args: any[]) {
  const {
    returnType,
    cardinality,
    args: positionalArgs,
    namedArgs,
  } = _.syntax.$resolveOverload("std::range_is_inclusive_upper", args, _.spec, [
    {
      args: [
        {
          typeId: "49748e47-8d91-5269-9a34-2e8ca194e0f2",
          optional: false,
          setoftype: false,
          variadic: false,
        },
      ],
      returnTypeId: "00000000-0000-0000-0000-000000000109",
    },
    {
      args: [
        {
          typeId: "c3231f27-c8a1-5a0c-9830-c71206020eac",
          optional: false,
          setoftype: false,
          variadic: false,
        },
      ],
      returnTypeId: "00000000-0000-0000-0000-000000000109",
    },
  ]);
  return _.syntax.$expressionify({
    __kind__: $.ExpressionKind.Function,
    __element__: returnType,
    __cardinality__: cardinality,
    __name__: "std::range_is_inclusive_upper",
    __args__: positionalArgs,
    __namedargs__: namedArgs,
  }) as any;
}

type range_is_inclusive_lowerλFuncExpr<
  P1 extends $.TypeSet<$.RangeType<$anypoint>>,
> = $.$expr_Function<$bool, $.cardutil.paramCardinality<P1>>;
type range_is_inclusive_lowerλFuncExpr2<
  P1 extends $.TypeSet<$.MultiRangeType<$anypoint>>,
> = $.$expr_Function<$bool, $.cardutil.paramCardinality<P1>>;
function range_is_inclusive_lower<P1 extends $.TypeSet<$.RangeType<$anypoint>>>(
  r: P1,
): range_is_inclusive_lowerλFuncExpr<P1>;
function range_is_inclusive_lower<
  P1 extends $.TypeSet<$.MultiRangeType<$anypoint>>,
>(r: P1): range_is_inclusive_lowerλFuncExpr2<P1>;
function range_is_inclusive_lower(...args: any[]) {
  const {
    returnType,
    cardinality,
    args: positionalArgs,
    namedArgs,
  } = _.syntax.$resolveOverload("std::range_is_inclusive_lower", args, _.spec, [
    {
      args: [
        {
          typeId: "49748e47-8d91-5269-9a34-2e8ca194e0f2",
          optional: false,
          setoftype: false,
          variadic: false,
        },
      ],
      returnTypeId: "00000000-0000-0000-0000-000000000109",
    },
    {
      args: [
        {
          typeId: "c3231f27-c8a1-5a0c-9830-c71206020eac",
          optional: false,
          setoftype: false,
          variadic: false,
        },
      ],
      returnTypeId: "00000000-0000-0000-0000-000000000109",
    },
  ]);
  return _.syntax.$expressionify({
    __kind__: $.ExpressionKind.Function,
    __element__: returnType,
    __cardinality__: cardinality,
    __name__: "std::range_is_inclusive_lower",
    __args__: positionalArgs,
    __namedargs__: namedArgs,
  }) as any;
}

type overlapsλFuncExpr<
  P1 extends $.TypeSet<$.RangeType<$anypoint>>,
  P2 extends $.TypeSet<
    $.RangeType<$.getPrimitiveBaseType<P1["__element__"]["__element__"]>>
  >,
> = $.$expr_Function<
  $bool,
  $.cardutil.multiplyCardinalities<
    $.cardutil.paramCardinality<P1>,
    $.cardutil.paramCardinality<P2>
  >
>;
type overlapsλFuncExpr2<
  P1 extends $.TypeSet<$.MultiRangeType<$anypoint>>,
  P2 extends $.TypeSet<
    $.MultiRangeType<$.getPrimitiveBaseType<P1["__element__"]["__element__"]>>
  >,
> = $.$expr_Function<
  $bool,
  $.cardutil.multiplyCardinalities<
    $.cardutil.paramCardinality<P1>,
    $.cardutil.paramCardinality<P2>
  >
>;
function overlaps<
  P1 extends $.TypeSet<$.RangeType<$anypoint>>,
  P2 extends $.TypeSet<
    $.RangeType<$.getPrimitiveBaseType<P1["__element__"]["__element__"]>>
  >,
>(l: P1, r: P2): overlapsλFuncExpr<P1, P2>;
function overlaps<
  P1 extends $.TypeSet<$.MultiRangeType<$anypoint>>,
  P2 extends $.TypeSet<
    $.MultiRangeType<$.getPrimitiveBaseType<P1["__element__"]["__element__"]>>
  >,
>(l: P1, r: P2): overlapsλFuncExpr2<P1, P2>;
function overlaps(...args: any[]) {
  const {
    returnType,
    cardinality,
    args: positionalArgs,
    namedArgs,
  } = _.syntax.$resolveOverload("std::overlaps", args, _.spec, [
    {
      args: [
        {
          typeId: "49748e47-8d91-5269-9a34-2e8ca194e0f2",
          optional: false,
          setoftype: false,
          variadic: false,
        },
        {
          typeId: "49748e47-8d91-5269-9a34-2e8ca194e0f2",
          optional: false,
          setoftype: false,
          variadic: false,
        },
      ],
      returnTypeId: "00000000-0000-0000-0000-000000000109",
    },
    {
      args: [
        {
          typeId: "c3231f27-c8a1-5a0c-9830-c71206020eac",
          optional: false,
          setoftype: false,
          variadic: false,
        },
        {
          typeId: "c3231f27-c8a1-5a0c-9830-c71206020eac",
          optional: false,
          setoftype: false,
          variadic: false,
        },
      ],
      returnTypeId: "00000000-0000-0000-0000-000000000109",
    },
  ]);
  return _.syntax.$expressionify({
    __kind__: $.ExpressionKind.Function,
    __element__: returnType,
    __cardinality__: cardinality,
    __name__: "std::overlaps",
    __args__: positionalArgs,
    __namedargs__: namedArgs,
  }) as any;
}

type multirange_unpackλFuncExpr<
  P1 extends $.TypeSet<$.MultiRangeType<$number>>,
> = $.$expr_Function<$.RangeType<$number>, $.Cardinality.Many>;
type multirange_unpackλFuncExpr2<
  P1 extends $.TypeSet<$.MultiRangeType<$number>>,
> = $.$expr_Function<$.RangeType<$number>, $.Cardinality.Many>;
type multirange_unpackλFuncExpr3<
  P1 extends $.TypeSet<$.MultiRangeType<$number>>,
> = $.$expr_Function<$.RangeType<$number>, $.Cardinality.Many>;
type multirange_unpackλFuncExpr4<
  P1 extends $.TypeSet<$.MultiRangeType<$number>>,
> = $.$expr_Function<$.RangeType<$number>, $.Cardinality.Many>;
type multirange_unpackλFuncExpr5<
  P1 extends $.TypeSet<$.MultiRangeType<$decimalλICastableTo>>,
> = $.$expr_Function<$.RangeType<$decimal>, $.Cardinality.Many>;
type multirange_unpackλFuncExpr6<
  P1 extends $.TypeSet<$.MultiRangeType<$datetime>>,
> = $.$expr_Function<$.RangeType<$datetime>, $.Cardinality.Many>;
type multirange_unpackλFuncExpr7<
  P1 extends $.TypeSet<$.MultiRangeType<_stdcal.$local_datetimeλICastableTo>>,
> = $.$expr_Function<$.RangeType<_stdcal.$local_datetime>, $.Cardinality.Many>;
type multirange_unpackλFuncExpr8<
  P1 extends $.TypeSet<$.MultiRangeType<_stdcal.$local_date>>,
> = $.$expr_Function<$.RangeType<_stdcal.$local_date>, $.Cardinality.Many>;
function multirange_unpack<P1 extends $.TypeSet<$.MultiRangeType<$number>>>(
  val: P1,
): multirange_unpackλFuncExpr<P1>;
function multirange_unpack<P1 extends $.TypeSet<$.MultiRangeType<$number>>>(
  val: P1,
): multirange_unpackλFuncExpr2<P1>;
function multirange_unpack<P1 extends $.TypeSet<$.MultiRangeType<$number>>>(
  val: P1,
): multirange_unpackλFuncExpr3<P1>;
function multirange_unpack<P1 extends $.TypeSet<$.MultiRangeType<$number>>>(
  val: P1,
): multirange_unpackλFuncExpr4<P1>;
function multirange_unpack<
  P1 extends $.TypeSet<$.MultiRangeType<$decimalλICastableTo>>,
>(val: P1): multirange_unpackλFuncExpr5<P1>;
function multirange_unpack<P1 extends $.TypeSet<$.MultiRangeType<$datetime>>>(
  val: P1,
): multirange_unpackλFuncExpr6<P1>;
function multirange_unpack<
  P1 extends $.TypeSet<$.MultiRangeType<_stdcal.$local_datetimeλICastableTo>>,
>(val: P1): multirange_unpackλFuncExpr7<P1>;
function multirange_unpack<
  P1 extends $.TypeSet<$.MultiRangeType<_stdcal.$local_date>>,
>(val: P1): multirange_unpackλFuncExpr8<P1>;
function multirange_unpack(...args: any[]) {
  const {
    returnType,
    cardinality,
    args: positionalArgs,
    namedArgs,
  } = _.syntax.$resolveOverload("std::multirange_unpack", args, _.spec, [
    {
      args: [
        {
          typeId: "a36a494d-f2c1-5886-8e17-b0c8ba9337ff",
          optional: false,
          setoftype: false,
          variadic: false,
        },
      ],
      returnTypeId: "38b58945-dfd2-572c-bf7e-8cadf204a2ec",
      returnTypemod: "SetOfType",
    },
    {
      args: [
        {
          typeId: "da3c9da3-1b79-53d0-ae36-82026533939b",
          optional: false,
          setoftype: false,
          variadic: false,
        },
      ],
      returnTypeId: "356c02b7-20fa-5d27-90fc-aa628dd37c5e",
      returnTypemod: "SetOfType",
    },
    {
      args: [
        {
          typeId: "18b39277-efe3-582c-8bdc-b18f4ed46e09",
          optional: false,
          setoftype: false,
          variadic: false,
        },
      ],
      returnTypeId: "ef0fdfe1-43f9-5954-b804-56e9b7015ffc",
      returnTypemod: "SetOfType",
    },
    {
      args: [
        {
          typeId: "75f5b5c7-f201-56a8-9fd0-bd139e69fdbe",
          optional: false,
          setoftype: false,
          variadic: false,
        },
      ],
      returnTypeId: "b2f8ab6d-ebca-517d-9f16-086423c5bb9c",
      returnTypemod: "SetOfType",
    },
    {
      args: [
        {
          typeId: "80da35c5-4ed6-5799-8eea-1c5923a3f8d3",
          optional: false,
          setoftype: false,
          variadic: false,
        },
      ],
      returnTypeId: "c61dd200-697a-5b70-9ff0-6c623a700c14",
      returnTypemod: "SetOfType",
    },
    {
      args: [
        {
          typeId: "58da8bd4-709a-50bc-b0b4-a1918b7dc2ba",
          optional: false,
          setoftype: false,
          variadic: false,
        },
      ],
      returnTypeId: "10674aaf-8d88-5593-abe9-f7d82be5162b",
      returnTypemod: "SetOfType",
    },
    {
      args: [
        {
          typeId: "37c39ed3-114c-5835-b662-80d80db0199d",
          optional: false,
          setoftype: false,
          variadic: false,
        },
      ],
      returnTypeId: "44825479-8abf-55f6-93bf-572798ec8f12",
      returnTypemod: "SetOfType",
    },
    {
      args: [
        {
          typeId: "74568c88-a8c3-5a02-9acd-64616d07ab8b",
          optional: false,
          setoftype: false,
          variadic: false,
        },
      ],
      returnTypeId: "c38cc584-72e2-5b3d-a9cc-e8e256c2dd0d",
      returnTypemod: "SetOfType",
    },
  ]);
  return _.syntax.$expressionify({
    __kind__: $.ExpressionKind.Function,
    __element__: returnType,
    __cardinality__: cardinality,
    __name__: "std::multirange_unpack",
    __args__: positionalArgs,
    __namedargs__: namedArgs,
  }) as any;
}

type strictly_belowλFuncExpr<
  P1 extends $.TypeSet<$.RangeType<$anypoint>>,
  P2 extends $.TypeSet<
    $.RangeType<$.getPrimitiveBaseType<P1["__element__"]["__element__"]>>
  >,
> = $.$expr_Function<
  $bool,
  $.cardutil.multiplyCardinalities<
    $.cardutil.paramCardinality<P1>,
    $.cardutil.paramCardinality<P2>
  >
>;
type strictly_belowλFuncExpr2<
  P1 extends $.TypeSet<$.MultiRangeType<$anypoint>>,
  P2 extends $.TypeSet<
    $.MultiRangeType<$.getPrimitiveBaseType<P1["__element__"]["__element__"]>>
  >,
> = $.$expr_Function<
  $bool,
  $.cardutil.multiplyCardinalities<
    $.cardutil.paramCardinality<P1>,
    $.cardutil.paramCardinality<P2>
  >
>;
function strictly_below<
  P1 extends $.TypeSet<$.RangeType<$anypoint>>,
  P2 extends $.TypeSet<
    $.RangeType<$.getPrimitiveBaseType<P1["__element__"]["__element__"]>>
  >,
>(l: P1, r: P2): strictly_belowλFuncExpr<P1, P2>;
function strictly_below<
  P1 extends $.TypeSet<$.MultiRangeType<$anypoint>>,
  P2 extends $.TypeSet<
    $.MultiRangeType<$.getPrimitiveBaseType<P1["__element__"]["__element__"]>>
  >,
>(l: P1, r: P2): strictly_belowλFuncExpr2<P1, P2>;
function strictly_below(...args: any[]) {
  const {
    returnType,
    cardinality,
    args: positionalArgs,
    namedArgs,
  } = _.syntax.$resolveOverload("std::strictly_below", args, _.spec, [
    {
      args: [
        {
          typeId: "49748e47-8d91-5269-9a34-2e8ca194e0f2",
          optional: false,
          setoftype: false,
          variadic: false,
        },
        {
          typeId: "49748e47-8d91-5269-9a34-2e8ca194e0f2",
          optional: false,
          setoftype: false,
          variadic: false,
        },
      ],
      returnTypeId: "00000000-0000-0000-0000-000000000109",
    },
    {
      args: [
        {
          typeId: "c3231f27-c8a1-5a0c-9830-c71206020eac",
          optional: false,
          setoftype: false,
          variadic: false,
        },
        {
          typeId: "c3231f27-c8a1-5a0c-9830-c71206020eac",
          optional: false,
          setoftype: false,
          variadic: false,
        },
      ],
      returnTypeId: "00000000-0000-0000-0000-000000000109",
    },
  ]);
  return _.syntax.$expressionify({
    __kind__: $.ExpressionKind.Function,
    __element__: returnType,
    __cardinality__: cardinality,
    __name__: "std::strictly_below",
    __args__: positionalArgs,
    __namedargs__: namedArgs,
  }) as any;
}

type strictly_aboveλFuncExpr<
  P1 extends $.TypeSet<$.RangeType<$anypoint>>,
  P2 extends $.TypeSet<
    $.RangeType<$.getPrimitiveBaseType<P1["__element__"]["__element__"]>>
  >,
> = $.$expr_Function<
  $bool,
  $.cardutil.multiplyCardinalities<
    $.cardutil.paramCardinality<P1>,
    $.cardutil.paramCardinality<P2>
  >
>;
type strictly_aboveλFuncExpr2<
  P1 extends $.TypeSet<$.MultiRangeType<$anypoint>>,
  P2 extends $.TypeSet<
    $.MultiRangeType<$.getPrimitiveBaseType<P1["__element__"]["__element__"]>>
  >,
> = $.$expr_Function<
  $bool,
  $.cardutil.multiplyCardinalities<
    $.cardutil.paramCardinality<P1>,
    $.cardutil.paramCardinality<P2>
  >
>;
function strictly_above<
  P1 extends $.TypeSet<$.RangeType<$anypoint>>,
  P2 extends $.TypeSet<
    $.RangeType<$.getPrimitiveBaseType<P1["__element__"]["__element__"]>>
  >,
>(l: P1, r: P2): strictly_aboveλFuncExpr<P1, P2>;
function strictly_above<
  P1 extends $.TypeSet<$.MultiRangeType<$anypoint>>,
  P2 extends $.TypeSet<
    $.MultiRangeType<$.getPrimitiveBaseType<P1["__element__"]["__element__"]>>
  >,
>(l: P1, r: P2): strictly_aboveλFuncExpr2<P1, P2>;
function strictly_above(...args: any[]) {
  const {
    returnType,
    cardinality,
    args: positionalArgs,
    namedArgs,
  } = _.syntax.$resolveOverload("std::strictly_above", args, _.spec, [
    {
      args: [
        {
          typeId: "49748e47-8d91-5269-9a34-2e8ca194e0f2",
          optional: false,
          setoftype: false,
          variadic: false,
        },
        {
          typeId: "49748e47-8d91-5269-9a34-2e8ca194e0f2",
          optional: false,
          setoftype: false,
          variadic: false,
        },
      ],
      returnTypeId: "00000000-0000-0000-0000-000000000109",
    },
    {
      args: [
        {
          typeId: "c3231f27-c8a1-5a0c-9830-c71206020eac",
          optional: false,
          setoftype: false,
          variadic: false,
        },
        {
          typeId: "c3231f27-c8a1-5a0c-9830-c71206020eac",
          optional: false,
          setoftype: false,
          variadic: false,
        },
      ],
      returnTypeId: "00000000-0000-0000-0000-000000000109",
    },
  ]);
  return _.syntax.$expressionify({
    __kind__: $.ExpressionKind.Function,
    __element__: returnType,
    __cardinality__: cardinality,
    __name__: "std::strictly_above",
    __args__: positionalArgs,
    __namedargs__: namedArgs,
  }) as any;
}

type bounded_aboveλFuncExpr<
  P1 extends $.TypeSet<$.RangeType<$anypoint>>,
  P2 extends $.TypeSet<
    $.RangeType<$.getPrimitiveBaseType<P1["__element__"]["__element__"]>>
  >,
> = $.$expr_Function<
  $bool,
  $.cardutil.multiplyCardinalities<
    $.cardutil.paramCardinality<P1>,
    $.cardutil.paramCardinality<P2>
  >
>;
type bounded_aboveλFuncExpr2<
  P1 extends $.TypeSet<$.MultiRangeType<$anypoint>>,
  P2 extends $.TypeSet<
    $.MultiRangeType<$.getPrimitiveBaseType<P1["__element__"]["__element__"]>>
  >,
> = $.$expr_Function<
  $bool,
  $.cardutil.multiplyCardinalities<
    $.cardutil.paramCardinality<P1>,
    $.cardutil.paramCardinality<P2>
  >
>;
function bounded_above<
  P1 extends $.TypeSet<$.RangeType<$anypoint>>,
  P2 extends $.TypeSet<
    $.RangeType<$.getPrimitiveBaseType<P1["__element__"]["__element__"]>>
  >,
>(l: P1, r: P2): bounded_aboveλFuncExpr<P1, P2>;
function bounded_above<
  P1 extends $.TypeSet<$.MultiRangeType<$anypoint>>,
  P2 extends $.TypeSet<
    $.MultiRangeType<$.getPrimitiveBaseType<P1["__element__"]["__element__"]>>
  >,
>(l: P1, r: P2): bounded_aboveλFuncExpr2<P1, P2>;
function bounded_above(...args: any[]) {
  const {
    returnType,
    cardinality,
    args: positionalArgs,
    namedArgs,
  } = _.syntax.$resolveOverload("std::bounded_above", args, _.spec, [
    {
      args: [
        {
          typeId: "49748e47-8d91-5269-9a34-2e8ca194e0f2",
          optional: false,
          setoftype: false,
          variadic: false,
        },
        {
          typeId: "49748e47-8d91-5269-9a34-2e8ca194e0f2",
          optional: false,
          setoftype: false,
          variadic: false,
        },
      ],
      returnTypeId: "00000000-0000-0000-0000-000000000109",
    },
    {
      args: [
        {
          typeId: "c3231f27-c8a1-5a0c-9830-c71206020eac",
          optional: false,
          setoftype: false,
          variadic: false,
        },
        {
          typeId: "c3231f27-c8a1-5a0c-9830-c71206020eac",
          optional: false,
          setoftype: false,
          variadic: false,
        },
      ],
      returnTypeId: "00000000-0000-0000-0000-000000000109",
    },
  ]);
  return _.syntax.$expressionify({
    __kind__: $.ExpressionKind.Function,
    __element__: returnType,
    __cardinality__: cardinality,
    __name__: "std::bounded_above",
    __args__: positionalArgs,
    __namedargs__: namedArgs,
  }) as any;
}

type bounded_belowλFuncExpr<
  P1 extends $.TypeSet<$.RangeType<$anypoint>>,
  P2 extends $.TypeSet<
    $.RangeType<$.getPrimitiveBaseType<P1["__element__"]["__element__"]>>
  >,
> = $.$expr_Function<
  $bool,
  $.cardutil.multiplyCardinalities<
    $.cardutil.paramCardinality<P1>,
    $.cardutil.paramCardinality<P2>
  >
>;
type bounded_belowλFuncExpr2<
  P1 extends $.TypeSet<$.MultiRangeType<$anypoint>>,
  P2 extends $.TypeSet<
    $.MultiRangeType<$.getPrimitiveBaseType<P1["__element__"]["__element__"]>>
  >,
> = $.$expr_Function<
  $bool,
  $.cardutil.multiplyCardinalities<
    $.cardutil.paramCardinality<P1>,
    $.cardutil.paramCardinality<P2>
  >
>;
function bounded_below<
  P1 extends $.TypeSet<$.RangeType<$anypoint>>,
  P2 extends $.TypeSet<
    $.RangeType<$.getPrimitiveBaseType<P1["__element__"]["__element__"]>>
  >,
>(l: P1, r: P2): bounded_belowλFuncExpr<P1, P2>;
function bounded_below<
  P1 extends $.TypeSet<$.MultiRangeType<$anypoint>>,
  P2 extends $.TypeSet<
    $.MultiRangeType<$.getPrimitiveBaseType<P1["__element__"]["__element__"]>>
  >,
>(l: P1, r: P2): bounded_belowλFuncExpr2<P1, P2>;
function bounded_below(...args: any[]) {
  const {
    returnType,
    cardinality,
    args: positionalArgs,
    namedArgs,
  } = _.syntax.$resolveOverload("std::bounded_below", args, _.spec, [
    {
      args: [
        {
          typeId: "49748e47-8d91-5269-9a34-2e8ca194e0f2",
          optional: false,
          setoftype: false,
          variadic: false,
        },
        {
          typeId: "49748e47-8d91-5269-9a34-2e8ca194e0f2",
          optional: false,
          setoftype: false,
          variadic: false,
        },
      ],
      returnTypeId: "00000000-0000-0000-0000-000000000109",
    },
    {
      args: [
        {
          typeId: "c3231f27-c8a1-5a0c-9830-c71206020eac",
          optional: false,
          setoftype: false,
          variadic: false,
        },
        {
          typeId: "c3231f27-c8a1-5a0c-9830-c71206020eac",
          optional: false,
          setoftype: false,
          variadic: false,
        },
      ],
      returnTypeId: "00000000-0000-0000-0000-000000000109",
    },
  ]);
  return _.syntax.$expressionify({
    __kind__: $.ExpressionKind.Function,
    __element__: returnType,
    __cardinality__: cardinality,
    __name__: "std::bounded_below",
    __args__: positionalArgs,
    __namedargs__: namedArgs,
  }) as any;
}

type adjacentλFuncExpr<
  P1 extends $.TypeSet<$.RangeType<$anypoint>>,
  P2 extends $.TypeSet<
    $.RangeType<$.getPrimitiveBaseType<P1["__element__"]["__element__"]>>
  >,
> = $.$expr_Function<
  $bool,
  $.cardutil.multiplyCardinalities<
    $.cardutil.paramCardinality<P1>,
    $.cardutil.paramCardinality<P2>
  >
>;
type adjacentλFuncExpr2<
  P1 extends $.TypeSet<$.MultiRangeType<$anypoint>>,
  P2 extends $.TypeSet<
    $.MultiRangeType<$.getPrimitiveBaseType<P1["__element__"]["__element__"]>>
  >,
> = $.$expr_Function<
  $bool,
  $.cardutil.multiplyCardinalities<
    $.cardutil.paramCardinality<P1>,
    $.cardutil.paramCardinality<P2>
  >
>;
function adjacent<
  P1 extends $.TypeSet<$.RangeType<$anypoint>>,
  P2 extends $.TypeSet<
    $.RangeType<$.getPrimitiveBaseType<P1["__element__"]["__element__"]>>
  >,
>(l: P1, r: P2): adjacentλFuncExpr<P1, P2>;
function adjacent<
  P1 extends $.TypeSet<$.MultiRangeType<$anypoint>>,
  P2 extends $.TypeSet<
    $.MultiRangeType<$.getPrimitiveBaseType<P1["__element__"]["__element__"]>>
  >,
>(l: P1, r: P2): adjacentλFuncExpr2<P1, P2>;
function adjacent(...args: any[]) {
  const {
    returnType,
    cardinality,
    args: positionalArgs,
    namedArgs,
  } = _.syntax.$resolveOverload("std::adjacent", args, _.spec, [
    {
      args: [
        {
          typeId: "49748e47-8d91-5269-9a34-2e8ca194e0f2",
          optional: false,
          setoftype: false,
          variadic: false,
        },
        {
          typeId: "49748e47-8d91-5269-9a34-2e8ca194e0f2",
          optional: false,
          setoftype: false,
          variadic: false,
        },
      ],
      returnTypeId: "00000000-0000-0000-0000-000000000109",
    },
    {
      args: [
        {
          typeId: "c3231f27-c8a1-5a0c-9830-c71206020eac",
          optional: false,
          setoftype: false,
          variadic: false,
        },
        {
          typeId: "c3231f27-c8a1-5a0c-9830-c71206020eac",
          optional: false,
          setoftype: false,
          variadic: false,
        },
      ],
      returnTypeId: "00000000-0000-0000-0000-000000000109",
    },
  ]);
  return _.syntax.$expressionify({
    __kind__: $.ExpressionKind.Function,
    __element__: returnType,
    __cardinality__: cardinality,
    __name__: "std::adjacent",
    __args__: positionalArgs,
    __namedargs__: namedArgs,
  }) as any;
}

type _pg_generate_series_9045e2a9ba5f5d288595c71d08e0d9d7λFuncExpr<
  P1 extends _.castMaps.orScalarLiteral<$.TypeSet<$number>>,
  P2 extends _.castMaps.orScalarLiteral<$.TypeSet<$number>>,
> = $.$expr_Function<$number, $.Cardinality.Many>;
function _pg_generate_series_9045e2a9ba5f5d288595c71d08e0d9d7<
  P1 extends _.castMaps.orScalarLiteral<$.TypeSet<$number>>,
  P2 extends _.castMaps.orScalarLiteral<$.TypeSet<$number>>,
>(
  start: P1,
  stop: P2,
): _pg_generate_series_9045e2a9ba5f5d288595c71d08e0d9d7λFuncExpr<P1, P2>;
function _pg_generate_series_9045e2a9ba5f5d288595c71d08e0d9d7(...args: any[]) {
  const {
    returnType,
    cardinality,
    args: positionalArgs,
    namedArgs,
  } = _.syntax.$resolveOverload("std::__pg_generate_series", args, _.spec, [
    {
      args: [
        {
          typeId: "00000000-0000-0000-0000-0000000001ff",
          optional: false,
          setoftype: false,
          variadic: false,
        },
        {
          typeId: "00000000-0000-0000-0000-0000000001ff",
          optional: false,
          setoftype: false,
          variadic: false,
        },
      ],
      returnTypeId: "00000000-0000-0000-0000-0000000001ff",
      returnTypemod: "SetOfType",
    },
  ]);
  return _.syntax.$expressionify({
    __kind__: $.ExpressionKind.Function,
    __element__: returnType,
    __cardinality__: cardinality,
    __name__: "std::__pg_generate_series",
    __args__: positionalArgs,
    __namedargs__: namedArgs,
  }) as any;
}

type to_strλFuncExpr<P1 extends _.castMaps.orScalarLiteral<$.TypeSet<$bytes>>> =
  $.$expr_Function<$str, $.cardutil.paramCardinality<P1>>;
type to_strλFuncExpr2<
  P1 extends _.castMaps.orScalarLiteral<$.TypeSet<$datetime>>,
  P2 extends _.castMaps.orScalarLiteral<$.TypeSet<$str>> | undefined,
> = $.$expr_Function<
  $str,
  $.cardutil.multiplyCardinalities<
    $.cardutil.paramCardinality<P1>,
    $.cardutil.optionalParamCardinality<P2>
  >
>;
type to_strλFuncExpr3<
  P1 extends _.castMaps.orScalarLiteral<$.TypeSet<$duration>>,
  P2 extends _.castMaps.orScalarLiteral<$.TypeSet<$str>> | undefined,
> = $.$expr_Function<
  $str,
  $.cardutil.multiplyCardinalities<
    $.cardutil.paramCardinality<P1>,
    $.cardutil.optionalParamCardinality<P2>
  >
>;
type to_strλFuncExpr4<
  P1 extends _.castMaps.orScalarLiteral<$.TypeSet<$number>>,
  P2 extends _.castMaps.orScalarLiteral<$.TypeSet<$str>> | undefined,
> = $.$expr_Function<
  $str,
  $.cardutil.multiplyCardinalities<
    $.cardutil.paramCardinality<P1>,
    $.cardutil.optionalParamCardinality<P2>
  >
>;
type to_strλFuncExpr5<
  P1 extends _.castMaps.orScalarLiteral<$.TypeSet<$bigint>>,
  P2 extends _.castMaps.orScalarLiteral<$.TypeSet<$str>> | undefined,
> = $.$expr_Function<
  $str,
  $.cardutil.multiplyCardinalities<
    $.cardutil.paramCardinality<P1>,
    $.cardutil.optionalParamCardinality<P2>
  >
>;
type to_strλFuncExpr6<
  P1 extends $.TypeSet<$.ArrayType<$str>>,
  P2 extends _.castMaps.orScalarLiteral<$.TypeSet<$str>>,
> = $.$expr_Function<
  $str,
  $.cardutil.multiplyCardinalities<
    $.cardutil.paramCardinality<P1>,
    $.cardutil.paramCardinality<P2>
  >
>;
type to_strλFuncExpr7<
  P1 extends _.castMaps.orScalarLiteral<$.TypeSet<$json>>,
  P2 extends _.castMaps.orScalarLiteral<$.TypeSet<$str>> | undefined,
> = $.$expr_Function<
  $str,
  $.cardutil.multiplyCardinalities<
    $.cardutil.paramCardinality<P1>,
    $.cardutil.optionalParamCardinality<P2>
  >
>;
type to_strλFuncExpr8<
  P1 extends _.castMaps.orScalarLiteral<$.TypeSet<_stdcal.$local_date>>,
  P2 extends _.castMaps.orScalarLiteral<$.TypeSet<$str>> | undefined,
> = $.$expr_Function<
  $str,
  $.cardutil.multiplyCardinalities<
    $.cardutil.paramCardinality<P1>,
    $.cardutil.optionalParamCardinality<P2>
  >
>;
type to_strλFuncExpr9<
  P1 extends _.castMaps.orScalarLiteral<$.TypeSet<_stdcal.$local_time>>,
  P2 extends _.castMaps.orScalarLiteral<$.TypeSet<$str>> | undefined,
> = $.$expr_Function<
  $str,
  $.cardutil.multiplyCardinalities<
    $.cardutil.paramCardinality<P1>,
    $.cardutil.optionalParamCardinality<P2>
  >
>;
type to_strλFuncExpr10<
  P1 extends _.castMaps.orScalarLiteral<$.TypeSet<$decimalλICastableTo>>,
  P2 extends _.castMaps.orScalarLiteral<$.TypeSet<$str>> | undefined,
> = $.$expr_Function<
  $str,
  $.cardutil.multiplyCardinalities<
    $.cardutil.paramCardinality<P1>,
    $.cardutil.optionalParamCardinality<P2>
  >
>;
type to_strλFuncExpr11<
  P1 extends _.castMaps.orScalarLiteral<
    $.TypeSet<_stdcal.$local_datetimeλICastableTo>
  >,
  P2 extends _.castMaps.orScalarLiteral<$.TypeSet<$str>> | undefined,
> = $.$expr_Function<
  $str,
  $.cardutil.multiplyCardinalities<
    $.cardutil.paramCardinality<P1>,
    $.cardutil.optionalParamCardinality<P2>
  >
>;
type to_strλFuncExpr12<
  P1 extends _.castMaps.orScalarLiteral<
    $.TypeSet<_stdcal.$relative_durationλICastableTo>
  >,
  P2 extends _.castMaps.orScalarLiteral<$.TypeSet<$str>> | undefined,
> = $.$expr_Function<
  $str,
  $.cardutil.multiplyCardinalities<
    $.cardutil.paramCardinality<P1>,
    $.cardutil.optionalParamCardinality<P2>
  >
>;
/**
 * Convert a binary UTF-8 string to a text value.
 */
function to_str<P1 extends _.castMaps.orScalarLiteral<$.TypeSet<$bytes>>>(
  b: P1,
): to_strλFuncExpr<P1>;
/**
 * Return string representation of the input value.
 */
function to_str<
  P1 extends _.castMaps.orScalarLiteral<$.TypeSet<$datetime>>,
  P2 extends _.castMaps.orScalarLiteral<$.TypeSet<$str>> | undefined,
>(dt: P1, fmt?: P2): to_strλFuncExpr2<P1, P2>;
/**
 * Return string representation of the input value.
 */
function to_str<
  P1 extends _.castMaps.orScalarLiteral<$.TypeSet<$duration>>,
  P2 extends _.castMaps.orScalarLiteral<$.TypeSet<$str>> | undefined,
>(td: P1, fmt?: P2): to_strλFuncExpr3<P1, P2>;
/**
 * Return string representation of the input value.
 */
function to_str<
  P1 extends _.castMaps.orScalarLiteral<$.TypeSet<$number>>,
  P2 extends _.castMaps.orScalarLiteral<$.TypeSet<$str>> | undefined,
>(i: P1, fmt?: P2): to_strλFuncExpr4<P1, P2>;
/**
 * Return string representation of the input value.
 */
function to_str<
  P1 extends _.castMaps.orScalarLiteral<$.TypeSet<$bigint>>,
  P2 extends _.castMaps.orScalarLiteral<$.TypeSet<$str>> | undefined,
>(d: P1, fmt?: P2): to_strλFuncExpr5<P1, P2>;
/**
 * Return string representation of the input value.
 */
function to_str<
  P1 extends $.TypeSet<$.ArrayType<$str>>,
  P2 extends _.castMaps.orScalarLiteral<$.TypeSet<$str>>,
>(array: P1, delimiter: P2): to_strλFuncExpr6<P1, P2>;
/**
 * Return string representation of the input value.
 */
function to_str<
  P1 extends _.castMaps.orScalarLiteral<$.TypeSet<$json>>,
  P2 extends _.castMaps.orScalarLiteral<$.TypeSet<$str>> | undefined,
>(json: P1, fmt?: P2): to_strλFuncExpr7<P1, P2>;
/**
 * Return string representation of the input value.
 */
function to_str<
  P1 extends _.castMaps.orScalarLiteral<$.TypeSet<_stdcal.$local_date>>,
  P2 extends _.castMaps.orScalarLiteral<$.TypeSet<$str>> | undefined,
>(d: P1, fmt?: P2): to_strλFuncExpr8<P1, P2>;
/**
 * Return string representation of the input value.
 */
function to_str<
  P1 extends _.castMaps.orScalarLiteral<$.TypeSet<_stdcal.$local_time>>,
  P2 extends _.castMaps.orScalarLiteral<$.TypeSet<$str>> | undefined,
>(nt: P1, fmt?: P2): to_strλFuncExpr9<P1, P2>;
/**
 * Return string representation of the input value.
 */
function to_str<
  P1 extends _.castMaps.orScalarLiteral<$.TypeSet<$decimalλICastableTo>>,
  P2 extends _.castMaps.orScalarLiteral<$.TypeSet<$str>> | undefined,
>(d: P1, fmt?: P2): to_strλFuncExpr10<P1, P2>;
/**
 * Return string representation of the input value.
 */
function to_str<
  P1 extends _.castMaps.orScalarLiteral<
    $.TypeSet<_stdcal.$local_datetimeλICastableTo>
  >,
  P2 extends _.castMaps.orScalarLiteral<$.TypeSet<$str>> | undefined,
>(dt: P1, fmt?: P2): to_strλFuncExpr11<P1, P2>;
/**
 * Return string representation of the input value.
 */
function to_str<
  P1 extends _.castMaps.orScalarLiteral<
    $.TypeSet<_stdcal.$relative_durationλICastableTo>
  >,
  P2 extends _.castMaps.orScalarLiteral<$.TypeSet<$str>> | undefined,
>(rd: P1, fmt?: P2): to_strλFuncExpr12<P1, P2>;
function to_str(...args: any[]) {
  const {
    returnType,
    cardinality,
    args: positionalArgs,
    namedArgs,
  } = _.syntax.$resolveOverload("std::to_str", args, _.spec, [
    {
      args: [
        {
          typeId: "00000000-0000-0000-0000-000000000102",
          optional: false,
          setoftype: false,
          variadic: false,
        },
      ],
      returnTypeId: "00000000-0000-0000-0000-000000000101",
    },
    {
      args: [
        {
          typeId: "00000000-0000-0000-0000-00000000010a",
          optional: false,
          setoftype: false,
          variadic: false,
        },
        {
          typeId: "00000000-0000-0000-0000-000000000101",
          optional: true,
          setoftype: false,
          variadic: false,
        },
      ],
      returnTypeId: "00000000-0000-0000-0000-000000000101",
    },
    {
      args: [
        {
          typeId: "00000000-0000-0000-0000-00000000010e",
          optional: false,
          setoftype: false,
          variadic: false,
        },
        {
          typeId: "00000000-0000-0000-0000-000000000101",
          optional: true,
          setoftype: false,
          variadic: false,
        },
      ],
      returnTypeId: "00000000-0000-0000-0000-000000000101",
    },
    {
      args: [
        {
          typeId: "00000000-0000-0000-0000-0000000001ff",
          optional: false,
          setoftype: false,
          variadic: false,
        },
        {
          typeId: "00000000-0000-0000-0000-000000000101",
          optional: true,
          setoftype: false,
          variadic: false,
        },
      ],
      returnTypeId: "00000000-0000-0000-0000-000000000101",
    },
    {
      args: [
        {
          typeId: "00000000-0000-0000-0000-000000000110",
          optional: false,
          setoftype: false,
          variadic: false,
        },
        {
          typeId: "00000000-0000-0000-0000-000000000101",
          optional: true,
          setoftype: false,
          variadic: false,
        },
      ],
      returnTypeId: "00000000-0000-0000-0000-000000000101",
    },
    {
      args: [
        {
          typeId: "bb221d39-09f1-507e-8851-62075bb61823",
          optional: false,
          setoftype: false,
          variadic: false,
        },
        {
          typeId: "00000000-0000-0000-0000-000000000101",
          optional: false,
          setoftype: false,
          variadic: false,
        },
      ],
      returnTypeId: "00000000-0000-0000-0000-000000000101",
    },
    {
      args: [
        {
          typeId: "00000000-0000-0000-0000-00000000010f",
          optional: false,
          setoftype: false,
          variadic: false,
        },
        {
          typeId: "00000000-0000-0000-0000-000000000101",
          optional: true,
          setoftype: false,
          variadic: false,
        },
      ],
      returnTypeId: "00000000-0000-0000-0000-000000000101",
    },
    {
      args: [
        {
          typeId: "00000000-0000-0000-0000-00000000010c",
          optional: false,
          setoftype: false,
          variadic: false,
        },
        {
          typeId: "00000000-0000-0000-0000-000000000101",
          optional: true,
          setoftype: false,
          variadic: false,
        },
      ],
      returnTypeId: "00000000-0000-0000-0000-000000000101",
    },
    {
      args: [
        {
          typeId: "00000000-0000-0000-0000-00000000010d",
          optional: false,
          setoftype: false,
          variadic: false,
        },
        {
          typeId: "00000000-0000-0000-0000-000000000101",
          optional: true,
          setoftype: false,
          variadic: false,
        },
      ],
      returnTypeId: "00000000-0000-0000-0000-000000000101",
    },
    {
      args: [
        {
          typeId: "00000000-0000-0000-0000-000000000108",
          optional: false,
          setoftype: false,
          variadic: false,
        },
        {
          typeId: "00000000-0000-0000-0000-000000000101",
          optional: true,
          setoftype: false,
          variadic: false,
        },
      ],
      returnTypeId: "00000000-0000-0000-0000-000000000101",
    },
    {
      args: [
        {
          typeId: "00000000-0000-0000-0000-00000000010b",
          optional: false,
          setoftype: false,
          variadic: false,
        },
        {
          typeId: "00000000-0000-0000-0000-000000000101",
          optional: true,
          setoftype: false,
          variadic: false,
        },
      ],
      returnTypeId: "00000000-0000-0000-0000-000000000101",
    },
    {
      args: [
        {
          typeId: "00000000-0000-0000-0000-000000000111",
          optional: false,
          setoftype: false,
          variadic: false,
        },
        {
          typeId: "00000000-0000-0000-0000-000000000101",
          optional: true,
          setoftype: false,
          variadic: false,
        },
      ],
      returnTypeId: "00000000-0000-0000-0000-000000000101",
    },
  ]);
  return _.syntax.$expressionify({
    __kind__: $.ExpressionKind.Function,
    __element__: returnType,
    __cardinality__: cardinality,
    __name__: "std::to_str",
    __args__: positionalArgs,
    __namedargs__: namedArgs,
  }) as any;
}

type to_bytesλFuncExpr<P1 extends _.castMaps.orScalarLiteral<$.TypeSet<$str>>> =
  $.$expr_Function<$bytes, $.cardutil.paramCardinality<P1>>;
type to_bytesλFuncExpr2<
  P1 extends _.castMaps.orScalarLiteral<$.TypeSet<$json>>,
> = $.$expr_Function<$bytes, $.cardutil.paramCardinality<P1>>;
type to_bytesλFuncExpr3<
  P1 extends _.castMaps.orScalarLiteral<$.TypeSet<$uuid>>,
> = $.$expr_Function<$bytes, $.cardutil.paramCardinality<P1>>;
type to_bytesλFuncExpr4<
  P1 extends _.castMaps.orScalarLiteral<$.TypeSet<$number>>,
  P2 extends _.castMaps.orScalarLiteral<$.TypeSet<$Endian>>,
> = $.$expr_Function<
  $bytes,
  $.cardutil.multiplyCardinalities<
    $.cardutil.paramCardinality<P1>,
    $.cardutil.paramCardinality<P2>
  >
>;
/**
 * Convert a text string to a binary UTF-8 string.
 */
function to_bytes<P1 extends _.castMaps.orScalarLiteral<$.TypeSet<$str>>>(
  s: P1,
): to_bytesλFuncExpr<P1>;
/**
 * Convert a json value to a binary UTF-8 string.
 */
function to_bytes<P1 extends _.castMaps.orScalarLiteral<$.TypeSet<$json>>>(
  j: P1,
): to_bytesλFuncExpr2<P1>;
/**
 * Convert an UUID to binary format.
 */
function to_bytes<P1 extends _.castMaps.orScalarLiteral<$.TypeSet<$uuid>>>(
  val: P1,
): to_bytesλFuncExpr3<P1>;
/**
 * Convert an int16 using specified endian binary format.
 */
function to_bytes<
  P1 extends _.castMaps.orScalarLiteral<$.TypeSet<$number>>,
  P2 extends _.castMaps.orScalarLiteral<$.TypeSet<$Endian>>,
>(val: P1, endian: P2): to_bytesλFuncExpr4<P1, P2>;
function to_bytes(...args: any[]) {
  const {
    returnType,
    cardinality,
    args: positionalArgs,
    namedArgs,
  } = _.syntax.$resolveOverload("std::to_bytes", args, _.spec, [
    {
      args: [
        {
          typeId: "00000000-0000-0000-0000-000000000101",
          optional: false,
          setoftype: false,
          variadic: false,
        },
      ],
      returnTypeId: "00000000-0000-0000-0000-000000000102",
    },
    {
      args: [
        {
          typeId: "00000000-0000-0000-0000-00000000010f",
          optional: false,
          setoftype: false,
          variadic: false,
        },
      ],
      returnTypeId: "00000000-0000-0000-0000-000000000102",
    },
    {
      args: [
        {
          typeId: "00000000-0000-0000-0000-000000000100",
          optional: false,
          setoftype: false,
          variadic: false,
        },
      ],
      returnTypeId: "00000000-0000-0000-0000-000000000102",
    },
    {
      args: [
        {
          typeId: "00000000-0000-0000-0000-0000000001ff",
          optional: false,
          setoftype: false,
          variadic: false,
        },
        {
          typeId: "e4a1d11b-227e-5744-a0c9-31f9cd756e7b",
          optional: false,
          setoftype: false,
          variadic: false,
        },
      ],
      returnTypeId: "00000000-0000-0000-0000-000000000102",
    },
  ]);
  return _.syntax.$expressionify({
    __kind__: $.ExpressionKind.Function,
    __element__: returnType,
    __cardinality__: cardinality,
    __name__: "std::to_bytes",
    __args__: positionalArgs,
    __namedargs__: namedArgs,
  }) as any;
}

type to_jsonλFuncExpr<P1 extends _.castMaps.orScalarLiteral<$.TypeSet<$str>>> =
  $.$expr_Function<$json, $.cardutil.paramCardinality<P1>>;
/**
 * Return JSON value represented by the input *string*.
 */
function to_json<P1 extends _.castMaps.orScalarLiteral<$.TypeSet<$str>>>(
  str: P1,
): to_jsonλFuncExpr<P1>;
function to_json(...args: any[]) {
  const {
    returnType,
    cardinality,
    args: positionalArgs,
    namedArgs,
  } = _.syntax.$resolveOverload("std::to_json", args, _.spec, [
    {
      args: [
        {
          typeId: "00000000-0000-0000-0000-000000000101",
          optional: false,
          setoftype: false,
          variadic: false,
        },
      ],
      returnTypeId: "00000000-0000-0000-0000-00000000010f",
    },
  ]);
  return _.syntax.$expressionify({
    __kind__: $.ExpressionKind.Function,
    __element__: returnType,
    __cardinality__: cardinality,
    __name__: "std::to_json",
    __args__: positionalArgs,
    __namedargs__: namedArgs,
  }) as any;
}

type to_datetimeλFuncExpr<
  P1 extends _.castMaps.orScalarLiteral<$.TypeSet<$number>>,
> = $.$expr_Function<$datetime, $.cardutil.paramCardinality<P1>>;
type to_datetimeλFuncExpr2<
  P1 extends _.castMaps.orScalarLiteral<$.TypeSet<$str>>,
  P2 extends _.castMaps.orScalarLiteral<$.TypeSet<$str>> | undefined,
> = $.$expr_Function<
  $datetime,
  $.cardutil.multiplyCardinalities<
    $.cardutil.paramCardinality<P1>,
    $.cardutil.optionalParamCardinality<P2>
  >
>;
type to_datetimeλFuncExpr3<
  P1 extends _.castMaps.orScalarLiteral<$.TypeSet<$number>>,
  P2 extends _.castMaps.orScalarLiteral<$.TypeSet<$number>>,
  P3 extends _.castMaps.orScalarLiteral<$.TypeSet<$number>>,
  P4 extends _.castMaps.orScalarLiteral<$.TypeSet<$number>>,
  P5 extends _.castMaps.orScalarLiteral<$.TypeSet<$number>>,
  P6 extends _.castMaps.orScalarLiteral<$.TypeSet<$number>>,
  P7 extends _.castMaps.orScalarLiteral<$.TypeSet<$str>>,
> = $.$expr_Function<
  $datetime,
  $.cardutil.multiplyCardinalities<
    $.cardutil.multiplyCardinalities<
      $.cardutil.multiplyCardinalities<
        $.cardutil.multiplyCardinalities<
          $.cardutil.multiplyCardinalities<
            $.cardutil.multiplyCardinalities<
              $.cardutil.paramCardinality<P1>,
              $.cardutil.paramCardinality<P2>
            >,
            $.cardutil.paramCardinality<P3>
          >,
          $.cardutil.paramCardinality<P4>
        >,
        $.cardutil.paramCardinality<P5>
      >,
      $.cardutil.paramCardinality<P6>
    >,
    $.cardutil.paramCardinality<P7>
  >
>;
type to_datetimeλFuncExpr4<
  P1 extends _.castMaps.orScalarLiteral<$.TypeSet<$decimalλICastableTo>>,
> = $.$expr_Function<$datetime, $.cardutil.paramCardinality<P1>>;
type to_datetimeλFuncExpr5<
  P1 extends _.castMaps.orScalarLiteral<
    $.TypeSet<_stdcal.$local_datetimeλICastableTo>
  >,
  P2 extends _.castMaps.orScalarLiteral<$.TypeSet<$str>>,
> = $.$expr_Function<
  $datetime,
  $.cardutil.multiplyCardinalities<
    $.cardutil.paramCardinality<P1>,
    $.cardutil.paramCardinality<P2>
  >
>;
/**
 * Create a `datetime` value.
 */
function to_datetime<P1 extends _.castMaps.orScalarLiteral<$.TypeSet<$number>>>(
  epochseconds: P1,
): to_datetimeλFuncExpr<P1>;
/**
 * Create a `datetime` value.
 */
function to_datetime<
  P1 extends _.castMaps.orScalarLiteral<$.TypeSet<$str>>,
  P2 extends _.castMaps.orScalarLiteral<$.TypeSet<$str>> | undefined,
>(s: P1, fmt?: P2): to_datetimeλFuncExpr2<P1, P2>;
/**
 * Create a `datetime` value.
 */
function to_datetime<
  P1 extends _.castMaps.orScalarLiteral<$.TypeSet<$number>>,
  P2 extends _.castMaps.orScalarLiteral<$.TypeSet<$number>>,
  P3 extends _.castMaps.orScalarLiteral<$.TypeSet<$number>>,
  P4 extends _.castMaps.orScalarLiteral<$.TypeSet<$number>>,
  P5 extends _.castMaps.orScalarLiteral<$.TypeSet<$number>>,
  P6 extends _.castMaps.orScalarLiteral<$.TypeSet<$number>>,
  P7 extends _.castMaps.orScalarLiteral<$.TypeSet<$str>>,
>(
  year: P1,
  month: P2,
  day: P3,
  hour: P4,
  min: P5,
  sec: P6,
  timezone: P7,
): to_datetimeλFuncExpr3<P1, P2, P3, P4, P5, P6, P7>;
/**
 * Create a `datetime` value.
 */
function to_datetime<
  P1 extends _.castMaps.orScalarLiteral<$.TypeSet<$decimalλICastableTo>>,
>(epochseconds: P1): to_datetimeλFuncExpr4<P1>;
/**
 * Create a `datetime` value.
 */
function to_datetime<
  P1 extends _.castMaps.orScalarLiteral<
    $.TypeSet<_stdcal.$local_datetimeλICastableTo>
  >,
  P2 extends _.castMaps.orScalarLiteral<$.TypeSet<$str>>,
>(local: P1, zone: P2): to_datetimeλFuncExpr5<P1, P2>;
function to_datetime(...args: any[]) {
  const {
    returnType,
    cardinality,
    args: positionalArgs,
    namedArgs,
  } = _.syntax.$resolveOverload("std::to_datetime", args, _.spec, [
    {
      args: [
        {
          typeId: "00000000-0000-0000-0000-0000000001ff",
          optional: false,
          setoftype: false,
          variadic: false,
        },
      ],
      returnTypeId: "00000000-0000-0000-0000-00000000010a",
    },
    {
      args: [
        {
          typeId: "00000000-0000-0000-0000-000000000101",
          optional: false,
          setoftype: false,
          variadic: false,
        },
        {
          typeId: "00000000-0000-0000-0000-000000000101",
          optional: true,
          setoftype: false,
          variadic: false,
        },
      ],
      returnTypeId: "00000000-0000-0000-0000-00000000010a",
    },
    {
      args: [
        {
          typeId: "00000000-0000-0000-0000-0000000001ff",
          optional: false,
          setoftype: false,
          variadic: false,
        },
        {
          typeId: "00000000-0000-0000-0000-0000000001ff",
          optional: false,
          setoftype: false,
          variadic: false,
        },
        {
          typeId: "00000000-0000-0000-0000-0000000001ff",
          optional: false,
          setoftype: false,
          variadic: false,
        },
        {
          typeId: "00000000-0000-0000-0000-0000000001ff",
          optional: false,
          setoftype: false,
          variadic: false,
        },
        {
          typeId: "00000000-0000-0000-0000-0000000001ff",
          optional: false,
          setoftype: false,
          variadic: false,
        },
        {
          typeId: "00000000-0000-0000-0000-0000000001ff",
          optional: false,
          setoftype: false,
          variadic: false,
        },
        {
          typeId: "00000000-0000-0000-0000-000000000101",
          optional: false,
          setoftype: false,
          variadic: false,
        },
      ],
      returnTypeId: "00000000-0000-0000-0000-00000000010a",
    },
    {
      args: [
        {
          typeId: "00000000-0000-0000-0000-000000000108",
          optional: false,
          setoftype: false,
          variadic: false,
        },
      ],
      returnTypeId: "00000000-0000-0000-0000-00000000010a",
    },
    {
      args: [
        {
          typeId: "00000000-0000-0000-0000-00000000010b",
          optional: false,
          setoftype: false,
          variadic: false,
        },
        {
          typeId: "00000000-0000-0000-0000-000000000101",
          optional: false,
          setoftype: false,
          variadic: false,
        },
      ],
      returnTypeId: "00000000-0000-0000-0000-00000000010a",
    },
  ]);
  return _.syntax.$expressionify({
    __kind__: $.ExpressionKind.Function,
    __element__: returnType,
    __cardinality__: cardinality,
    __name__: "std::to_datetime",
    __args__: positionalArgs,
    __namedargs__: namedArgs,
  }) as any;
}

type to_durationλFuncExpr<
  NamedArgs extends {
    hours?: _.castMaps.orScalarLiteral<$.TypeSet<$number>>;
    minutes?: _.castMaps.orScalarLiteral<$.TypeSet<$number>>;
    seconds?: _.castMaps.orScalarLiteral<$.TypeSet<$number>>;
    microseconds?: _.castMaps.orScalarLiteral<$.TypeSet<$number>>;
  },
> = $.$expr_Function<
  $duration,
  $.cardutil.multiplyCardinalities<
    $.cardutil.multiplyCardinalities<
      $.cardutil.multiplyCardinalities<
        $.cardutil.optionalParamCardinality<NamedArgs["hours"]>,
        $.cardutil.optionalParamCardinality<NamedArgs["minutes"]>
      >,
      $.cardutil.optionalParamCardinality<NamedArgs["seconds"]>
    >,
    $.cardutil.optionalParamCardinality<NamedArgs["microseconds"]>
  >
>;
/**
 * Create a `duration` value.
 */
function to_duration<
  NamedArgs extends {
    hours?: _.castMaps.orScalarLiteral<$.TypeSet<$number>>;
    minutes?: _.castMaps.orScalarLiteral<$.TypeSet<$number>>;
    seconds?: _.castMaps.orScalarLiteral<$.TypeSet<$number>>;
    microseconds?: _.castMaps.orScalarLiteral<$.TypeSet<$number>>;
  },
>(namedArgs: NamedArgs): to_durationλFuncExpr<NamedArgs>;
function to_duration(...args: any[]) {
  const {
    returnType,
    cardinality,
    args: positionalArgs,
    namedArgs,
  } = _.syntax.$resolveOverload("std::to_duration", args, _.spec, [
    {
      args: [],
      namedArgs: {
        hours: {
          typeId: "00000000-0000-0000-0000-0000000001ff",
          optional: true,
          setoftype: false,
          variadic: false,
        },
        minutes: {
          typeId: "00000000-0000-0000-0000-0000000001ff",
          optional: true,
          setoftype: false,
          variadic: false,
        },
        seconds: {
          typeId: "00000000-0000-0000-0000-0000000001ff",
          optional: true,
          setoftype: false,
          variadic: false,
        },
        microseconds: {
          typeId: "00000000-0000-0000-0000-0000000001ff",
          optional: true,
          setoftype: false,
          variadic: false,
        },
      },
      returnTypeId: "00000000-0000-0000-0000-00000000010e",
    },
  ]);
  return _.syntax.$expressionify({
    __kind__: $.ExpressionKind.Function,
    __element__: returnType,
    __cardinality__: cardinality,
    __name__: "std::to_duration",
    __args__: positionalArgs,
    __namedargs__: namedArgs,
  }) as any;
}

type to_bigintλFuncExpr<
  P1 extends _.castMaps.orScalarLiteral<$.TypeSet<$str>>,
  P2 extends _.castMaps.orScalarLiteral<$.TypeSet<$str>> | undefined,
> = $.$expr_Function<
  $bigint,
  $.cardutil.multiplyCardinalities<
    $.cardutil.paramCardinality<P1>,
    $.cardutil.optionalParamCardinality<P2>
  >
>;
/**
 * Create a `bigint` value.
 */
function to_bigint<
  P1 extends _.castMaps.orScalarLiteral<$.TypeSet<$str>>,
  P2 extends _.castMaps.orScalarLiteral<$.TypeSet<$str>> | undefined,
>(s: P1, fmt?: P2): to_bigintλFuncExpr<P1, P2>;
function to_bigint(...args: any[]) {
  const {
    returnType,
    cardinality,
    args: positionalArgs,
    namedArgs,
  } = _.syntax.$resolveOverload("std::to_bigint", args, _.spec, [
    {
      args: [
        {
          typeId: "00000000-0000-0000-0000-000000000101",
          optional: false,
          setoftype: false,
          variadic: false,
        },
        {
          typeId: "00000000-0000-0000-0000-000000000101",
          optional: true,
          setoftype: false,
          variadic: false,
        },
      ],
      returnTypeId: "00000000-0000-0000-0000-000000000110",
    },
  ]);
  return _.syntax.$expressionify({
    __kind__: $.ExpressionKind.Function,
    __element__: returnType,
    __cardinality__: cardinality,
    __name__: "std::to_bigint",
    __args__: positionalArgs,
    __namedargs__: namedArgs,
  }) as any;
}

type to_decimalλFuncExpr<
  P1 extends _.castMaps.orScalarLiteral<$.TypeSet<$str>>,
  P2 extends _.castMaps.orScalarLiteral<$.TypeSet<$str>> | undefined,
> = $.$expr_Function<
  $decimal,
  $.cardutil.multiplyCardinalities<
    $.cardutil.paramCardinality<P1>,
    $.cardutil.optionalParamCardinality<P2>
  >
>;
/**
 * Create a `decimal` value.
 */
function to_decimal<
  P1 extends _.castMaps.orScalarLiteral<$.TypeSet<$str>>,
  P2 extends _.castMaps.orScalarLiteral<$.TypeSet<$str>> | undefined,
>(s: P1, fmt?: P2): to_decimalλFuncExpr<P1, P2>;
function to_decimal(...args: any[]) {
  const {
    returnType,
    cardinality,
    args: positionalArgs,
    namedArgs,
  } = _.syntax.$resolveOverload("std::to_decimal", args, _.spec, [
    {
      args: [
        {
          typeId: "00000000-0000-0000-0000-000000000101",
          optional: false,
          setoftype: false,
          variadic: false,
        },
        {
          typeId: "00000000-0000-0000-0000-000000000101",
          optional: true,
          setoftype: false,
          variadic: false,
        },
      ],
      returnTypeId: "00000000-0000-0000-0000-000000000108",
    },
  ]);
  return _.syntax.$expressionify({
    __kind__: $.ExpressionKind.Function,
    __element__: returnType,
    __cardinality__: cardinality,
    __name__: "std::to_decimal",
    __args__: positionalArgs,
    __namedargs__: namedArgs,
  }) as any;
}

type to_int64λFuncExpr<
  P1 extends _.castMaps.orScalarLiteral<$.TypeSet<$str>>,
  P2 extends _.castMaps.orScalarLiteral<$.TypeSet<$str>> | undefined,
> = $.$expr_Function<
  $number,
  $.cardutil.multiplyCardinalities<
    $.cardutil.paramCardinality<P1>,
    $.cardutil.optionalParamCardinality<P2>
  >
>;
type to_int64λFuncExpr2<
  P1 extends _.castMaps.orScalarLiteral<$.TypeSet<$bytes>>,
  P2 extends _.castMaps.orScalarLiteral<$.TypeSet<$Endian>>,
> = $.$expr_Function<
  $number,
  $.cardutil.multiplyCardinalities<
    $.cardutil.paramCardinality<P1>,
    $.cardutil.paramCardinality<P2>
  >
>;
/**
 * Create a `int64` value.
 */
function to_int64<
  P1 extends _.castMaps.orScalarLiteral<$.TypeSet<$str>>,
  P2 extends _.castMaps.orScalarLiteral<$.TypeSet<$str>> | undefined,
>(s: P1, fmt?: P2): to_int64λFuncExpr<P1, P2>;
/**
 * Convert bytes into `int64` value.
 */
function to_int64<
  P1 extends _.castMaps.orScalarLiteral<$.TypeSet<$bytes>>,
  P2 extends _.castMaps.orScalarLiteral<$.TypeSet<$Endian>>,
>(val: P1, endian: P2): to_int64λFuncExpr2<P1, P2>;
function to_int64(...args: any[]) {
  const {
    returnType,
    cardinality,
    args: positionalArgs,
    namedArgs,
  } = _.syntax.$resolveOverload("std::to_int64", args, _.spec, [
    {
      args: [
        {
          typeId: "00000000-0000-0000-0000-000000000101",
          optional: false,
          setoftype: false,
          variadic: false,
        },
        {
          typeId: "00000000-0000-0000-0000-000000000101",
          optional: true,
          setoftype: false,
          variadic: false,
        },
      ],
      returnTypeId: "00000000-0000-0000-0000-0000000001ff",
    },
    {
      args: [
        {
          typeId: "00000000-0000-0000-0000-000000000102",
          optional: false,
          setoftype: false,
          variadic: false,
        },
        {
          typeId: "e4a1d11b-227e-5744-a0c9-31f9cd756e7b",
          optional: false,
          setoftype: false,
          variadic: false,
        },
      ],
      returnTypeId: "00000000-0000-0000-0000-0000000001ff",
    },
  ]);
  return _.syntax.$expressionify({
    __kind__: $.ExpressionKind.Function,
    __element__: returnType,
    __cardinality__: cardinality,
    __name__: "std::to_int64",
    __args__: positionalArgs,
    __namedargs__: namedArgs,
  }) as any;
}

type to_int32λFuncExpr<
  P1 extends _.castMaps.orScalarLiteral<$.TypeSet<$str>>,
  P2 extends _.castMaps.orScalarLiteral<$.TypeSet<$str>> | undefined,
> = $.$expr_Function<
  $number,
  $.cardutil.multiplyCardinalities<
    $.cardutil.paramCardinality<P1>,
    $.cardutil.optionalParamCardinality<P2>
  >
>;
type to_int32λFuncExpr2<
  P1 extends _.castMaps.orScalarLiteral<$.TypeSet<$bytes>>,
  P2 extends _.castMaps.orScalarLiteral<$.TypeSet<$Endian>>,
> = $.$expr_Function<
  $number,
  $.cardutil.multiplyCardinalities<
    $.cardutil.paramCardinality<P1>,
    $.cardutil.paramCardinality<P2>
  >
>;
/**
 * Create a `int32` value.
 */
function to_int32<
  P1 extends _.castMaps.orScalarLiteral<$.TypeSet<$str>>,
  P2 extends _.castMaps.orScalarLiteral<$.TypeSet<$str>> | undefined,
>(s: P1, fmt?: P2): to_int32λFuncExpr<P1, P2>;
/**
 * Convert bytes into `int32` value.
 */
function to_int32<
  P1 extends _.castMaps.orScalarLiteral<$.TypeSet<$bytes>>,
  P2 extends _.castMaps.orScalarLiteral<$.TypeSet<$Endian>>,
>(val: P1, endian: P2): to_int32λFuncExpr2<P1, P2>;
function to_int32(...args: any[]) {
  const {
    returnType,
    cardinality,
    args: positionalArgs,
    namedArgs,
  } = _.syntax.$resolveOverload("std::to_int32", args, _.spec, [
    {
      args: [
        {
          typeId: "00000000-0000-0000-0000-000000000101",
          optional: false,
          setoftype: false,
          variadic: false,
        },
        {
          typeId: "00000000-0000-0000-0000-000000000101",
          optional: true,
          setoftype: false,
          variadic: false,
        },
      ],
      returnTypeId: "00000000-0000-0000-0000-0000000001ff",
    },
    {
      args: [
        {
          typeId: "00000000-0000-0000-0000-000000000102",
          optional: false,
          setoftype: false,
          variadic: false,
        },
        {
          typeId: "e4a1d11b-227e-5744-a0c9-31f9cd756e7b",
          optional: false,
          setoftype: false,
          variadic: false,
        },
      ],
      returnTypeId: "00000000-0000-0000-0000-0000000001ff",
    },
  ]);
  return _.syntax.$expressionify({
    __kind__: $.ExpressionKind.Function,
    __element__: returnType,
    __cardinality__: cardinality,
    __name__: "std::to_int32",
    __args__: positionalArgs,
    __namedargs__: namedArgs,
  }) as any;
}

type to_int16λFuncExpr<
  P1 extends _.castMaps.orScalarLiteral<$.TypeSet<$str>>,
  P2 extends _.castMaps.orScalarLiteral<$.TypeSet<$str>> | undefined,
> = $.$expr_Function<
  $number,
  $.cardutil.multiplyCardinalities<
    $.cardutil.paramCardinality<P1>,
    $.cardutil.optionalParamCardinality<P2>
  >
>;
type to_int16λFuncExpr2<
  P1 extends _.castMaps.orScalarLiteral<$.TypeSet<$bytes>>,
  P2 extends _.castMaps.orScalarLiteral<$.TypeSet<$Endian>>,
> = $.$expr_Function<
  $number,
  $.cardutil.multiplyCardinalities<
    $.cardutil.paramCardinality<P1>,
    $.cardutil.paramCardinality<P2>
  >
>;
/**
 * Create a `int16` value.
 */
function to_int16<
  P1 extends _.castMaps.orScalarLiteral<$.TypeSet<$str>>,
  P2 extends _.castMaps.orScalarLiteral<$.TypeSet<$str>> | undefined,
>(s: P1, fmt?: P2): to_int16λFuncExpr<P1, P2>;
/**
 * Convert bytes into `int16` value.
 */
function to_int16<
  P1 extends _.castMaps.orScalarLiteral<$.TypeSet<$bytes>>,
  P2 extends _.castMaps.orScalarLiteral<$.TypeSet<$Endian>>,
>(val: P1, endian: P2): to_int16λFuncExpr2<P1, P2>;
function to_int16(...args: any[]) {
  const {
    returnType,
    cardinality,
    args: positionalArgs,
    namedArgs,
  } = _.syntax.$resolveOverload("std::to_int16", args, _.spec, [
    {
      args: [
        {
          typeId: "00000000-0000-0000-0000-000000000101",
          optional: false,
          setoftype: false,
          variadic: false,
        },
        {
          typeId: "00000000-0000-0000-0000-000000000101",
          optional: true,
          setoftype: false,
          variadic: false,
        },
      ],
      returnTypeId: "00000000-0000-0000-0000-0000000001ff",
    },
    {
      args: [
        {
          typeId: "00000000-0000-0000-0000-000000000102",
          optional: false,
          setoftype: false,
          variadic: false,
        },
        {
          typeId: "e4a1d11b-227e-5744-a0c9-31f9cd756e7b",
          optional: false,
          setoftype: false,
          variadic: false,
        },
      ],
      returnTypeId: "00000000-0000-0000-0000-0000000001ff",
    },
  ]);
  return _.syntax.$expressionify({
    __kind__: $.ExpressionKind.Function,
    __element__: returnType,
    __cardinality__: cardinality,
    __name__: "std::to_int16",
    __args__: positionalArgs,
    __namedargs__: namedArgs,
  }) as any;
}

type to_float64λFuncExpr<
  P1 extends _.castMaps.orScalarLiteral<$.TypeSet<$str>>,
  P2 extends _.castMaps.orScalarLiteral<$.TypeSet<$str>> | undefined,
> = $.$expr_Function<
  $number,
  $.cardutil.multiplyCardinalities<
    $.cardutil.paramCardinality<P1>,
    $.cardutil.optionalParamCardinality<P2>
  >
>;
/**
 * Create a `float64` value.
 */
function to_float64<
  P1 extends _.castMaps.orScalarLiteral<$.TypeSet<$str>>,
  P2 extends _.castMaps.orScalarLiteral<$.TypeSet<$str>> | undefined,
>(s: P1, fmt?: P2): to_float64λFuncExpr<P1, P2>;
function to_float64(...args: any[]) {
  const {
    returnType,
    cardinality,
    args: positionalArgs,
    namedArgs,
  } = _.syntax.$resolveOverload("std::to_float64", args, _.spec, [
    {
      args: [
        {
          typeId: "00000000-0000-0000-0000-000000000101",
          optional: false,
          setoftype: false,
          variadic: false,
        },
        {
          typeId: "00000000-0000-0000-0000-000000000101",
          optional: true,
          setoftype: false,
          variadic: false,
        },
      ],
      returnTypeId: "00000000-0000-0000-0000-0000000001ff",
    },
  ]);
  return _.syntax.$expressionify({
    __kind__: $.ExpressionKind.Function,
    __element__: returnType,
    __cardinality__: cardinality,
    __name__: "std::to_float64",
    __args__: positionalArgs,
    __namedargs__: namedArgs,
  }) as any;
}

type to_float32λFuncExpr<
  P1 extends _.castMaps.orScalarLiteral<$.TypeSet<$str>>,
  P2 extends _.castMaps.orScalarLiteral<$.TypeSet<$str>> | undefined,
> = $.$expr_Function<
  $number,
  $.cardutil.multiplyCardinalities<
    $.cardutil.paramCardinality<P1>,
    $.cardutil.optionalParamCardinality<P2>
  >
>;
/**
 * Create a `float32` value.
 */
function to_float32<
  P1 extends _.castMaps.orScalarLiteral<$.TypeSet<$str>>,
  P2 extends _.castMaps.orScalarLiteral<$.TypeSet<$str>> | undefined,
>(s: P1, fmt?: P2): to_float32λFuncExpr<P1, P2>;
function to_float32(...args: any[]) {
  const {
    returnType,
    cardinality,
    args: positionalArgs,
    namedArgs,
  } = _.syntax.$resolveOverload("std::to_float32", args, _.spec, [
    {
      args: [
        {
          typeId: "00000000-0000-0000-0000-000000000101",
          optional: false,
          setoftype: false,
          variadic: false,
        },
        {
          typeId: "00000000-0000-0000-0000-000000000101",
          optional: true,
          setoftype: false,
          variadic: false,
        },
      ],
      returnTypeId: "00000000-0000-0000-0000-0000000001ff",
    },
  ]);
  return _.syntax.$expressionify({
    __kind__: $.ExpressionKind.Function,
    __element__: returnType,
    __cardinality__: cardinality,
    __name__: "std::to_float32",
    __args__: positionalArgs,
    __namedargs__: namedArgs,
  }) as any;
}

type to_uuidλFuncExpr<
  P1 extends _.castMaps.orScalarLiteral<$.TypeSet<$bytes>>,
> = $.$expr_Function<$uuid, $.cardutil.paramCardinality<P1>>;
/**
 * Convert binary representation into UUID value.
 */
function to_uuid<P1 extends _.castMaps.orScalarLiteral<$.TypeSet<$bytes>>>(
  val: P1,
): to_uuidλFuncExpr<P1>;
function to_uuid(...args: any[]) {
  const {
    returnType,
    cardinality,
    args: positionalArgs,
    namedArgs,
  } = _.syntax.$resolveOverload("std::to_uuid", args, _.spec, [
    {
      args: [
        {
          typeId: "00000000-0000-0000-0000-000000000102",
          optional: false,
          setoftype: false,
          variadic: false,
        },
      ],
      returnTypeId: "00000000-0000-0000-0000-000000000100",
    },
  ]);
  return _.syntax.$expressionify({
    __kind__: $.ExpressionKind.Function,
    __element__: returnType,
    __cardinality__: cardinality,
    __name__: "std::to_uuid",
    __args__: positionalArgs,
    __namedargs__: namedArgs,
  }) as any;
}

type sequence_resetλFuncExpr<P1 extends $.TypeSet<_schema.$ScalarType>> =
  $.$expr_Function<$number, $.cardutil.paramCardinality<P1>>;
type sequence_resetλFuncExpr2<
  P1 extends $.TypeSet<_schema.$ScalarType>,
  P2 extends _.castMaps.orScalarLiteral<$.TypeSet<$number>>,
> = $.$expr_Function<
  $number,
  $.cardutil.multiplyCardinalities<
    $.cardutil.paramCardinality<P1>,
    $.cardutil.paramCardinality<P2>
  >
>;
function sequence_reset<P1 extends $.TypeSet<_schema.$ScalarType>>(
  seq: P1,
): sequence_resetλFuncExpr<P1>;
function sequence_reset<
  P1 extends $.TypeSet<_schema.$ScalarType>,
  P2 extends _.castMaps.orScalarLiteral<$.TypeSet<$number>>,
>(seq: P1, value: P2): sequence_resetλFuncExpr2<P1, P2>;
function sequence_reset(...args: any[]) {
  const {
    returnType,
    cardinality,
    args: positionalArgs,
    namedArgs,
  } = _.syntax.$resolveOverload("std::sequence_reset", args, _.spec, [
    {
      args: [
        {
          typeId: "d055dd47-3eb9-5a31-9d8f-5e7053bbe11e",
          optional: false,
          setoftype: false,
          variadic: false,
        },
      ],
      returnTypeId: "00000000-0000-0000-0000-0000000001ff",
    },
    {
      args: [
        {
          typeId: "d055dd47-3eb9-5a31-9d8f-5e7053bbe11e",
          optional: false,
          setoftype: false,
          variadic: false,
        },
        {
          typeId: "00000000-0000-0000-0000-0000000001ff",
          optional: false,
          setoftype: false,
          variadic: false,
        },
      ],
      returnTypeId: "00000000-0000-0000-0000-0000000001ff",
    },
  ]);
  return _.syntax.$expressionify({
    __kind__: $.ExpressionKind.Function,
    __element__: returnType,
    __cardinality__: cardinality,
    __name__: "std::sequence_reset",
    __args__: positionalArgs,
    __namedargs__: namedArgs,
  }) as any;
}

type sequence_nextλFuncExpr<P1 extends $.TypeSet<_schema.$ScalarType>> =
  $.$expr_Function<$number, $.cardutil.paramCardinality<P1>>;
function sequence_next<P1 extends $.TypeSet<_schema.$ScalarType>>(
  seq: P1,
): sequence_nextλFuncExpr<P1>;
function sequence_next(...args: any[]) {
  const {
    returnType,
    cardinality,
    args: positionalArgs,
    namedArgs,
  } = _.syntax.$resolveOverload("std::sequence_next", args, _.spec, [
    {
      args: [
        {
          typeId: "d055dd47-3eb9-5a31-9d8f-5e7053bbe11e",
          optional: false,
          setoftype: false,
          variadic: false,
        },
      ],
      returnTypeId: "00000000-0000-0000-0000-0000000001ff",
    },
  ]);
  return _.syntax.$expressionify({
    __kind__: $.ExpressionKind.Function,
    __element__: returnType,
    __cardinality__: cardinality,
    __name__: "std::sequence_next",
    __args__: positionalArgs,
    __namedargs__: namedArgs,
  }) as any;
}

export {
  Endian,
  JsonEmpty,
  bigint,
  bool,
  bytes,
  datetime,
  decimal,
  duration,
  float32,
  float64,
  int16,
  int32,
  int64,
  json,
  $sequence,
  str,
  uuid,
  number,
  $BaseObject,
  BaseObject,
  $FreeObject,
  FreeObject,
  $Object_8ce8c71ee4fa5f73840c22d7eaa58588,
  Object_8ce8c71ee4fa5f73840c22d7eaa58588,
};

export type {
  $anyscalar,
  $anypoint,
  $anycontiguous,
  $anydiscrete,
  $anyreal,
  $anyfloat,
  $anyint,
  $anynumeric,
};

type __defaultExports = {
  Endian: typeof Endian;
  JsonEmpty: typeof JsonEmpty;
  bigint: typeof bigint;
  bool: typeof bool;
  bytes: typeof bytes;
  datetime: typeof datetime;
  decimal: typeof decimal;
  duration: typeof duration;
  float32: typeof float32;
  float64: typeof float64;
  int16: typeof int16;
  int32: typeof int32;
  int64: typeof int64;
  json: typeof json;
  str: typeof str;
  uuid: typeof uuid;
  BaseObject: typeof BaseObject;
  FreeObject: typeof FreeObject;
  Object: typeof Object_8ce8c71ee4fa5f73840c22d7eaa58588;
  assert_single: typeof assert_single;
  assert_exists: typeof assert_exists;
  assert_distinct: typeof assert_distinct;
  assert: typeof assert;
  materialized: typeof materialized;
  len: typeof len;
  sum: typeof sum;
  count: typeof count;
  random: typeof random;
  min: typeof min;
  max: typeof max;
  all: typeof all;
  any: typeof any;
  enumerate: typeof enumerate;
  round: typeof round;
  contains: typeof contains;
  array_fill: typeof array_fill;
  find: typeof find;
  bit_and: typeof bit_and;
  bit_or: typeof bit_or;
  bit_xor: typeof bit_xor;
  bit_not: typeof bit_not;
  bit_rshift: typeof bit_rshift;
  bit_lshift: typeof bit_lshift;
  bit_count: typeof bit_count;
  array_agg: typeof array_agg;
  array_unpack: typeof array_unpack;
  array_replace: typeof array_replace;
  array_get: typeof array_get;
  array_set: typeof array_set;
  array_insert: typeof array_insert;
  array_join: typeof array_join;
  bytes_get_bit: typeof bytes_get_bit;
  datetime_current: typeof datetime_current;
  datetime_of_transaction: typeof datetime_of_transaction;
  datetime_of_statement: typeof datetime_of_statement;
  datetime_get: typeof datetime_get;
  datetime_truncate: typeof datetime_truncate;
  str_pad_start: typeof str_pad_start;
  str_lpad: typeof str_lpad;
  duration_get: typeof duration_get;
  duration_truncate: typeof duration_truncate;
  duration_to_seconds: typeof duration_to_seconds;
  json_typeof: typeof json_typeof;
  json_array_unpack: typeof json_array_unpack;
  json_object_unpack: typeof json_object_unpack;
  json_object_pack: typeof json_object_pack;
  json_get: typeof json_get;
  json_set: typeof json_set;
  re_match: typeof re_match;
  re_match_all: typeof re_match_all;
  re_test: typeof re_test;
  re_replace: typeof re_replace;
  str_repeat: typeof str_repeat;
  str_lower: typeof str_lower;
  str_upper: typeof str_upper;
  str_title: typeof str_title;
  str_pad_end: typeof str_pad_end;
  str_rpad: typeof str_rpad;
  str_trim_start: typeof str_trim_start;
  str_ltrim: typeof str_ltrim;
  str_trim_end: typeof str_trim_end;
  str_rtrim: typeof str_rtrim;
  str_trim: typeof str_trim;
  str_split: typeof str_split;
  str_replace: typeof str_replace;
  str_reverse: typeof str_reverse;
  uuid_generate_v1mc: typeof uuid_generate_v1mc;
  uuid_generate_v4: typeof uuid_generate_v4;
  range: typeof range;
  multirange: typeof multirange;
  range_is_empty: typeof range_is_empty;
  range_unpack: typeof range_unpack;
  range_get_upper: typeof range_get_upper;
  range_get_lower: typeof range_get_lower;
  range_is_inclusive_upper: typeof range_is_inclusive_upper;
  range_is_inclusive_lower: typeof range_is_inclusive_lower;
  overlaps: typeof overlaps;
  multirange_unpack: typeof multirange_unpack;
  strictly_below: typeof strictly_below;
  strictly_above: typeof strictly_above;
  bounded_above: typeof bounded_above;
  bounded_below: typeof bounded_below;
  adjacent: typeof adjacent;
  __pg_generate_series: typeof _pg_generate_series_9045e2a9ba5f5d288595c71d08e0d9d7;
  to_str: typeof to_str;
  to_bytes: typeof to_bytes;
  to_json: typeof to_json;
  to_datetime: typeof to_datetime;
  to_duration: typeof to_duration;
  to_bigint: typeof to_bigint;
  to_decimal: typeof to_decimal;
  to_int64: typeof to_int64;
  to_int32: typeof to_int32;
  to_int16: typeof to_int16;
  to_float64: typeof to_float64;
  to_float32: typeof to_float32;
  to_uuid: typeof to_uuid;
  sequence_reset: typeof sequence_reset;
  sequence_next: typeof sequence_next;
  cal: typeof _module__cal;
  enc: typeof _module__enc;
  fts: typeof _module__fts;
  net: typeof _module__net;
  pg: typeof _module__pg;
  math: typeof _module__math;
};
const __defaultExports: __defaultExports = {
  Endian: Endian,
  JsonEmpty: JsonEmpty,
  bigint: bigint,
  bool: bool,
  bytes: bytes,
  datetime: datetime,
  decimal: decimal,
  duration: duration,
  float32: float32,
  float64: float64,
  int16: int16,
  int32: int32,
  int64: int64,
  json: json,
  str: str,
  uuid: uuid,
  BaseObject: BaseObject,
  FreeObject: FreeObject,
  Object: Object_8ce8c71ee4fa5f73840c22d7eaa58588,
  assert_single: assert_single,
  assert_exists: assert_exists,
  assert_distinct: assert_distinct,
  assert: assert,
  materialized: materialized,
  len: len,
  sum: sum,
  count: count,
  random: random,
  min: min,
  max: max,
  all: all,
  any: any,
  enumerate: enumerate,
  round: round,
  contains: contains,
  array_fill: array_fill,
  find: find,
  bit_and: bit_and,
  bit_or: bit_or,
  bit_xor: bit_xor,
  bit_not: bit_not,
  bit_rshift: bit_rshift,
  bit_lshift: bit_lshift,
  bit_count: bit_count,
  array_agg: array_agg,
  array_unpack: array_unpack,
  array_replace: array_replace,
  array_get: array_get,
  array_set: array_set,
  array_insert: array_insert,
  array_join: array_join,
  bytes_get_bit: bytes_get_bit,
  datetime_current: datetime_current,
  datetime_of_transaction: datetime_of_transaction,
  datetime_of_statement: datetime_of_statement,
  datetime_get: datetime_get,
  datetime_truncate: datetime_truncate,
  str_pad_start: str_pad_start,
  str_lpad: str_lpad,
  duration_get: duration_get,
  duration_truncate: duration_truncate,
  duration_to_seconds: duration_to_seconds,
  json_typeof: json_typeof,
  json_array_unpack: json_array_unpack,
  json_object_unpack: json_object_unpack,
  json_object_pack: json_object_pack,
  json_get: json_get,
  json_set: json_set,
  re_match: re_match,
  re_match_all: re_match_all,
  re_test: re_test,
  re_replace: re_replace,
  str_repeat: str_repeat,
  str_lower: str_lower,
  str_upper: str_upper,
  str_title: str_title,
  str_pad_end: str_pad_end,
  str_rpad: str_rpad,
  str_trim_start: str_trim_start,
  str_ltrim: str_ltrim,
  str_trim_end: str_trim_end,
  str_rtrim: str_rtrim,
  str_trim: str_trim,
  str_split: str_split,
  str_replace: str_replace,
  str_reverse: str_reverse,
  uuid_generate_v1mc: uuid_generate_v1mc,
  uuid_generate_v4: uuid_generate_v4,
  range: range,
  multirange: multirange,
  range_is_empty: range_is_empty,
  range_unpack: range_unpack,
  range_get_upper: range_get_upper,
  range_get_lower: range_get_lower,
  range_is_inclusive_upper: range_is_inclusive_upper,
  range_is_inclusive_lower: range_is_inclusive_lower,
  overlaps: overlaps,
  multirange_unpack: multirange_unpack,
  strictly_below: strictly_below,
  strictly_above: strictly_above,
  bounded_above: bounded_above,
  bounded_below: bounded_below,
  adjacent: adjacent,
  __pg_generate_series: _pg_generate_series_9045e2a9ba5f5d288595c71d08e0d9d7,
  to_str: to_str,
  to_bytes: to_bytes,
  to_json: to_json,
  to_datetime: to_datetime,
  to_duration: to_duration,
  to_bigint: to_bigint,
  to_decimal: to_decimal,
  to_int64: to_int64,
  to_int32: to_int32,
  to_int16: to_int16,
  to_float64: to_float64,
  to_float32: to_float32,
  to_uuid: to_uuid,
  sequence_reset: sequence_reset,
  sequence_next: sequence_next,
  cal: _module__cal,
  enc: _module__enc,
  fts: _module__fts,
  net: _module__net,
  pg: _module__pg,
  math: _module__math,
};
export default __defaultExports;
