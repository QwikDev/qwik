// GENERATED by @gel/generate v0.6.4

import type { Executor } from "gel";

export type GetAllUsersReturns = Array<{
  id: string;
  name: string;
  email: string | null;
  has_profile: boolean | null;
  last_updated: Date | null;
}>;

export function getAllUsers(client: Executor): Promise<GetAllUsersReturns> {
  return client.query(`\
select User { **
}`);
}

export type InsertUserArgs = {
  readonly email: string;
  readonly has_profile: boolean;
  readonly name: string;
};

export type InsertUserReturns = {
  name: string;
  email: string | null;
  has_profile: boolean | null;
} | null;

export function insertUser(
  client: Executor,
  args: InsertUserArgs,
): Promise<InsertUserReturns> {
  return client.querySingle(
    `\
select 
    (
    insert User {
      name := <str>$name,
      email := <str>$email,
      has_profile := <bool>$has_profile,
    }
    unless conflict on .email
  )
  {
    name,
    email,
    has_profile
  }`,
    args,
  );
}

export type GetUserArgs = {
  readonly email?: string | null;
  readonly name?: string | null;
};

export type GetUserReturns = Array<{
  id: string;
  name: string;
  email: string | null;
  has_profile: boolean | null;
  last_updated: Date | null;
}>;

export function getUser(
  client: Executor,
  args: GetUserArgs,
): Promise<GetUserReturns> {
  return client.query(
    `\
select User {
  **
}
filter
  (
    exists(<optional str>$name) and .name = <optional str>$name
  )
  or
  (
    exists(<optional str>$email) and .email = <optional str>$email
  );`,
    args,
  );
}
